import { solveSudoku } from './solveSudoku';

describe('solveSudoku', () => {
  const _ = undefined;
  /* it('Solves easy sudoku', () => {
    const sudokuEasy = [
      [_, _, _, _, 8, _, 9, 6, 2],
      [_, _, 8, 5, 1, _, _, _, _],
      [_, 6, _, _, 9, _, 1, _, _],
      [_, 8, 4, 1, 6, 9, 7, _, 3],
      [3, _, _, 7, _, _, 2, 1, _],
      [_, _, 7, _, 2, _, 4, _, _],
      [_, _, 1, 2, 7, 5, 6, 4, _],
      [_, 7, 2, 9, _, _, _, _, 1],
      [5, 4, _, 6, _, _, 8, _, _],
    ];
    expect(solveSudoku(sudokuEasy).sudoku).toStrictEqual([
      [4, 1, 5, 3, 8, 7, 9, 6, 2],
      [9, 2, 8, 5, 1, 6, 3, 7, 4],
      [7, 6, 3, 4, 9, 2, 1, 8, 5],
      [2, 8, 4, 1, 6, 9, 7, 5, 3],
      [3, 9, 6, 7, 5, 4, 2, 1, 8],
      [1, 5, 7, 8, 2, 3, 4, 9, 6],
      [8, 3, 1, 2, 7, 5, 6, 4, 9],
      [6, 7, 2, 9, 4, 8, 5, 3, 1],
      [5, 4, 9, 6, 3, 1, 8, 2, 7],
    ]);
  });
  it('Solves medium sudoku', () => {
    const sudokuMedium = [
      [_, _, _, _, 1, 5, _, _, 8],
      [_, _, _, _, 6, _, _, 4, _],
      [_, 7, 3, _, 2, _, _, _, 1],
      [1, 3, 5, _, _, 2, _, 9, 4],
      [_, _, _, 5, 4, _, _, _, 3],
      [9, _, _, 8, _, _, _, 2, _],
      [_, _, 4, _, 5, _, _, _, _],
      [8, 1, 2, 3, _, _, _, _, 5],
      [_, _, _, 2, _, _, _, _, 6],
    ];
    expect(solveSudoku(sudokuMedium).sudoku).toStrictEqual([
      [2, 6, 9, 4, 1, 5, 7, 3, 8],
      [5, 8, 1, 7, 6, 3, 2, 4, 9],
      [4, 7, 3, 9, 2, 8, 6, 5, 1],
      [1, 3, 5, 6, 7, 2, 8, 9, 4],
      [7, 2, 8, 5, 4, 9, 1, 6, 3],
      [9, 4, 6, 8, 3, 1, 5, 2, 7],
      [6, 9, 4, 1, 5, 7, 3, 8, 2],
      [8, 1, 2, 3, 9, 6, 4, 7, 5],
      [3, 5, 7, 2, 8, 4, 9, 1, 6],
    ]);
  });
  it('Solves hard sudoku', () => {
    const sudokuHard = [
      [_, 2, _, _, _, 1, _, 8, 4],
      [_, _, 8, 6, _, _, 2, 5, _],
      [_, _, 5, _, 2, 7, _, _, _],
      [_, 5, _, _, _, _, _, _, 8],
      [_, 3, 7, _, _, _, 4, _, _],
      [_, _, _, 3, _, 4, _, 6, _],
      [_, 7, _, _, _, _, 8, _, 2],
      [8, _, _, _, _, 3, 1, _, _],
      [_, _, _, 2, 1, _, _, 4, _],
    ];
    expect(solveSudoku(sudokuHard).sudoku).toStrictEqual([
      [7, 2, 6, 5, 3, 1, 9, 8, 4],
      [3, 1, 8, 6, 4, 9, 2, 5, 7],
      [4, 9, 5, 8, 2, 7, 6, 1, 3],
      [1, 5, 4, 9, 6, 2, 3, 7, 8],
      [6, 3, 7, 1, 8, 5, 4, 2, 9],
      [2, 8, 9, 3, 7, 4, 5, 6, 1],
      [5, 7, 1, 4, 9, 6, 8, 3, 2],
      [8, 4, 2, 7, 5, 3, 1, 9, 6],
      [9, 6, 3, 2, 1, 8, 7, 4, 5],
    ]);
  });
  it('Solves expert sudoku', () => {
    const sudokuExpert = [
      [_, _, _, _, _, _, _, 9, _],
      [_, 9, _, 7, _, _, 2, 1, _],
      [_, _, 4, _, 9, _, _, _, _],
      [_, 1, _, _, _, 8, _, _, _],
      [7, _, _, 4, 2, _, _, _, 5],
      [_, _, 8, _, _, _, _, 7, 4],
      [8, _, 1, _, _, _, _, 4, _],
      [_, _, _, _, _, _, _, _, _],
      [_, _, 9, 6, 1, 3, _, _, _],
    ];
    expect(solveSudoku(sudokuExpert).sudoku).toStrictEqual([
      [1, 5, 7, 8, 3, 2, 4, 9, 6],
      [3, 9, 6, 7, 4, 5, 2, 1, 8],
      [2, 8, 4, 1, 9, 6, 7, 5, 3],
      [4, 1, 5, 3, 7, 8, 9, 6, 2],
      [7, 6, 3, 4, 2, 9, 1, 8, 5],
      [9, 2, 8, 5, 6, 1, 3, 7, 4],
      [8, 3, 1, 2, 5, 7, 6, 4, 9],
      [6, 7, 2, 9, 8, 4, 5, 3, 1],
      [5, 4, 9, 6, 1, 3, 8, 2, 7],
    ]);
  });
  it('Solves evil sudoku', () => {
    const sudokuEvil = [
      [8, 6, _, _, 4, _, _, _, _],
      [_, _, 5, 6, _, 2, _, _, 7],
      [_, _, _, _, 8, _, _, 2, _],
      [_, _, 7, _, _, _, 1, _, _],
      [_, 5, _, 3, _, 9, _, 4, _],
      [_, _, _, _, 6, _, _, _, _],
      [9, _, _, _, _, _, _, _, 4],
      [_, 3, _, 2, _, 5, _, 9, _],
      [_, _, _, _, _, 8, _, _, _],
    ];
    expect(solveSudoku(sudokuEvil).sudoku).toStrictEqual([
      [8, 6, 2, 9, 4, 7, 3, 1, 5],
      [3, 4, 5, 6, 1, 2, 9, 8, 7],
      [7, 1, 9, 5, 8, 3, 4, 2, 6],
      [2, 9, 7, 8, 5, 4, 1, 6, 3],
      [1, 5, 6, 3, 2, 9, 7, 4, 8],
      [4, 8, 3, 7, 6, 1, 2, 5, 9],
      [9, 2, 8, 1, 3, 6, 5, 7, 4],
      [6, 3, 4, 2, 7, 5, 8, 9, 1],
      [5, 7, 1, 4, 9, 8, 6, 3, 2],
    ]);
  });
  it('Solves empty sudoku', () => {
    const sudokuEmpty = [
      [_, _, _, _, _, _, _, _, _],
      [_, _, _, _, _, _, _, _, _],
      [_, _, _, _, _, _, _, _, _],
      [_, _, _, _, _, _, _, _, _],
      [_, _, _, _, _, _, _, _, _],
      [_, _, _, _, _, _, _, _, _],
      [_, _, _, _, _, _, _, _, _],
      [_, _, _, _, _, _, _, _, _],
      [_, _, _, _, _, _, _, _, _],
    ];
    expect(solveSudoku(sudokuEmpty).sudoku).toStrictEqual([
      [1, 2, 3, 4, 5, 6, 7, 8, 9],
      [4, 5, 6, 7, 8, 9, 1, 2, 3],
      [7, 8, 9, 1, 2, 3, 4, 5, 6],
      [2, 3, 1, 6, 7, 4, 8, 9, 5],
      [8, 7, 5, 9, 1, 2, 3, 6, 4],
      [6, 9, 4, 5, 3, 8, 2, 1, 7],
      [3, 1, 7, 2, 6, 5, 9, 4, 8],
      [5, 4, 2, 8, 9, 7, 6, 3, 1],
      [9, 6, 8, 3, 4, 1, 5, 7, 2],
    ]);
  });
  it('throws on invalid sudoku - unsolvable', () => {
    expect(() => {
      const sudokuInvalid = [
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [1, 1, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
      ];
      solveSudoku(sudokuInvalid);
    }).toThrowError('Sudoku is invalid and cannot be solved.');
  }); */
  it('throws on invalid sudoku - wrong number of columns', () => {
    expect(() => {
      const sudokuInvalid = [
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
      ];
      solveSudoku(sudokuInvalid);
    }).toThrowError('Expected sudoku to be a 9x9 array of integers between 1 and 9.');
  });
  it('throws on invalid sudoku - wrong number of rows', () => {
    expect(() => {
      const sudokuInvalid = [
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
      ];
      solveSudoku(sudokuInvalid);
    }).toThrowError('Expected sudoku to be a 9x9 array of integers between 1 and 9.');
  });
  it('throws on invalid sudoku - Not integer', () => {
    expect(() => {
      const sudokuInvalid = [
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, 1.1, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
      ];
      solveSudoku(sudokuInvalid);
    }).toThrowError('Expected sudoku to be a 9x9 array of integers between 1 and 9.');
  });
  it('throws on invalid sudoku - numbers below 1.', () => {
    expect(() => {
      const sudokuInvalid = [
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, 0, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
      ];
      solveSudoku(sudokuInvalid);
    }).toThrowError('Expected sudoku to be a 9x9 array of integers between 1 and 9.');
  });
  it('throws on invalid sudoku - numbers not above 9.', () => {
    expect(() => {
      const sudokuInvalid = [
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, 10, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, _, _, _, _],
      ];
      solveSudoku(sudokuInvalid);
    }).toThrowError('Expected sudoku to be a 9x9 array of integers between 1 and 9.');
  });
});
