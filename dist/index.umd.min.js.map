{"version":3,"file":"index.umd.min.js","sources":["../src/libs/array/src/arr2dToCSV.ts","../src/libs/array/src/arrAssignFrom.ts","../src/libs/array/src/arrEvery.ts","../src/libs/array/src/arrFlatten.ts","../src/libs/array/src/arrMapMutable.ts","../src/libs/array/src/arrShallowEquals.ts","../src/libs/array/src/arrSwap.ts","../src/libs/sort/src/compareNumber.ts","../src/libs/sort/src/compareNumeric.ts","../src/libs/sort/src/compareString.ts","../src/libs/binary/index.ts","../src/libs/validation/src/isObject.ts","../src/libs/validation/src/isPrototype.ts","../src/libs/validation/src/isConstructor.ts","../src/libs/validation/src/isNumericString.ts","../src/libs/object/src/iteratePrototypeChain.ts","../src/libs/object/src/setNonEnumerable.ts","../src/libs/object/src/setNonEnumerablePrivateProperties.ts","../src/libs/datastructures/src/Base.ts","../src/libs/datastructures/src/Matrix.ts","../src/libs/datastructures/src/Queue.ts","../src/libs/regex/src/rexec.ts","../src/libs/regex/src/regexGetGroupNames.ts","../src/libs/regex/src/regexEscapeString.ts","../src/libs/regex/src/regexMatcherToValidater.ts","../src/libs/string/src/BemojeString.ts","../src/libs/string/src/strCountCharOccurances.ts","../src/libs/string/src/strCountChars.ts","../src/libs/string/src/strIsLowerCase.ts","../src/libs/string/src/strIsUpperCase.ts","../src/libs/string/src/strLinesRemoveEmpty.ts","../src/libs/string/src/strLinesTrimLeft.ts","../src/libs/string/src/strLinesTrimRight.ts","../src/libs/string/src/strPrettifyMinifiedCode.ts","../src/libs/string/src/strRemoveDuplicateChars.ts","../src/libs/string/src/strRepeat.ts","../src/libs/string/src/strSortChars.ts","../src/libs/string/src/strSplitCamelCase.ts","../src/libs/string/src/strToCharCodes.ts","../src/libs/string/src/strToCharSet.ts","../src/libs/string/src/strToSentences.ts","../src/libs/string/src/strToWords.ts","../src/libs/string/src/strUnwrap.ts","../src/libs/string/src/strWrapBetween.ts","../src/libs/string/src/strWrapIn.ts","../src/libs/string/src/strWrapInAngleBrackets.ts","../src/libs/string/src/strWrapInBraces.ts","../src/libs/string/src/strWrapInBrackets.ts","../src/libs/string/src/strWrapInDoubleQuotes.ts","../src/libs/string/src/strWrapInParenthesis.ts","../src/libs/string/src/strWrapInSingleQuotes.ts","../src/libs/regex/src/regexIsValidFlags.ts","../src/libs/regex/src/regexFixFlags.ts","../src/libs/regex/src/regexValidFlags.ts","../src/libs/regex/src/BemojeRegex.ts","../src/libs/regex/src/regexLibrary.ts","../src/libs/spreadsheet/src/letterToCol.ts","../src/libs/spreadsheet/src/A1ToColRow.ts","../src/libs/spreadsheet/src/colToLetter.ts","../src/libs/datastructures/src/Table.ts","../src/libs/date/src/isValidDateMonth.ts","../src/libs/date/src/assertValidDateMonth.ts","../src/libs/date/src/numDaysInMonth.ts","../src/libs/date/src/isValidDateDay.ts","../src/libs/date/src/isValidDateYear.ts","../src/libs/date/src/assertValidDateYear.ts","../src/libs/date/src/isValidDate.ts","../src/libs/date/src/getCentury.ts","../src/libs/date/src/getCurrentYear.ts","../src/libs/date/src/isLeapYear.ts","../src/libs/Misc/src/solveSudoku.ts","../src/libs/nlp/src/normalizeLineLengths.ts","../src/libs/node/src/normalizeFileExtension.ts","../src/libs/number/src/isEven.ts","../src/libs/number/src/numApproximateLog10.ts","../src/libs/number/src/numFormatEU.ts","../src/libs/number/src/numFormatUS.ts","../src/libs/node/src/memoryUsage.ts","../src/libs/node/src/StringStream.ts","../src/libs/parse/src/socialSecurityNumberDK.ts","../src/libs/function/src/ExtensibleFunction.ts","../src/libs/datastructures/src/SortedArray.ts","../src/libs/performance/src/Timer.ts","../src/libs/array/src/arrFilterMutable.ts","../src/libs/array/src/arrFlattenMutable.ts","../src/libs/array/src/arrIndicesOf.ts","../src/libs/array/src/arrShuffle.ts","../src/libs/array/src/arrSome.ts","../src/libs/array/src/arrSortNumeric.ts","../src/libs/date/src/assertValidDate.ts","../src/libs/date/src/assertValidDateDay.ts","../src/libs/async/src/asyncWithTimeout.ts","../src/libs/regex/src/buildRegexBetween.ts","../src/libs/binary/src/bytesToInt.ts","../src/libs/spreadsheet/src/colRowToA1.ts","../src/libs/sort/src/compareArray.ts","../src/libs/sort/src/compareNumberDescending.ts","../src/libs/sort/src/compareNumericDescending.ts","../src/libs/sort/src/compareStringDescending.ts","../src/libs/node/src/createFileExtensionFilter.ts","../src/libs/node/src/ensureValidWindowsPath.ts","../src/libs/html/src/htmlTableTo2dArray.ts","../src/libs/binary/src/intToBytes.ts","../src/libs/validation/src/isHex.ts","../src/libs/validation/src/isHexOrUnicode.ts","../src/libs/validation/src/isIterable.ts","../src/libs/number/src/isOdd.ts","../src/libs/map/src/mapGetOrDefault.ts","../src/libs/map/src/mapUpdate.ts","../src/libs/map/src/mapUpdateDefault.ts","../src/libs/node/src/pathFromCwd.ts","../src/libs/number/src/randomIntBetween.ts","../src/libs/node/src/readFileStringSync.ts","../src/libs/regex/src/regexMatchBetween.ts","../src/libs/number/src/round.ts","../src/libs/number/src/roundDown.ts","../src/libs/number/src/roundUp.ts","../src/libs/object/src/setEnumerable.ts","../src/libs/set/src/setIntersection.ts","../src/libs/object/src/setNonConfigurable.ts","../src/libs/object/src/setNonWritable.ts","../src/libs/set/src/setUnion.ts","../src/libs/object/src/setWritable.ts","../src/libs/string/src/strReplaceAll.ts","../src/libs/node/src/streamToString.ts"],"sourcesContent":["/**\n * Converts a 2-dimensional array into a CSV string.\n * @param input a 2-dimensional array\n * @param delimiter csv delimiter\n */\nexport function arr2dToCSV<T>(input: Array<Array<T>>, delimiter = ';'): string {\n  return input.map((row) => row.join(delimiter)).join('\\n')\n}\n","/**\n * Mutably assigns the values of source array to target array. Lengths will also be identical.\n */\nexport function arrAssignFrom<T>(target: Array<T>, source: Array<T>): Array<T> {\n  target.splice(source.length)\n  for (let i = 0; i < source.length; i++) {\n    target[i] = source[i]\n  }\n  return target\n}\n","import { Predicate } from '../../array'\n\n/**\n * Returns true if the predicate is satisfied for every element of the passed array; otherwise false.\n * @param input - The array\n * @param  predicate - A predicate callback function\n */\n\nexport function arrEvery<T>(input: Array<T>, predicate: Predicate): boolean {\n  for (let i = 0, len = input.length; i < len; i++) {\n    if (predicate(input[i], i, input) === false) {\n      return false\n    }\n  }\n  return true\n}\n","/**\n * Flattens the passed array recursively to a specified depth. Immutable.\n * @param input - the array to flatten\n * @param maxDepth - the maximum recursive flattening depth.\n */\nexport function arrFlatten<T>(input: Array<any>, maxDepth = Number.MAX_SAFE_INTEGER): Array<T> {\n  const accum = []\n  ;(function recurse(arr = input, depth = 0) {\n    for (let i = 0; i < arr.length; i++) {\n      if (Array.isArray(arr[i]) && depth < maxDepth) {\n        recurse(arr[i], depth + 1)\n      } else {\n        accum.push(arr[i])\n      }\n    }\n  })()\n  return accum\n}\n","import { Callback } from '../../array'\n\n/**\n * Same as Array.prototype.map but performs operations in palce (not immutable).\n * @param input - input array\n * @param f - iterator\n * @example\n * ```js\n * expect(\n *   util.arrMapMutable([1, 2, 3, 4, 5], (value: number) => {\n *     return value + 1;\n *   }),\n * ).toStrictEqual([2, 3, 4, 5, 6]);\n * ```\n */\n\nexport function arrMapMutable(input: Array<any>, f: Callback): Array<any> {\n  for (let i = 0; i < input.length; i++) {\n    input[i] = f(input[i], i, input)\n  }\n  return input\n}\n","import { arrEvery } from './arrEvery'\n\n/**\n * Returns whether or not two arrays shallow equal each other.\n * @param input1 first array\n * @param input2 second array\n */\nexport function arrShallowEquals<T>(input1: Array<T>, input2: Array<T>): boolean {\n  if (input1.length !== input2.length) return false\n  return arrEvery(input1, (value, i) => value === input2[i])\n}\n","/**\n * Swap array elements in place. Runtime: O(1)\n * @param input to be modified\n * @param from index of the first element\n * @param to index of the second element\n */\nexport function arrSwap<T>(input: Array<T>, from: number, to: number): Array<T> {\n  // eslint-disable-next-line @typescript-eslint/no-extra-semi\n  ;[input[from], input[to]] = [input[to], input[from]]\n  return input\n}\n","/**\n * Number comparator function (ascending)\n * @param a first value to compare\n * @param b second value to compare\n */\nexport function compareNumber(a: number, b: number): number {\n  return a - b\n}\n","/**\n * number, bigint, boolean comparator function (ascending)\n * @param a first value to compare\n * @param b second value to compare\n */\nexport function compareNumeric(a: number | bigint | boolean, b: number | bigint | boolean): number {\n  if (a < b) return -1\n  if (a > b) return 1\n  return 0\n}\n","/**\n * Alpha numeric comparator function (ascending)\n * @param a first value to compare\n * @param b second value to compare\n */\nexport function compareString(a: string, b: string): number {\n  return a.localeCompare(b)\n}\n","export * from './src/intToBytes'\nexport * from './src/bytesToInt'\n\n/**\n * Trims an array of bytes on the right\n */\nexport function trimArrayBytesRight(a: Array<number>): Array<number> {\n  if (a[3] === 0) {\n    if (a[2] === 0) {\n      if (a[1] === 0) {\n        return [a[0]]\n      }\n      return [a[0], a[1]]\n    }\n    return [a[0], a[1], a[2]]\n  }\n  return a\n}\n\n/**\n * Trims an array of bytes on the left\n */\nexport function trimArrayBytesLeft(a: Array<number>): Array<number> {\n  if (a[0] === 0) {\n    if (a[1] === 0) {\n      if (a[2] === 0) {\n        return [a[3]]\n      }\n      return [a[2], a[3]]\n    }\n    return [a[1], a[2], a[3]]\n  }\n  return a\n}\n\n/**\n * Pads an array of bytes on the right\n */\nexport function padArrayBytesRight(a: Array<number>): Array<number> {\n  const l = a.length\n  return l === 4 ? a : l === 1 ? [a[0], 0, 0, 0] : l === 2 ? [a[0], a[1], 0, 0] : [a[0], a[1], a[2], 0]\n}\n\n/**\n * Pads an array of bytes on the left\n */\nexport function padArrayBytesLeft(a: Array<number>): Array<number> {\n  const l = a.length\n  return l === 4 ? a : l === 1 ? [0, 0, 0, a[0]] : l === 2 ? [0, 0, a[0], a[1]] : [0, a[0], a[1], a[2]]\n}\n\n/**\n * Converts an array of bytes to an integer\n */\nexport function arrayBytesToInt(bytes: Array<number>): number {\n  return new Uint32Array(new Uint8Array(padArrayBytesRight(bytes)).buffer)[0]\n}\n\n/**\n * Converts an integer to an array of bytes\n */\nexport function intToArrayBytes(int: number): Array<number> {\n  if (int < 256) return [int]\n  const bin = new Uint8Array(new Uint32Array([int]).buffer)\n  if (int < 65536) return [bin[0], bin[1]]\n  if (int < 16777216) return [bin[0], bin[1], bin[2]]\n  if (int < 4294967296) return [bin[0], bin[1], bin[2], bin[3]]\n  return [256, 256, 256, 256]\n}\n\n/**\n * Converts an integer to a buffer\n */\nexport function intToBuffer(int: number): Buffer {\n  return Buffer.from(intToArrayBytes(int))\n}\n\n/**\n * Converts a buffer to an integer\n */\nexport function bufferToInt(buf: Buffer): number {\n  return arrayBytesToInt(Array.from(buf.values()))\n}\n\n/**\n * Converts a string to a base64 buffer\n */\nexport function btoa(buf: Buffer): string {\n  return buf.toString('base64')\n}\n\n/**\n * Converts a base64 buffer to a string\n */\nexport function atob(str: string): Buffer {\n  return Buffer.from(str, 'base64')\n}\n","/**\n * Determine wheter the argument is a Object (is typeof object but not null).\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function isObject(value: any): boolean {\n  return value !== null && typeof value === 'object'\n}\n","import { isObject } from './isObject'\n\n/**\n * Determine wheter a given object is a prototype-object (obj.constructor.prototype === obj).\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function isPrototype(value: any): boolean {\n  if (!isObject(value)) return false\n  if (!('constructor' in value)) return false\n  return value.constructor.prototype === value\n}\n","import { isPrototype } from './isPrototype'\n\n/**\n * Determine if value is a constructor function\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function isConstructor(value: any): boolean {\n  return (\n    typeof value === 'function' &&\n    'prototype' in value &&\n    isPrototype(value.prototype) &&\n    value === value.prototype.constructor\n  )\n}\n","/**\n * Checks if a string is a number.\n * @param str - input string\n */\nexport function isNumericString(str: string): boolean {\n  str = str.trim()\n  let n = Number(str)\n  if (isNaN(n) || !isFinite(n)) {\n    n = parseFloat(str)\n  }\n  return !isNaN(n) && isFinite(n)\n}\n","import { isConstructor, isPrototype } from '../../validation'\n\n/**\n * Iterate the prototype chain of a given object.\n * @example\n * ```js\n * class A {}\n * class B extends A {}\n * class C extends B {}\n * const instance = new C()\n *\n * iteratePrototypeChain(C)\n * //=> [ C, B, A, Function.prototype, Object.prototype]\n *\n * iteratePrototypeChain(C.prototype)\n * //=> [C.prototype, B.prototype, A.prototype, Object.prototype]\n *\n * iteratePrototypeChain(instance)\n * //=> [instance, C.prototype, B.prototype, A.prototype, Object.prototype]\n * ```\n */\nexport function* iteratePrototypeChain(object: Record<string, any>): Generator<Record<string, any>> {\n  if (object == null) return\n  if (\n    // if the below false, then object must be an instance\n    !isPrototype(object) &&\n    !isConstructor(object) &&\n    // the two above depend on checking that typeof object is 'object',\n    // so this last check is in case of arrow functions and generator functions\n    object !== Function.prototype\n  ) {\n    yield object\n    object = object.constructor.prototype\n  }\n  let objectOrNull: Record<string, any> | null = object\n  while (objectOrNull) {\n    yield objectOrNull\n    objectOrNull = Reflect.getPrototypeOf(objectOrNull)\n  }\n}\n","/**\n * Set multiple 'enumerable' property descriptor attributes of the target object to false.\n * @param object The target object.\n * @param propertyName The property names to be affected.\n */\nexport function setNonEnumerable<T>(object: T, ...propertyNames: string[]): void {\n  for (const propertyName of propertyNames) {\n    Object.defineProperty(object, propertyName, { enumerable: false })\n  }\n}\n","import { setNonEnumerable } from './setNonEnumerable'\n/**\n * Set the 'enumerable' property descriptor attributes on the target object to false for all property names that start with '_' (underscore).\n * @param object The target object.\n */\nexport function setNonEnumerablePrivateProperties(object: Record<string, any>): void {\n  setNonEnumerable(object, ...Object.keys(object).filter((key) => key.charAt(0) === '_'))\n}\n","import { iteratePrototypeChain, setNonEnumerablePrivateProperties } from '../../object'\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst hasCreatedFirstInstance: Set<Function> = new Set()\n\n/**\n * Abstract class that other classes can inherit from to gain various handy functionality.\n */\nexport abstract class Base {\n  constructor() {\n    this.onFirstInstance()\n  }\n\n  private onFirstInstance() {\n    if (!hasCreatedFirstInstance.has(this.constructor)) {\n      hasCreatedFirstInstance.add(this.constructor)\n      this.assertInterfaceStaticMembers('IRevivable', ['toJSON'], ['fromJSON'])\n    }\n  }\n\n  private assertInterfaceStaticMembers(\n    interfaceName: string,\n    requiredPropertyNames: Array<string>,\n    requiredStaticProperties: Array<string>,\n  ) {\n    const found = new Set()\n    for (const proto of iteratePrototypeChain(this)) {\n      if (proto !== Object.prototype) {\n        for (const key of requiredPropertyNames) {\n          if (Object.hasOwn(proto, key)) {\n            found.add(key)\n          }\n        }\n      }\n    }\n    const implementsInterface = found.size === requiredPropertyNames.length\n    if (implementsInterface) {\n      for (const staticMember of requiredStaticProperties) {\n        if (!Object.hasOwn(this.constructor, staticMember)) {\n          throw new Error(\n            `Interface ${interfaceName} requires class ${this.constructor.name} to implement static member: ${staticMember}`,\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * Make the properties with property names that start with an underscore non-enumerable.\n   */\n  protected setNonEnumerablePrivateProperties(): void {\n    setNonEnumerablePrivateProperties(this)\n  }\n\n  protected assertNoAmbiguousOptions(options: Record<string, any>, optionKeyPairs: Array<[string, string]>): void {\n    for (const [key1, key2] of optionKeyPairs) {\n      if (options[key1] !== undefined && options[key2] !== undefined) {\n        throw new Error(`Cannot use the '${key1}' option and the '${key2}' option simultanously.`)\n      }\n    }\n  }\n\n  protected assertNoOptionsRequireMissingOptions(\n    options: Record<string, any>,\n    optionKeyPairs: Array<[string, string]>,\n  ): void {\n    for (const [key1, key2] of optionKeyPairs) {\n      if (options[key1] !== undefined && options[key2] === undefined) {\n        throw new Error(`Cannot use the '${key1}' option without the '${key2}' option.`)\n      }\n    }\n  }\n}\n","export class Matrix {\r\n  protected matrix: Array<Array<number>>\r\n  protected immutable = false\r\n\r\n  public static fromArray(array: Array<Array<number>>): Matrix {\r\n    const cols = array[0].length\r\n    const m = new this(array.length, cols)\r\n    for (let r = 0; r < array.length; r++) {\r\n      if (array[r].length !== cols) {\r\n        throw new Error('All rows must have the same length.')\r\n      }\r\n      for (let c = 0; c < cols; c++) {\r\n        m.matrix[r][c] = array[r][c]\r\n      }\r\n    }\r\n    return m\r\n  }\r\n\r\n  public static fromIterable(iterable: Iterable<Iterable<number>>): Matrix {\r\n    const arr = []\r\n    for (const row of iterable) {\r\n      arr.push([...row])\r\n    }\r\n    return this.fromArray(arr)\r\n  }\r\n\r\n  public static identity(size: number): Matrix {\r\n    const m = new Matrix(size, size)\r\n    for (let i = 0; i < size; i++) {\r\n      m.matrix[i][i] = 1\r\n    }\r\n    return m\r\n  }\r\n\r\n  constructor(rows: number, cols: number) {\r\n    if (rows < 1) throw new Error('Expected rows to be greater than zero.')\r\n    if (cols < 1) throw new Error('Expected cols to be greater than zero.')\r\n    this.matrix = new Array(rows)\r\n    for (let r = 0; r < rows; r++) {\r\n      this.matrix[r] = new Array(cols).fill(0)\r\n    }\r\n  }\r\n\r\n  public get rows(): number {\r\n    return this.matrix.length\r\n  }\r\n\r\n  public get cols(): number {\r\n    return this.matrix[0].length\r\n  }\r\n\r\n  public isSameInstanceAs(other: Matrix): boolean {\r\n    return this === other\r\n  }\r\n\r\n  public getImmutable(): boolean {\r\n    return this.immutable\r\n  }\r\n\r\n  public setImmutable(immutable: boolean): Matrix {\r\n    this.immutable = immutable\r\n    return this\r\n  }\r\n\r\n  public deepEquals(other: Matrix | Array<Array<number>>): boolean {\r\n    const m = other instanceof Matrix ? other.matrix : other\r\n    for (let r = 0; r < this.rows; r++) {\r\n      for (let c = 0; c < this.cols; c++) {\r\n        if (this.matrix[r][c] !== m[r][c]) {\r\n          return false\r\n        }\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  public set(row: number, col: number, value: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this\r\n    m.matrix[row][col] = value\r\n    return m\r\n  }\r\n\r\n  public get(row: number, col: number): number {\r\n    return this.matrix[row][col]\r\n  }\r\n\r\n  public has(row: number, col: number): boolean {\r\n    return row < this.rows && col < this.cols && row >= 0 && col >= 0\r\n  }\r\n\r\n  public toArray(): Array<Array<number>> {\r\n    const result = new Array(this.rows)\r\n    for (let r = 0; r < this.rows; r++) {\r\n      result[r] = this.matrix[r].slice()\r\n    }\r\n    return result\r\n  }\r\n\r\n  public clone(): Matrix {\r\n    const clone = new Matrix(this.rows, this.cols)\r\n    for (let r = 0; r < this.rows; r++) {\r\n      for (let c = 0; c < this.cols; c++) {\r\n        clone.matrix[r][c] = this.matrix[r][c]\r\n      }\r\n    }\r\n    return clone\r\n  }\r\n\r\n  public forEach(f: (value: number, row: number, col: number) => void | boolean): Matrix {\r\n    for (let r = 0; r < this.rows; r++) {\r\n      for (let c = 0; c < this.cols; c++) {\r\n        if (f(this.matrix[r][c], r, c) === false) {\r\n          return this\r\n        }\r\n      }\r\n    }\r\n    return this\r\n  }\r\n\r\n  public forEachInRow(row: number, f: (value: number, col: number) => void | boolean): Matrix {\r\n    for (let c = 0; c < this.cols; c++) {\r\n      if (f(this.matrix[row][c], c) === false) {\r\n        return this\r\n      }\r\n    }\r\n    return this\r\n  }\r\n\r\n  public forEachInCol(col: number, f: (value: number, row: number) => void | boolean): Matrix {\r\n    for (let r = 0; r < this.rows; r++) {\r\n      if (f(this.matrix[r][col], r) === false) {\r\n        return this\r\n      }\r\n    }\r\n    return this\r\n  }\r\n\r\n  public forEachInDiagonal(f: (value: number, row: number, col: number) => void | boolean): Matrix {\r\n    for (let i = 0; i < Math.min(this.rows, this.cols); i++) {\r\n      if (f(this.matrix[i][i], i, i) === false) {\r\n        return this\r\n      }\r\n    }\r\n    return this\r\n  }\r\n\r\n  public map(f: (value: number, row: number, col: number) => number): Matrix {\r\n    const m = this.immutable ? this.clone() : this\r\n    for (let r = 0; r < this.rows; r++) {\r\n      for (let c = 0; c < this.cols; c++) {\r\n        m.matrix[r][c] = f(this.matrix[r][c], r, c)\r\n      }\r\n    }\r\n    return m\r\n  }\r\n\r\n  public *[Symbol.iterator](): Generator<number> {\r\n    for (let r = 0; r < this.rows; r++) {\r\n      for (let c = 0; c < this.cols; c++) {\r\n        yield this.matrix[r][c]\r\n      }\r\n    }\r\n  }\r\n\r\n  public *values(): Generator<number> {\r\n    yield* this\r\n  }\r\n\r\n  public mapRow(row: number, f: (value: number, col: number) => number): Matrix {\r\n    const m = this.immutable ? this.clone() : this\r\n    for (let c = 0; c < this.cols; c++) {\r\n      m.matrix[row][c] = f(this.matrix[row][c], c)\r\n    }\r\n    return m\r\n  }\r\n\r\n  public mapCol(col: number, f: (value: number, row: number) => number): Matrix {\r\n    const m = this.immutable ? this.clone() : this\r\n    for (let r = 0; r < this.rows; r++) {\r\n      m.matrix[r][col] = f(this.matrix[r][col], r)\r\n    }\r\n    return m\r\n  }\r\n\r\n  public appendRow(row?: Array<number>): Matrix {\r\n    const m = this.immutable ? this.clone() : this\r\n    if (row) {\r\n      if (row.length !== this.cols) {\r\n        throw new Error('Row must have length ' + this.cols)\r\n      }\r\n    } else {\r\n      row = new Array(this.cols).fill(0)\r\n    }\r\n    m.matrix.push(row)\r\n    return m\r\n  }\r\n\r\n  public appendCol(col?: Array<number>): Matrix {\r\n    const m = this.immutable ? this.clone() : this\r\n    if (col) {\r\n      if (col.length !== this.rows) {\r\n        throw new Error('Col must have length ' + this.rows)\r\n      }\r\n    } else {\r\n      col = new Array(this.rows).fill(0)\r\n    }\r\n    for (let r = 0; r < this.rows; r++) {\r\n      m.matrix[r].push(col[r])\r\n    }\r\n    return m\r\n  }\r\n\r\n  public addBy(n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this\r\n    return m.map((value: number) => value + n)\r\n  }\r\n\r\n  public subtractBy(n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this\r\n    return m.map((value: number) => value - n)\r\n  }\r\n\r\n  public multiplyBy(n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this\r\n    return m.map((value: number) => value * n)\r\n  }\r\n\r\n  public divideBy(n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this\r\n    return m.map((value: number) => value / n)\r\n  }\r\n\r\n  public addRowBy(row: number, n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this\r\n    return m.mapRow(row, (value: number) => value + n)\r\n  }\r\n\r\n  public subtractRowBy(row: number, n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this\r\n    return m.mapRow(row, (value: number) => value - n)\r\n  }\r\n\r\n  public multiplyRowBy(row: number, n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this\r\n    return m.mapRow(row, (value: number) => value * n)\r\n  }\r\n\r\n  public divideRowBy(row: number, n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this\r\n    return m.mapRow(row, (value: number) => value / n)\r\n  }\r\n\r\n  public addColBy(col: number, n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this\r\n    return m.mapCol(col, (value: number) => value + n)\r\n  }\r\n\r\n  public subtractColBy(col: number, n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this\r\n    return m.mapCol(col, (value: number) => value - n)\r\n  }\r\n\r\n  public multiplyColBy(col: number, n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this\r\n    return m.mapCol(col, (value: number) => value * n)\r\n  }\r\n\r\n  public divideColBy(col: number, n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this\r\n    return m.mapCol(col, (value: number) => value / n)\r\n  }\r\n\r\n  public swapRows(row1: number, row2: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this\r\n    const r1 = m.matrix[row1]\r\n    const r2 = m.matrix[row2]\r\n    m.matrix[row1] = r2\r\n    m.matrix[row2] = r1\r\n    return m\r\n  }\r\n\r\n  public swapCols(col1: number, col2: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this\r\n    for (let r = 0; r < this.rows; r++) {\r\n      const v1 = m.matrix[r][col1]\r\n      const v2 = m.matrix[r][col2]\r\n      m.matrix[r][col1] = v2\r\n      m.matrix[r][col2] = v1\r\n    }\r\n    return m\r\n  }\r\n\r\n  public some(f: (value: number, row: number, col: number) => boolean): boolean {\r\n    for (let r = 0; r < this.rows; r++) {\r\n      for (let c = 0; c < this.cols; c++) {\r\n        if (f(this.matrix[r][c], r, c)) {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  public every(f: (value: number, row: number, col: number) => boolean): boolean {\r\n    for (let r = 0; r < this.rows; r++) {\r\n      for (let c = 0; c < this.cols; c++) {\r\n        if (!f(this.matrix[r][c], r, c)) {\r\n          return false\r\n        }\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  public hasDimensions(rows: number, cols: number): boolean {\r\n    return this.rows === rows && this.cols === cols\r\n  }\r\n\r\n  public isSquareMatrix(): boolean {\r\n    return this.rows === this.cols\r\n  }\r\n\r\n  /**\r\n   * Returns whether the matrix is a square matrix that has identical values on its diagonal.\r\n   */\r\n  public isScalarMatrix(): boolean {\r\n    if (!this.isSquareMatrix()) return false\r\n    const val = this.matrix[0][0]\r\n    for (let i = 1; i < this.rows; i++) {\r\n      if (this.matrix[i][i] !== val) {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  public isZeroMatrix(): boolean {\r\n    return this.every((value: number) => value === 0)\r\n  }\r\n\r\n  /**\r\n   * Performs dot product of the matrix with another given matrix.\r\n   */\r\n  public dotProduct(other: Matrix): Matrix {\r\n    if (this.cols !== other.rows) {\r\n      throw new Error(\r\n        'A*B dot product not possible unless the number of columns in A and number of rows in B are the same.',\r\n      )\r\n    }\r\n    const rows = this.rows\r\n    const cols = other.cols\r\n    const steps = this.cols\r\n    const result = new Matrix(rows, cols)\r\n    for (let r = 0; r < rows; r++) {\r\n      for (let c = 0; c < cols; c++) {\r\n        for (let step = 0; step < steps; step++) {\r\n          result.matrix[r][c] += this.matrix[r][step] * other.matrix[step][c]\r\n        }\r\n      }\r\n    }\r\n    return result\r\n  }\r\n}\r\n","import { IRevivable } from '../'\nimport { Base } from './Base'\n\nexport class Queue<T> extends Base implements IRevivable<Array<T>>, Iterable<T> {\n  protected queue: Array<T> = []\n\n  static from<T>(o: Iterable<T>): Queue<T> {\n    const instance: Queue<T> = new Queue()\n    instance.queue = [...o]\n    return instance\n  }\n\n  static fromJSON<T>(json: string): Queue<T> {\n    return Queue.from(JSON.parse(json))\n  }\n\n  public enqueue(item: T): Queue<T> {\n    this.queue.push(item)\n    return this\n  }\n\n  public dequeue(): T {\n    const item = this.queue.shift()\n    if (!item) throw new Error('Queue is empty')\n    return item\n  }\n\n  public get size(): number {\n    return this.queue.length\n  }\n\n  public toArray(): Array<T> {\n    return this.queue.slice()\n  }\n\n  toJSON(): Array<T> {\n    return this.queue\n  }\n\n  *[Symbol.iterator](): Iterator<T> {\n    yield* this.queue\n  }\n}\n\n// const q = new Queue()\n// q.enqueue(1)\n// const str = JSON.stringify(q)\n// const q2 = Queue.fromJSON(str)\n// console.log(q2)\n","import { RexecYield } from '../'\n\n/**\n * Easily perform regex 'exec' on a string. An iterable is returned which steps through the exec process and yields all the details you might need.\n * @param regex - The regular expression object\n * @param string - The string to perform the operation on\n * @example\n * ```js\n * const regex = /(?<g1>a)/g\n * const str = 'Anthony wants a girlfriend.'\n * console.log([...rexec(regex, str)])\n * // [\n * // \t{\n * //     index: 9,\n * //     match: 'a',\n * //     groups: { g1: 'a' },\n * //     lastIndex: 10,\n * //   },\n * //   {\n * //     index: 14,\n * //     match: 'a',\n * //     groups: { g1: 'a' },\n * //     lastIndex: 15,\n * //   },\n * // ]\n * ```\n */\nexport function* rexec(regex: RegExp, string: string): Generator<RexecYield> {\n  let match\n  while ((match = regex.exec(string)) !== null) {\n    yield {\n      index: match.index,\n      match: match[0],\n      groups: Object.assign({}, match.groups),\n      lastIndex: regex.lastIndex,\n    }\n  }\n}\n","import { rexec } from './rexec'\n\n/**\n * Returns an array of named groups defined inside a RegExp instance.\n * @param re RegExp instance to extract named groups from.\n */\nexport function regexGetGroupNames(re: RegExp): Array<string> {\n  const names = []\n  for (const res of rexec(/\\(\\?<(?<name>\\w+)>/g, re.toString())) {\n    names.push(res.groups.name)\n  }\n  return names\n}\n","/**\n * Escapes a string so it can be used in a regular expression.\n */\nexport function regexEscapeString(str: string): string {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n","/**\n * Convert a regex for matching to a regex for validation.\n * @param regex - The regex to convert\n * @example ```js\n * const regexMatchDigits = /\\d+/gi;\n * const regexIsDigit = regexMatcherToValidater(regexMatchDigits); //=> /^\\d+$/i\n * const isDigit = (str) => regexIsDigit.test(str)\n * isDigit('1') //=> true\n * isDigit('a') //=> false\n * ```\n */\nexport function regexMatcherToValidater(regex: RegExp): RegExp {\n  return new RegExp(`^${regex.source}$`, regex.flags.replace('g', ''))\n}\n","import {\n  strCountCharOccurances,\n  strCountChars,\n  strIsLowerCase,\n  strIsUpperCase,\n  strLinesRemoveEmpty,\n  strLinesTrimLeft,\n  strLinesTrimRight,\n  strPrettifyMinifiedCode,\n  strRemoveDuplicateChars,\n  strSortChars,\n  strSplitCamelCase,\n  strToCharCodes,\n  strToCharSet,\n  strToSentences,\n  strToWords,\n  strUnwrap,\n  strWrapBetween,\n  strWrapIn,\n  strWrapInAngleBrackets,\n  strWrapInBraces,\n  strWrapInBrackets,\n  strWrapInDoubleQuotes,\n  strWrapInParenthesis,\n  strWrapInSingleQuotes,\n} from '../'\n\n/**\n * A String class extension with extra features.\n */\nexport class BemojeString extends String {\n  static get [Symbol.species](): typeof String {\n    return String\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  constructor(thing?: any) {\n    super(thing)\n  }\n\n  public get string(): string {\n    return this.toString()\n  }\n\n  public get _(): string {\n    return this.toString()\n  }\n\n  public countCharOccurances(char: string): number {\n    return strCountCharOccurances(this._, char)\n  }\n  public countChars(): Map<string, number> {\n    return strCountChars(this._)\n  }\n  public isLowerCase(): boolean {\n    return strIsLowerCase(this._)\n  }\n  public isUpperCase(): boolean {\n    return strIsUpperCase(this._)\n  }\n  public linesRemoveEmpty(): BemojeString {\n    return new BemojeString(strLinesRemoveEmpty(this._))\n  }\n  public linesTrimLeft(): BemojeString {\n    return new BemojeString(strLinesTrimLeft(this._))\n  }\n  public linesTrimRight(): BemojeString {\n    return new BemojeString(strLinesTrimRight(this._))\n  }\n  public prettifyMinifiedCode(indent = ''): BemojeString {\n    return new BemojeString(strPrettifyMinifiedCode(this._, indent))\n  }\n  public removeDuplicateChars(): BemojeString {\n    return new BemojeString(strRemoveDuplicateChars(this._))\n  }\n  public sortChars(): BemojeString {\n    return new BemojeString(strSortChars(this._))\n  }\n  public splitCamelCase(): Array<string> {\n    return strSplitCamelCase(this._)\n  }\n  public toCharCodes(): Array<number> {\n    return strToCharCodes(this._)\n  }\n  public toCharSet(): BemojeString {\n    return new BemojeString(strToCharSet(this._))\n  }\n  public toSentences(): Array<string> {\n    return strToSentences(this._)\n  }\n  public toWords(): Array<string> {\n    return strToWords(this._)\n  }\n  public unwrap(left: string, right: string, flags?: string): BemojeString {\n    return new BemojeString(strUnwrap(this._, left, right, flags))\n  }\n  public wrapBetween(left: string, right: string): BemojeString {\n    return new BemojeString(strWrapBetween(this._, left, right))\n  }\n  public wrapIn(wrap: string): BemojeString {\n    return new BemojeString(strWrapIn(this._, wrap))\n  }\n  public wrapInAngleBrackets(): BemojeString {\n    return new BemojeString(strWrapInAngleBrackets(this._))\n  }\n  public wrapInBraces(): BemojeString {\n    return new BemojeString(strWrapInBraces(this._))\n  }\n  public wrapInBrackets(): BemojeString {\n    return new BemojeString(strWrapInBrackets(this._))\n  }\n  public wrapInDoubleQuotes(): BemojeString {\n    return new BemojeString(strWrapInDoubleQuotes(this._))\n  }\n  public wrapInParenthesis(): BemojeString {\n    return new BemojeString(strWrapInParenthesis(this._))\n  }\n  public wrapInSingleQuotes(): BemojeString {\n    return new BemojeString(strWrapInSingleQuotes(this._))\n  }\n}\n\n// declare global {\n//   interface String {\n//     /**\n//      * Convert the String instance to a BemojeString instance.\n//      */\n//     get bemoje(): BemojeString\n//   }\n// }\n\n// Object.defineProperty(String.prototype, 'bemoje', {\n//   get: function () {\n//     return Object.setPrototypeOf(this, BemojeString.prototype)\n//   },\n// })\n\n// console.log(new BemojeString('helloThereAgain').splitCamelCase())\n// console.log(new BemojeString('Hi, my name is Benjamin.').toWords())\n// console.log(new BemojeString('Hi, my name is Benjamin.').wrapInAngleBrackets().wrapInBraces().wrapInDoubleQuotes())\n\n// console.log(typeof new BemojeString('Hi, my name is Benjamin.')._)\n","/**\n * Count occurances of a character within a given string.\n * @param input - The string to search\n * @param char - The character to find\n */\nexport function strCountCharOccurances(input: string, char: string): number {\n  if (char.length !== 1) {\n    throw new Error('Expected char to be a single character string of length 1.')\n  }\n  let result = 0\n  for (const c of input) {\n    if (c === char) {\n      result++\n    }\n  }\n  return result\n}\n","/**\n * Count the number of occurrences of each character in a string.\n */\nexport function strCountChars(string: string): Map<string, number> {\n  const result = new Map()\n  for (const char of string) {\n    const count = result.get(char)\n    result.set(char, count ? count + 1 : 1)\n  }\n  return result\n}\n","/**\n * Returns whether the string is lower case.\n * @param input - input string\n * @example\n * ```js\n * strIsLowerCase('abc')\n * //=> true\n *\n * strIsLowerCase('ABC')\n * //=> false\n * ```\n */\nexport function strIsLowerCase(input: string): boolean {\n  return input === input.toLowerCase()\n}\n","/**\n * Returns whether the string is upper case.\n * @param input - input string\n * @example\n * ```js\n * strIsUpperCase('abc')\n * //=> false\n *\n * strIsUpperCase('ABC')\n * //=> true\n * ```\n */\nexport function strIsUpperCase(input: string): boolean {\n  return input === input.toUpperCase()\n}\n","/**\n * Takes a multiline string and removes lines that are empty or only contain whitespace.\n * @param input - input string\n */\nexport function strLinesRemoveEmpty(input: string): string {\n  return input\n    .replace(/\\r?\\n\\s*\\r?\\n/gm, '\\n')\n    .trimStart()\n    .trimEnd()\n}\n","/**\n * Takes a multiline string and performs a left side trim of whitespace on each line.\n * @param input - input string\n */\nexport function strLinesTrimLeft(input: string): string {\n  return input.replace(/\\n\\r?\\s+/gm, '\\n')\n}\n","/**\n * Takes a multiline string and performs a right side trim of whitespace on each line.\n * @param input - input string\n */\nexport function strLinesTrimRight(input: string): string {\n  return input.replace(/\\s+\\n/gm, '\\n')\n}\n","import { strRepeat, strLinesTrimRight, strLinesRemoveEmpty } from '../'\n\n/**\n * Very crude, simple, fast code formatting of minified code.\n * Only works when input code:\n * - is minified\n * - is scoped with brackets\n * - expressions end with semicolon\n * - has no string literals containing any of these characters: '{', '}', ';'.\n * @param input The minified source code\n * @param indent The string to use as indentation\n */\nexport function strPrettifyMinifiedCode(input: string, indent = '  '): string {\n  const getIndents = (n: number) => strRepeat('\\t', n)\n  const fixIndents = (s: string) => {\n    return s.replace(/\\t +/g, '\\t').replace(/\\t/g, indent)\n  }\n  let depth = 0\n  const arr = Array.from(input).map((c) => {\n    if (c === '{') {\n      depth++\n      return '{\\n' + getIndents(depth)\n    } else if (c === '}') {\n      depth--\n      return '\\n' + getIndents(depth) + '}\\n' + getIndents(depth)\n    } else if (c === ';') {\n      return ';\\n' + getIndents(depth)\n    } else return c\n  })\n  return fixIndents(strLinesTrimRight(strLinesRemoveEmpty(arr.join(''))))\n}\n","/**\n * Remove duplicate characters from a string.\n */\nexport function strRemoveDuplicateChars(string: string): string {\n  return Array.from(new Set(string)).join('')\n}\n","/**\n * Returns a given number of contatenations of a given input string.\n * @param input - input string\n * @param n - Number of repetitions of the input string\n */\nexport function strRepeat(input: string, n: number): string {\n  return new Array(n).fill(input).join('')\n}\n","/**\n * Sorts the characters in a string.\n */\nexport function strSortChars(string: string): string {\n  return Array.from(string).sort().join('')\n}\n","import { strIsLowerCase } from './strIsLowerCase'\nimport { strIsUpperCase } from './strIsUpperCase'\nimport { isNumericString } from '../../validation'\n\nfunction isCamelCaseWordBreakIndex(word: string, index: number) {\n  return (\n    strIsLowerCase(word[index - 1]) &&\n    strIsUpperCase(word[index]) &&\n    !isNumericString(word[index - 1]) &&\n    !isNumericString(word[index])\n  )\n}\n\n/**\n * Returns an array of words in the string\n * @param input - input string\n * @example\n * ```js\n * strSplitCamelCase('someCamelCase')\n * //=> ['some', 'Camel', 'Case']\n * ```\n */\nexport function strSplitCamelCase(word: string): Array<string> {\n  const result = []\n  const lastCharIndex = word.length - 1\n  let lastCamelCaseBreakIndex = 0\n  let foundCamelCase = false\n  for (let i = 1; i < word.length; i++) {\n    if (foundCamelCase && i === lastCharIndex) {\n      // last char\n      const sub = word.substring(lastCamelCaseBreakIndex)\n      if (sub) result.push(sub)\n      continue\n    }\n    if (isCamelCaseWordBreakIndex(word, i)) {\n      const sub = word.substring(lastCamelCaseBreakIndex, i)\n      if (!sub) continue\n      result.push(sub)\n      lastCamelCaseBreakIndex = i\n      foundCamelCase = true\n    }\n  }\n  // if no splits needed, just return the word as it was\n  if (!foundCamelCase) {\n    result.push(word)\n  }\n  return result\n}\n","/**\n * Converts a string to an array of char codes\n */\nexport function strToCharCodes(str: string): Array<number> {\n  const len = str.length\n  const ret = new Array(len)\n  for (let i = 0; i < len; i++) {\n    ret[i] = str.charCodeAt(i)\n  }\n  return ret\n}\n","/**\n * Returns a string containing the set of all unique characters in a string.\n */\nexport function strToCharSet(string: string): string {\n  return Array.from(new Set(string)).sort().join('')\n}\n","import { split } from 'sentence-splitter'\nimport { regexLibrary } from '../../regex'\n\n/**\n * Intelligently split a string into sentences. Uses AST parsing to determine sentence boundaries.\n * @param text Text to split into sentences\n */\nexport function strToSentences(text: string): Array<string> {\n  return split(text)\n    .map((node) => {\n      const [start, end] = node.range\n      return text.substring(start, end).replace(regexLibrary.repeatingWhiteSpace, ' ').trim()\n    })\n    .filter((s) => !!s)\n}\n","import { words } from 'lodash'\n\n/**\n * Returns an array of words in the string\n * @param input - input string\n * @example\n * ```js\n * strToWords('How are you?')\n * //=> ['How', 'are', 'you']\n * ```\n */\nexport function strToWords(input: string): Array<string> {\n  return words(input)\n}\n","import { regexEscapeString } from '../../regex'\n\n/**\n * Inserts provided strings before and after a string.\n * @param input - input string\n * @param left - string to place before\n * @param right - string to place after\n * @param flags - regex flags\n */\nexport function strUnwrap(input: string, left: string, right: string, flags = ''): string {\n  return input\n    .replace(new RegExp('^' + regexEscapeString(left), flags), '')\n    .replace(new RegExp(regexEscapeString(right) + '$', flags), '')\n}\n\n// const str = 'hello'\n// const wrapped = strWrapBetween(str, '(', ')')\n// const unwrapped = strUnwrap(wrapped, '(', ')')\n// console.log({ str, wrapped, unwrapped })\n","/**\n * Inserts provided strings before and after a string.\n * @param input - input string\n * @param left - string to place before\n * @param right - string to place after\n * @example\n * ```js\n * expect(util.strWrapBetween('input', '#', '&')).toBe('#input&');\n * ```\n */\nexport function strWrapBetween(input: string, left: string, right: string): string {\n  return left + input + right\n}\n","/**\n * Inserts a provided string before and after a string.\n * @param input - input string\n * @param wrap - string to place before and after\n * @example\n * ```js\n * expect(util.strWrapIn('input', '#')).toBe('#input#');\n * ```\n */\nexport function strWrapIn(input: string, wrap: string): string {\n  return wrap + input + wrap\n}\n","/**\n * Wraps a string in angle brackets.\n * @param input - input string\n * @example\n * ```js\n * expect(util.strWrapInAngleBrackets('input')).toBe('<input>');\n * ```\n */\nexport function strWrapInAngleBrackets(input: string): string {\n  return '<' + input + '>'\n}\n","/**\n * Wraps a string in braces.\n * @param input - input string\n * @example\n * ```js\n * expect(util.strWrapInBraces('input')).toBe('{input}');\n * ```\n */\nexport function strWrapInBraces(input: string): string {\n  return '{' + input + '}'\n}\n","/**\n * Wraps a string in brackets.\n * @param input - input string\n * @example\n * ```js\n * expect(util.strWrapInBrackets('input')).toBe('[input]');\n * ```\n */\nexport function strWrapInBrackets(input: string): string {\n  return '[' + input + ']'\n}\n","/**\n * Wraps a string in parenthesis.\n * @param input - input string\n * @example\n * ```js\n * expect(util.strWrapInDoubleQuotes('input')).toBe('\"input\"');\n * ```\n */\nexport function strWrapInDoubleQuotes(input: string): string {\n  return '\"' + input + '\"'\n}\n","/**\n * Wraps a string in parenthesis.\n * @param input - input string\n * @example\n * ```js\n * expect(util.strWrapInParenthesis('input')).toBe('(input)');\n * ```\n */\nexport function strWrapInParenthesis(input: string): string {\n  return '(' + input + ')'\n}\n","/**\n * Wraps a string in parenthesis.\n * @param input - input string\n * @example\n * ```js\n * expect(util.strWrapInSingleQuotes('input')).toBe(\"'input'\");\n * ```\n */\nexport function strWrapInSingleQuotes(input: string): string {\n  return \"'\" + input + \"'\"\n}\n","import { strRemoveDuplicateChars } from '../../string'\n\n/**\n * Checks if a string is a valid regex flags string.\n */\nexport function regexIsValidFlags(flags: string): boolean {\n  return /^[gimsuy]*$/.test(flags) && strRemoveDuplicateChars(flags).length === flags.length\n}\n","import { strSortChars, strRemoveDuplicateChars } from '../../string'\n\n/**\n * Takes a string of RegExp flags and returns a string guaranteed to be valid.\n * @param flags - string of RegExp flags\n */\nexport function regexFixFlags(flags: string): string {\n  if (!flags) return flags\n  return strSortChars(strRemoveDuplicateChars(flags).replace(/[^gimsuy]/gi, ''))\n}\n","/**\n * Returns an array of all valid flags for a regular expression.\n */\nexport function regexValidFlags(): Array<string> {\n  return ['g', 'i', 'm', 's', 'u', 'y']\n}\n","import { regexGetGroupNames } from './regexGetGroupNames'\nimport { regexEscapeString } from './regexEscapeString'\nimport { regexMatcherToValidater } from './regexMatcherToValidater'\nimport { rexec } from './rexec'\nimport { strSortChars } from '../../string'\nimport { regexIsValidFlags } from './regexIsValidFlags'\nimport { regexFixFlags } from './regexFixFlags'\nimport { regexValidFlags } from './regexValidFlags'\nimport type { RexecYield } from '../'\n\nexport type BemojeRegexOptions = {\n  /**\n   * Whether to insert escape characters into the source string.\n   */\n  escapeSourceString: boolean\n\n  /**\n   * Whether to repair the flags string if it is not valid.\n   */\n  fixFlags: boolean\n}\n\n/**\n * A RegExp class extension with extra features.\n */\nexport class BemojeRegex extends RegExp {\n  protected static defaultOptions: BemojeRegexOptions = {\n    escapeSourceString: false,\n    fixFlags: false,\n  }\n\n  public constructor(source: string | RegExp, flags = '', options?: BemojeRegexOptions) {\n    if (source instanceof RegExp && !flags) {\n      super(source)\n    } else {\n      options = Object.assign({}, BemojeRegex.defaultOptions, options)\n      if (source instanceof RegExp) {\n        flags = flags ? flags : source.flags\n        source = source.source\n      } else if (options?.escapeSourceString) {\n        source = regexEscapeString(source)\n      }\n      if (options.fixFlags) {\n        flags = regexFixFlags(flags)\n      } else {\n        flags = strSortChars(flags)\n      }\n      super(source, flags)\n    }\n  }\n\n  /**\n   * Checks if a string is a valid regex flags string.\n   */\n  public static isValidFlags = regexIsValidFlags\n\n  /**\n   * Takes a string of RegExp flags and returns a string guaranteed to be valid.\n   * @param flags - string of RegExp flags\n   */\n  public static fixFlags = regexFixFlags\n\n  /**\n   * Returns an array of all valid flags for a regular expression.\n   */\n  public static getValidFlags = regexValidFlags\n\n  /**\n   * Returns true if the RegExp instance has same source and flags.\n   * @param regex - RegExp instance to compare to.\n   */\n  public compareTo(regex: RegExp): boolean {\n    return this.source === regex.source && this.flags === regex.flags\n  }\n\n  /**\n   * Returns true if the RegExp instance is a also BemojeRegex instance and both have the same source and flags.\n   * @param regex - RegExp instance to compare to.\n   */\n  public compareToStrict(regex: RegExp): boolean {\n    return regex instanceof BemojeRegex && this.source === regex.source && this.flags === regex.flags\n  }\n\n  /**\n   * Returns an array of named groups defined inside the RegExp instance.\n   */\n  public getGroupNames(): Array<string> {\n    return regexGetGroupNames(this)\n  }\n\n  /**\n   * Easily perform regex 'exec' on a string. An iterable is returned which steps through the exec process and yields all the details you might need.\n   */\n  public *rexec(string: string): Generator<RexecYield> {\n    yield* rexec(this, string)\n  }\n\n  /**\n   * Convert a regex for matching to a regex for validation.\n   */\n  public toValidator(): BemojeRegex {\n    return bemoje(regexMatcherToValidater(this))\n  }\n\n  /**\n   * Convert the BemojeRegex instance to a RegExp instance.\n   */\n  public toRegExp(): RegExp {\n    return Object.setPrototypeOf(this, RegExp.prototype)\n  }\n}\n\nfunction bemoje(regex: RegExp): BemojeRegex {\n  return Object.setPrototypeOf(regex, BemojeRegex.prototype)\n}\n\n// declare global {\n//   interface RegExp {\n//     /**\n//      * Convert the RegExp instance to a BemojeRegex instance.\n//      */\n//     get bemoje(): BemojeRegex\n//   }\n// }\n\n// Object.defineProperty(RegExp.prototype, 'bemoje', {\n//   get: function () {\n//     return Object.setPrototypeOf(this, BemojeRegex.prototype)\n//   },\n// })\n\n// const reg = new BemojeRegex(/(?<asd>\\/\\*\\*)(?<aga3>.*?)(?=\\*\\/)(?<ahfdtr>\\*\\/)/gi)\n// console.log(reg.getGroupNames())\n// console.log(reg.getGroupNames())\n// console.log(reg.toValidator())\n// console.log(reg.toRegExp())\n// const reg2 = new BemojeRegex(/abc/g)\n// const str2 = 'lala abc lalala abc ...'\n// console.log([...reg2.rexec(str2)])\n","/**\n * Matches 2 or more consecutive whitespace characters, including line terminators, tabs, etc.\n */\nexport const repeatingWhiteSpace = /((\\r?\\r?\\n)|\\s|\\t){2,}/g\n\n/**\n * Matches words in a string\n */\nexport const words = /\\b[^\\W]+/g\n\n/**\n * Matches Danish social security numbers with or without the dash.\n * Example: 151199-1512\n */\nexport const socialSecurityNumbersDK = /(?<dd>[0-3][0-9])(?<mm>[0-1][0-9])(?<yy>[0-9]{2}).?(?<id>[0-9]{4})/g\n\n/**\n * Matches positive or negative integers.\n * Example: -20\n */\nexport const integers = /-?\\d+/g\n\n/**\n * Matches inverted US format positive or negative decimal numbers with no thousand separators.\n * Example: -20412,3461\n */\nexport const numberNoThousandSepCommaDecimal = /-?\\d+,\\d+/g\n\n/**\n * Matches US format positive or negative decimal numbers with no thousand separators.\n * Example: -20412.3461\n */\nexport const numberNoThousandSepDotDecimal = /-?\\d+.\\d+/g\n\n/**\n * Matches inverted US format positive or negative decimal numbers with thousand separators.\n * Example: -20.412,34\n */\nexport const numberDotSepCommaDecimal = /-?\\d{1,3}(\\.\\d{3})*(,\\d+)?/g\n\n/**\n * Matches US format positive or negative decimal numbers with thousand separators.\n * Example: -20,412.34\n */\nexport const numberCommaSepDotDecimal = /-?\\d{1,3}(,\\d{3})*(\\.\\d+)?/g\n\n/**\n * Prefixes for hex colors, hex decimal and regexp unicode hex\n */\nexport const isHexPrefix = /^(0x|0h|(\\\\?u)|#)/i\n\n/**\n * Understands prefixes for hex colors, hex decimal and regexp unicode hex\n */\nexport const isHex = /^(0x|0h|(\\\\?u)|#)?[0-9A-F]+$/i\n\n/**\n * For checking if a string is of only alpha characters for a specific locale.\n */\nexport const isLocaleAlpha = new Map([\n  ['en-US', /^[A-Z]+$/i],\n  ['az-AZ', /^[A-VXYZÇƏĞİıÖŞÜ]+$/i],\n  ['bg-BG', /^[А-Я]+$/i],\n  ['cs-CZ', /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i],\n  ['da-DK', /^[A-ZÆØÅ]+$/i],\n  ['de-DE', /^[A-ZÄÖÜß]+$/i],\n  ['el-GR', /^[Α-ώ]+$/i],\n  ['es-ES', /^[A-ZÁÉÍÑÓÚÜ]+$/i],\n  ['fa-IR', /^[ابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهی]+$/i],\n  ['fr-FR', /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i],\n  ['it-IT', /^[A-ZÀÉÈÌÎÓÒÙ]+$/i],\n  ['nb-NO', /^[A-ZÆØÅ]+$/i],\n  ['nl-NL', /^[A-ZÁÉËÏÓÖÜÚ]+$/i],\n  ['nn-NO', /^[A-ZÆØÅ]+$/i],\n  ['hu-HU', /^[A-ZÁÉÍÓÖŐÚÜŰ]+$/i],\n  ['pl-PL', /^[A-ZĄĆĘŚŁŃÓŻŹ]+$/i],\n  ['pt-PT', /^[A-ZÃÁÀÂÄÇÉÊËÍÏÕÓÔÖÚÜ]+$/i],\n  ['ru-RU', /^[А-ЯЁ]+$/i],\n  ['sl-SI', /^[A-ZČĆĐŠŽ]+$/i],\n  ['sk-SK', /^[A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i],\n  ['sr-RS@latin', /^[A-ZČĆŽŠĐ]+$/i],\n  ['sr-RS', /^[А-ЯЂЈЉЊЋЏ]+$/i],\n  ['sv-SE', /^[A-ZÅÄÖ]+$/i],\n  ['th-TH', /^[ก-๐\\s]+$/i],\n  ['tr-TR', /^[A-ZÇĞİıÖŞÜ]+$/i],\n  ['uk-UA', /^[А-ЩЬЮЯЄIЇҐі]+$/i],\n  ['vi-VN', /^[A-ZÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴĐÈÉẸẺẼÊỀẾỆỂỄÌÍỊỈĨÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠÙÚỤỦŨƯỪỨỰỬỮỲÝỴỶỸ]+$/i],\n  ['ku-IQ', /^[ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i],\n  // eslint-disable-next-line no-misleading-character-class\n  ['ar', /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/],\n  ['he', /^[א-ת]+$/],\n  ['fa', /^['آاءأؤئبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهةی']+$/i],\n])\n\n/**\n * For checking if a string is of only alpha-numeric characters for a specific locale.\n */\nexport const isLocaleAlphaNumeric = new Map([\n  ['en-US', /^[0-9A-Z]+$/i],\n  ['az-AZ', /^[0-9A-VXYZÇƏĞİıÖŞÜ]+$/i],\n  ['bg-BG', /^[0-9А-Я]+$/i],\n  ['cs-CZ', /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i],\n  ['da-DK', /^[0-9A-ZÆØÅ]+$/i],\n  ['de-DE', /^[0-9A-ZÄÖÜß]+$/i],\n  ['el-GR', /^[0-9Α-ω]+$/i],\n  ['es-ES', /^[0-9A-ZÁÉÍÑÓÚÜ]+$/i],\n  ['fr-FR', /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i],\n  ['it-IT', /^[0-9A-ZÀÉÈÌÎÓÒÙ]+$/i],\n  ['hu-HU', /^[0-9A-ZÁÉÍÓÖŐÚÜŰ]+$/i],\n  ['nb-NO', /^[0-9A-ZÆØÅ]+$/i],\n  ['nl-NL', /^[0-9A-ZÁÉËÏÓÖÜÚ]+$/i],\n  ['nn-NO', /^[0-9A-ZÆØÅ]+$/i],\n  ['pl-PL', /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]+$/i],\n  ['pt-PT', /^[0-9A-ZÃÁÀÂÄÇÉÊËÍÏÕÓÔÖÚÜ]+$/i],\n  ['ru-RU', /^[0-9А-ЯЁ]+$/i],\n  ['sl-SI', /^[0-9A-ZČĆĐŠŽ]+$/i],\n  ['sk-SK', /^[0-9A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i],\n  ['sr-RS@latin', /^[0-9A-ZČĆŽŠĐ]+$/i],\n  ['sr-RS', /^[0-9А-ЯЂЈЉЊЋЏ]+$/i],\n  ['sv-SE', /^[0-9A-ZÅÄÖ]+$/i],\n  ['th-TH', /^[ก-๙\\s]+$/i],\n  ['tr-TR', /^[0-9A-ZÇĞİıÖŞÜ]+$/i],\n  ['uk-UA', /^[0-9А-ЩЬЮЯЄIЇҐі]+$/i],\n  ['ku-IQ', /^[٠١٢٣٤٥٦٧٨٩0-9ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i],\n  ['vi-VN', /^[0-9A-ZÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴĐÈÉẸẺẼÊỀẾỆỂỄÌÍỊỈĨÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠÙÚỤỦŨƯỪỨỰỬỮỲÝỴỶỸ]+$/i],\n  // eslint-disable-next-line no-misleading-character-class\n  ['ar', /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/],\n  ['he', /^[0-9א-ת]+$/],\n  ['fa', /^['0-9آاءأؤئبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهةی۱۲۳۴۵۶۷۸۹۰']+$/i],\n])\n","// const REGEX_VALID_A = /^[A-Z]+$/g;\nconst alphaToColMap: Map<string, number> = new Map()\n\n/**\n * Convert spreadsheet column letter(s) to column-number\n * @param A - Column letter\n * @param zeroIndexed - Whether or not column number start at one or zero.\n */\nexport function letterToCol(A: string, zeroIndexed = false): number {\n  A = A.toUpperCase()\n  const fromMem = alphaToColMap.get(A)\n  if (fromMem) return fromMem\n  // if (REGEX_VALID_A.test(A)) throw new Error(`Invalid column letter: ${A}`);\n  let col = 0\n  const length = A.length\n  for (let i = 0; i < length; i++) {\n    col += (A.charCodeAt(i) - 64) * Math.pow(26, length - i - 1)\n  }\n  return col - (zeroIndexed ? 1 : 0)\n}\n","import { rexec } from '../../regex'\nimport { letterToCol } from './letterToCol'\n\nconst REGEX_VALID_A1 = /^(?<a>[A-Z]+)(?<n>[1-9]+)$/g\n\n/**\n * Convert spreadsheet A1-notation to [column, row].\n * @param A1 - A1-notation string.\n * @param zeroIndexed - Whether or not column and row numbers start at one or zero.\n */\nexport function A1ToColRow(A1: string, zeroIndexed = false): Array<number> {\n  A1 = A1.toUpperCase()\n  const matches = [...rexec(REGEX_VALID_A1, A1)]\n  if (!matches.length) throw new Error(`Invalid A1 string: ${A1}`)\n  const adjust = zeroIndexed ? 1 : 0\n  return [letterToCol(matches[0].groups.a) - adjust, parseInt(matches[0].groups.n) - adjust]\n}\n","const colToAlphaMap: Map<number, string> = new Map()\n\n/**\n * Convert a spreadsheet column number to a column letter.\n * @param col - Column number\n * @param zeroIndexed - Whether or not column number start at one or zero.\n */\nexport function colToLetter(col: number, zeroIndexed = false): string {\n  if (zeroIndexed) col++\n  const fromMem = colToAlphaMap.get(col)\n  if (fromMem) return fromMem\n  if (!Number.isInteger(col)) throw new Error(`Expected col to be an integer. Got: ${col}`)\n  if (col < 1) throw new Error(`Expected col to be greater than zero. Got: ${col}`)\n  let letter = ''\n  let temp\n  while (col > 0) {\n    temp = (col - 1) % 26\n    letter = String.fromCharCode(temp + 65) + letter\n    col = (col - temp - 1) / 26\n  }\n  return letter\n}\n","/* eslint-disable @typescript-eslint/no-extra-semi */\nimport { IRevivable } from '../'\nimport { arr2dToCSV, arrEvery, arrMapMutable } from '../../array'\nimport { Base } from './Base'\nimport { A1ToColRow } from '../../spreadsheet'\nimport { letterToCol } from '../../spreadsheet/src/letterToCol'\n\n/**\n * Constructor options for the Table class.\n */\nexport interface ITableOptions<T> {\n  /**\n   * 2D array to build table from.\n   * All rows must be the same length.\n   * When using this option, the 'columns' and 'rows' options are not allowed.\n   */\n  data?: Array<Array<T>>\n  /**\n   * Intepret the first row of passed data as column headers/names (see TableOptions.data property).\n   * When performing lookups in the table from indices or coordinates, headers are ignored, ie. not counted.\n   * If the 'data' option is not used, this option is not allowed.\n   * If the 'columnHeaders' option is used, this option is not allowed.\n   */\n  extractColumnHeaders?: boolean\n  /**\n   * Intepret the first element of every row of passed data as row headers/names (see TableOptions.data property).\n   * When performing lookups in the table from indices or coordinates, headers are ignored, ie. not counted.\n   * If the 'data' option is not used, this option is not allowed.\n   * If the 'rowHeaders' option is used, this option is not allowed.\n   */\n  extractRowHeaders?: boolean\n  /**\n   * Define column headers/names.\n   * Must be of same length as entered in the 'columns' option.\n   * When performing lookups in the table from indices or coordinates, headers are ignored, ie. not counted.\n   * When using row headers simultaneously, this array will need to be of length one higher as the first element is intepreted as the column header for the row headers column.\n   */\n  columnHeaders?: Array<string>\n  /**\n   * Define column headers/names.\n   * Must be of same length as entered in the 'columns' option.\n   * When performing lookups in the table from indices or coordinates, headers are ignored, ie. not counted.\n   */\n  rowHeaders?: Array<string>\n  /**\n   * Number of columns in the table.\n   * This option is not allowed when the 'data' or 'columnHeaders' properties are being used.\n   * TypeScript: Type safety consideration: Please note that when initializing an empty Table, it is full of 'undefined' values even if the table is specifically typed to not allow 'undefined'. TypeScript's static type-checking cannot see this.\n   */\n  columns?: number\n  /**\n   * Number of rows in the table.\n   * This option is not allowed when the 'data' or 'rowHeaders' properties are being used.\n   * TypeScript: Type safety consideration: Please note that when initializing an empty Table, it is full of 'undefined' values even if the table is specifically typed to not allow 'undefined'. TypeScript's static type-checking cannot see this.\n   */\n  rows?: number\n}\n\nexport type TableSerializedForm<T> = {\n  columnHeaders: Array<string>\n  rowHeaders: Array<string>\n  data: Array<Array<T>>\n}\n\n/**\n * Two-dimensional table class supporting column and row headers.\n */\nexport class Table<T> extends Base implements IRevivable<TableSerializedForm<T>> {\n  protected _columnHeaders?: Array<string>\n  protected _rowHeaders?: Array<string>\n  protected _data: Array<Array<T>> = []\n\n  /**\n   * Creates a Table instance from CSV string data.\n   * @param csv CSV data string\n   * @param delimiter csv delimiter\n   * @param options TableOptions constructor options.\n   */\n  public static fromCSV<T>(csv: string, delimiter = ';', options: ITableOptions<T | string> = {}): Table<T | string> {\n    options.data = csv\n      .split('\\n')\n      .filter((line) => line.length)\n      .map((line) => line.trim().split(delimiter))\n    return new Table(options)\n  }\n\n  /**\n   * Revive a stringified Table object.\n   * @param json a stringified Table object.\n   */\n  public static fromJSON<T>(json: string): Table<T> {\n    return new Table(JSON.parse(json))\n  }\n\n  constructor(options: ITableOptions<T> = {}) {\n    super()\n    this.validateOptions(options)\n    this.handleOptions(options)\n    this.validateData()\n    this.setNonEnumerablePrivateProperties()\n  }\n\n  /**\n   * Gets the number of cols in the table, not including headers.\n   */\n  public get columns(): number {\n    return this._data[0].length\n  }\n\n  /**\n   * Gets the number of rows in the table, not including headers.\n   */\n  public get rows(): number {\n    return this._data.length\n  }\n\n  /**\n   * Gets the column headers.\n   */\n  public get columnHeaders(): Array<string> {\n    if (!this._columnHeaders) {\n      throw new Error('No column headers are defined for this table.')\n    }\n    return this._columnHeaders ? this._columnHeaders.slice() : []\n  }\n\n  /**\n   * Gets the row headers.\n   */\n  public get rowHeaders(): Array<string> {\n    if (!this._rowHeaders) {\n      throw new Error('No row headers are defined for this table.')\n    }\n    return this._rowHeaders ? this._rowHeaders.slice() : []\n  }\n\n  /**\n   * Returns a value at a given (row, col) position.\n   * @param column Column index\n   * @param row Row index\n   * @param spreadsheetNotation Interpret row and col as spreadsheet coordinates, eg. (\"A\",\"1\")\n   */\n  public get(column: number | string, row: number | string, spreadsheetNotation = false): T {\n    ;[column, row] = this.normalizeColRow(column, row, spreadsheetNotation)\n    return this._data[row][column]\n  }\n\n  /**\n   * Inserts a given value at a given (row, col) position.\n   * @param column Column index\n   * @param row Row index\n   * @param value The value to insert\n   * @param spreadsheetNotation Interpret row and col as spreadsheet coordinates, eg. (\"A\",\"1\")\n   */\n  public set(column: number | string, row: number | string, value: T, spreadsheetNotation = false): Table<T> {\n    ;[column, row] = this.normalizeColRow(column, row, spreadsheetNotation)\n    this._data[row][column] = value\n    return this\n  }\n\n  /**\n   * Deletes a column in the table.\n   * @param column Column index\n   * @param spreadsheetNotation Interpret row and col as spreadsheet coordinates, eg. (\"A\",\"1\")\n   */\n  public removeColumn(column: number | string, spreadsheetNotation = false): Table<T> {\n    column = this.normalizeCol(column, spreadsheetNotation)\n    arrMapMutable(this._data, (row) => {\n      row.splice(column, 1)\n      return row\n    })\n    if (this._columnHeaders) {\n      this._columnHeaders.splice(column + (this._rowHeaders ? 1 : 0), 1)\n    }\n    return this\n  }\n\n  /**\n   * Deletes a row in the table.\n   * @param row Row index\n   * @param spreadsheetNotation Interpret row and col as spreadsheet coordinates, eg. (\"A\",\"1\")\n   */\n  public removeRow(row: number | string, spreadsheetNotation = false): Table<T> {\n    row = this.normalizeRow(row, spreadsheetNotation)\n    this._data.splice(row, 1)\n    if (this._rowHeaders) this._rowHeaders.splice(row, 1)\n    return this\n  }\n\n  /**\n   * Gets the index of a given column header.\n   * Even if row headers are defined, this is not considered a column and is ignored in this search.\n   */\n  public indexOfColumnHeader(header: string): number {\n    if (!this._columnHeaders) {\n      throw new Error('No column headers are defined for this table.')\n    }\n    return this._columnHeaders.indexOf(header) - (this._rowHeaders ? 1 : 0)\n  }\n\n  /**\n   * Gets the index of a given row header.\n   */\n  public indexOfRowHeader(header: string): number {\n    if (!this._rowHeaders) {\n      throw new Error('No row headers are defined for this table.')\n    }\n    return this._rowHeaders.indexOf(header)\n  }\n\n  /**\n   * Returns the table as a two-dimensional array, including row and column headers..\n   */\n  public toArray(): Array<Array<T | string>> {\n    const result: Array<Array<T | string>> = []\n    if (this._columnHeaders) {\n      result.push(this.columnHeaders)\n    }\n    for (let i = 0; i < this.rows; i++) {\n      const row: Array<T | string> = this._data[i].slice()\n      if (this._rowHeaders) row.unshift(this._rowHeaders[i])\n      result.push(row)\n    }\n    return result\n  }\n\n  /**\n   * Returns the table as a two-dimensional array, without row and column headers.\n   */\n  public toArrayDataOnly(): Array<Array<T>> {\n    const result: Array<Array<T>> = []\n    for (let i = 0; i < this.rows; i++) {\n      result.push(this._data[i].slice())\n    }\n    return result\n  }\n\n  /**\n   * Returns the table as a CSV string.\n   * @param delimiter csv delimiter\n   */\n  public toCSV(delimiter = ';'): string {\n    return arr2dToCSV(this.toArray(), delimiter)\n  }\n\n  /**\n   * Override of the native toJSON method. When parsing the returned json string, it can be revived as a Table object when using the static Table.fromJSON method.\n   */\n  public toJSON(): TableSerializedForm<T> {\n    return {\n      columnHeaders: this._columnHeaders || [],\n      rowHeaders: this._rowHeaders || [],\n      data: this._data,\n    }\n  }\n\n  protected validateOptions(options: ITableOptions<T>): void {\n    this.assertNoAmbiguousOptions(options, [\n      ['extractColumnHeaders', 'columnHeaders'],\n      ['extractRowHeaders', 'rowHeaders'],\n      ['columns', 'data'],\n      ['rows', 'data'],\n      ['columns', 'columnHeaders'],\n      ['rows', 'rowHeaders'],\n    ])\n    this.assertNoOptionsRequireMissingOptions(options, [\n      ['extractColumnHeaders', 'data'],\n      ['extractRowHeaders', 'data'],\n    ])\n  }\n\n  protected handleOptions(options: ITableOptions<T>): void {\n    options = Object.assign({}, options)\n\n    if (options.extractColumnHeaders && options.data) {\n      options.data = options.data.slice()\n      options.columnHeaders = options.data.splice(0, 1)[0].map((h) => h + '')\n    }\n\n    if (options.extractRowHeaders && options.data) {\n      options.data = options.data.map((row) => row.slice())\n      options.rowHeaders = []\n      for (let i = 0; i < options.data.length; i++) {\n        options.rowHeaders.push(options.data[i].splice(0, 1)[0] + '')\n      }\n    }\n\n    if (options.rowHeaders) {\n      this._rowHeaders = options.rowHeaders.slice()\n      options.rows = options.rowHeaders.length\n    } else if (options.rows === undefined) {\n      options.rows = 1\n    } else {\n      this.validateRowMin(options.rows)\n    }\n\n    if (options.columnHeaders) {\n      this._columnHeaders = options.columnHeaders.slice()\n      options.columns = options.columnHeaders.length - (options.rowHeaders ? 1 : 0)\n    } else if (options.columns === undefined) {\n      options.columns = 1\n    } else {\n      this.validateColMin(options.columns)\n    }\n\n    if (options.data) {\n      for (let i = 0; i < options.data.length; i++) {\n        this._data.push(options.data[i].slice())\n      }\n    } else {\n      this.buildEmptyTableWithDimensions(options.rows, options.columns)\n    }\n  }\n\n  protected validateData(): void {\n    if (this._columnHeaders) {\n      const targetLength = this._columnHeaders.length - (this._rowHeaders ? 1 : 0)\n      if (\n        !arrEvery(\n          this._data.map((row) => row.length),\n          (rowLength) => rowLength === targetLength,\n        )\n      ) {\n        throw new Error('Expected all rows to be of same length.')\n      }\n    }\n    if (this._rowHeaders && this._rowHeaders.length !== this._data.length) {\n      throw new Error('Expected a row header for each row.')\n    }\n  }\n\n  protected buildEmptyTableWithDimensions(rows: number, cols: number): void {\n    for (let i = 0; i < rows; i++) {\n      this._data.push(new Array(cols))\n    }\n  }\n\n  protected validateRowMin(rows: number): void {\n    if (rows < 1) {\n      throw new Error('Expected rows to be integer larger than 0 but got: ' + rows)\n    }\n    if (!Number.isInteger(rows)) {\n      throw new Error('Expected rows to be integer an integer.')\n    }\n  }\n\n  protected validateColMin(cols: number): void {\n    if (cols < 1) {\n      throw new Error('Expected columns to be integer larger than 0 but got: ' + cols)\n    }\n    if (!Number.isInteger(cols)) {\n      throw new Error('Expected columns to be integer an integer.')\n    }\n  }\n\n  protected ensureValidRowIndex(row: number | string): number {\n    if (typeof row === 'string') {\n      if (!this._rowHeaders) {\n        throw new Error('Cannot pass row as string when no rowHeaders are defined.')\n      }\n      row = this._rowHeaders.indexOf(row)\n      if (row === -1) {\n        throw new Error('Row not found in rowHeaders.')\n      }\n    } else this.validateRowMin(row + 1)\n    return row\n  }\n\n  protected ensureValidColIndex(col: number | string): number {\n    if (typeof col === 'string') {\n      if (!this._columnHeaders) {\n        throw new Error('Cannot pass col as string when no columnHeaders are defined.')\n      }\n      col = this._columnHeaders.indexOf(col) - (this._rowHeaders ? 1 : 0)\n      if (col < 0) {\n        throw new Error('Col not found in columnHeaders.')\n      }\n    } else this.validateColMin(col + 1)\n    return col\n  }\n\n  protected normalizeCol(col: number | string, spreadsheetNotation: boolean): number {\n    if (spreadsheetNotation) {\n      col = letterToCol(String(col), true)\n    }\n    return this.ensureValidColIndex(col)\n  }\n\n  protected normalizeRow(row: number | string, spreadsheetNotation: boolean): number {\n    if (spreadsheetNotation) {\n      row = Number(row)\n    }\n    return this.ensureValidRowIndex(row)\n  }\n\n  protected normalizeColRow(col: number | string, row: number | string, spreadsheetNotation: boolean): number[] {\n    if (spreadsheetNotation) {\n      ;[col, row] = A1ToColRow(String(col) + String(row), true)\n    }\n    return [this.ensureValidColIndex(col), this.ensureValidRowIndex(row)]\n  }\n}\n","/**\n * Check if a given month number is valid.\n */\nexport function isValidDateMonth(month: number): boolean {\n  return Number.isInteger(month) && month >= 1 && month <= 12\n}\n","import { isValidDateMonth } from './isValidDateMonth'\n\n/**\n * Throws error if the given month is invalid.\n */\nexport function assertValidDateMonth(month: number): void {\n  if (!isValidDateMonth(month)) throw new Error(`Invalid month: ${month}.`)\n}\n","import { assertValidDateMonth } from './assertValidDateMonth'\nimport { isLeapYear } from '../../date'\n\nconst DAYS_IN_MONTH = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n/**\n * Get number of days that there are in a given month of a given year.\n * Note: The number of days in february depends on whether it is leap year. If no year is given, it is assumed that it is not leap year.\n */\nexport function numDaysInMonth(month: number, year?: number): number {\n  assertValidDateMonth(month)\n  return month === 2 && year !== undefined && isLeapYear(year) ? 29 : DAYS_IN_MONTH[month]\n}\n","import { numDaysInMonth } from './numDaysInMonth'\n\n/**\n * Returns whether a day of month is a valid date for the given month and year.\n */\nexport function isValidDateDay(day: number, month: number, year?: number): boolean {\n  if (!Number.isInteger(day)) return false\n  if (day < 1) return false\n  if (day > numDaysInMonth(month, year)) return false\n  return true\n}\n","/**\n * Checks if the given year is a valid year > 0.\n */\nexport function isValidDateYear(year: number): boolean {\n  return Number.isInteger(year) && year >= 0\n}\n","import { isValidDateYear } from './isValidDateYear'\n\n/**\n * Throws if the given year is invalid.\n */\nexport function assertValidDateYear(year: number): void {\n  if (!isValidDateYear(year)) throw new Error(`Invalid year: ${year}.`)\n}\n","import date from 'date-and-time'\n\nexport function isValidDate(\n  year?: number | string,\n  month?: number | string,\n  day?: number | string,\n  hour?: number | string,\n  minute?: number | string,\n  second?: number | string,\n  millisecond?: number | string,\n): boolean {\n  let str = ''\n  let format = ''\n  if (year !== undefined) {\n    format += 'YYYY'\n    str += `${year.toString().padStart(4, '0')}`\n  }\n  if (month !== undefined) {\n    format += '-MM'\n    str += `-${month.toString().padStart(2, '0')}`\n  }\n  if (day !== undefined) {\n    format += '-DD'\n    str += `-${day.toString().padStart(2, '0')}`\n  }\n  if (hour !== undefined) {\n    format += ' HH'\n    str += ` ${hour.toString().padStart(2, '0')}`\n  }\n  if (minute !== undefined) {\n    format += ':mm'\n    str += `:${minute.toString().padStart(2, '0')}`\n  }\n  if (second !== undefined) {\n    format += ':ss'\n    str += `:${second.toString().padStart(2, '0')}`\n  }\n  if (millisecond !== undefined) {\n    format += ':SSS'\n    str += `:${millisecond.toString().padStart(3, '0')}`\n  }\n  return date.isValid(str, format)\n}\n","import { assertValidDateYear } from './assertValidDateYear'\n\n/**\n * Get century from year.\n * @example\n * ```js\n * getCentury(2009);\n * //=> 21\n * ```\n */\nexport function getCentury(year: number): number {\n  assertValidDateYear(year)\n  return Math.floor(year / 100) + 1\n}\n","/**\n * Returns the current year (UTC full year).\n */\nexport function getCurrentYear(): number {\n  return new Date().getUTCFullYear()\n}\n","import { assertValidDateYear } from './assertValidDateYear'\n\n/**\n * Check whether a given year is a leap year.\n */\nexport function isLeapYear(year: number): boolean {\n  assertValidDateYear(year)\n  return (0 == year % 4 && 0 != year % 100) || 0 == year % 400\n}\n","class Sudoku {\n  public sudoku: Array<Array<number | undefined>>\n  protected candidates: Array<Array<Set<number>>>\n  protected isGuess: boolean\n\n  constructor(sudoku: Array<Array<number | undefined>>, candidates?: Array<Array<Set<number>>>, isGuess = false) {\n    if (!isGuess) {\n      if (sudoku.length !== 9) throw Error('Expected sudoku to be a 9x9 array of integers between 1 and 9.')\n      for (const row of sudoku) {\n        if (row.length !== 9) throw Error('Expected sudoku to be a 9x9 array of integers between 1 and 9.')\n        for (const cell of row) {\n          if (cell !== undefined && (!Number.isInteger(cell) || cell < 1 || cell > 9)) {\n            throw Error('Expected sudoku to be a 9x9 array of integers between 1 and 9.')\n          }\n        }\n      }\n    }\n    this.sudoku = []\n    for (let i = 0; i <= 8; i++) {\n      this.sudoku[i] = sudoku[i].slice()\n    }\n    if (candidates) {\n      this.candidates = candidates.map((row) => row.map((set) => new Set(set)))\n    } else {\n      this.candidates = []\n      for (let r = 0; r <= 8; r++) {\n        this.candidates[r] = []\n        for (let c = 0; c <= 8; c++) {\n          if (this.sudoku[r][c] === undefined) {\n            this.candidates[r][c] = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9])\n          } else {\n            this.candidates[r][c] = new Set([])\n          }\n        }\n      }\n    }\n    this.isGuess = isGuess\n  }\n\n  protected *itRow(r: number): Generator<number | undefined> {\n    for (let c = 0; c <= 8; c++) {\n      yield this.sudoku[r][c]\n    }\n  }\n\n  protected *itRows(): Generator<Generator<number | undefined>> {\n    for (let r = 0; r <= 8; r++) {\n      yield this.itRow(r)\n    }\n  }\n\n  protected *itCol(c: number): Generator<number | undefined> {\n    for (let r = 0; r <= 8; r++) {\n      yield this.sudoku[r][c]\n    }\n  }\n\n  protected *itCols(): Generator<Generator<number | undefined>> {\n    for (let c = 0; c <= 8; c++) {\n      yield this.itCol(c)\n    }\n  }\n\n  protected *itNonant(r: number, c: number): Generator<number | undefined> {\n    const row = r < 3 ? 0 : r < 6 ? 3 : 6\n    const col = c < 3 ? 0 : c < 6 ? 3 : 6\n    for (let r = row; r < row + 3; r++) {\n      for (let c = col; c < col + 3; c++) {\n        yield this.sudoku[r][c]\n      }\n    }\n  }\n\n  protected *itNonants(): Generator<Generator<number | undefined>> {\n    yield this.itNonant(0, 0)\n    yield this.itNonant(0, 3)\n    yield this.itNonant(0, 6)\n    yield this.itNonant(3, 0)\n    yield this.itNonant(3, 3)\n    yield this.itNonant(3, 6)\n    yield this.itNonant(6, 0)\n    yield this.itNonant(6, 3)\n    yield this.itNonant(6, 6)\n  }\n\n  protected *itAllSeries(): Generator<Generator<number | undefined>> {\n    yield* this.itRows()\n    yield* this.itCols()\n    yield* this.itNonants()\n  }\n\n  protected isCompleteSeries(itSeries: Generator<number | undefined>): boolean {\n    const seen = new Set()\n    for (const v of itSeries) {\n      if (v === undefined) return false\n      if (!seen.has(v)) {\n        seen.add(v)\n      } else {\n        return false\n      }\n    }\n    return true\n  }\n\n  protected isCompleteSudoku(): boolean {\n    for (const itSeries of this.itAllSeries()) {\n      if (!this.isCompleteSeries(itSeries)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  protected solveAt(row: number, col: number): boolean {\n    if (this.sudoku[row][col] !== undefined) return false\n    const candidates = this.candidates[row][col]\n    for (let i = 0; i <= 8; i++) {\n      const v1 = this.sudoku[row][i]\n      if (v1 !== undefined) {\n        candidates.delete(v1)\n      }\n      const v2 = this.sudoku[i][col]\n      if (v2 !== undefined) {\n        candidates.delete(v2)\n      }\n    }\n    for (const v of this.itNonant(row, col)) {\n      if (v !== undefined) {\n        candidates.delete(v)\n      }\n    }\n    if (candidates.size === 1) {\n      this.sudoku[row][col] = candidates.values().next().value\n      const v = this.sudoku[row][col]\n      if (v !== undefined) {\n        candidates.delete(v)\n      }\n      return true\n    }\n    return false\n  }\n\n  public solve(): boolean {\n    let foundAnswer = false\n    const tryAll = () => {\n      for (let r = 0; r <= 8; r++) {\n        for (let c = 0; c <= 8; c++) {\n          if (this.solveAt(r, c)) {\n            foundAnswer = true\n          }\n        }\n      }\n    }\n    tryAll()\n    tryAll()\n    if (foundAnswer) {\n      return this.solve()\n    } else if (!this.isCompleteSudoku()) {\n      for (let maxCandidates = 2; maxCandidates <= 9; maxCandidates++) {\n        for (let r = 0; r <= 8; r++) {\n          for (let c = 0; c <= 8; c++) {\n            if (this.candidates[r][c].size === maxCandidates) {\n              const guess = this.candidates[r][c].values().next().value\n              this.candidates[r][c].delete(guess)\n              const newSudoku = new Sudoku(this.sudoku, this.candidates, true)\n              newSudoku.sudoku[r][c] = guess\n              newSudoku.candidates[r][c] = new Set()\n              const successful = newSudoku.solve()\n              if (successful) {\n                this.sudoku = newSudoku.sudoku\n                this.candidates = newSudoku.candidates\n              }\n              return this.solve()\n            }\n          }\n        }\n      }\n      if (!this.isGuess) {\n        this.print()\n        throw Error('Sudoku is invalid and cannot be solved.')\n      }\n      return false\n    } else {\n      return true\n    }\n  }\n\n  public print(): void {\n    console.log('-------------------')\n    for (let r = 0; r <= 8; r++) {\n      console.log('|' + this.sudoku[r].map((v) => (v === undefined ? ' ' : v)).join('|') + '|')\n    }\n    console.log('-------------------')\n  }\n}\n\nexport function solveSudoku(sudoku: Array<Array<number | undefined>>): Sudoku {\n  const instance = new Sudoku(sudoku)\n  instance.solve()\n  return instance\n}\n","function singlePass(sentences: Array<string>, lowerBound?: number, upperBound?: number): Array<string> {\n  // determine lower and upper bounds if not given\n  if (lowerBound === undefined || upperBound === undefined) {\n    let average = 0\n    let max = 0\n    for (const s of sentences) {\n      const l = s.length\n      average += l\n      if (l > max) max = l\n    }\n    average = Math.floor(average / sentences.length)\n    if (lowerBound === undefined) lowerBound = average - Math.floor(average / 2)\n    if (upperBound === undefined) upperBound = max - Math.floor(average / 2)\n  }\n  // merge sentences\n  for (let i = 1; i < sentences.length; i++) {\n    const cur = sentences[i]\n    const pre = sentences[i - 1]\n    if (cur.length + pre.length < upperBound && (cur.length < lowerBound || pre.length < lowerBound)) {\n      sentences[i] = `${pre} ${cur}`\n      sentences[i - 1] = ''\n    }\n  }\n  return sentences.filter((s) => !!s)\n}\n\n/**\n * Normalize line lengths. Tries to merge sentences with its neighboring sentences onto the same line if they are short.\n * @param sentences Array of sentences\n * @param lowerBound Will try to merge sentences if the length of the current sentence is less than this value. If no user input is given, this value is automatically determined by calculating statistics on the data.\n * @param upperBound Will not merge sentences if the conbined length of the sentences is greater than this value. If no user input is given, this value is automatically determined by calculating statistics on the data.\n */\nexport function normalizeLineLengths(\n  sentences: Array<string>,\n  lowerBound?: number,\n  upperBound?: number,\n): Array<string> {\n  let newSentences = singlePass(sentences, lowerBound, upperBound)\n  while (newSentences.length !== sentences.length) {\n    sentences = newSentences\n    newSentences = singlePass(sentences, lowerBound, upperBound)\n  }\n  return newSentences\n}\n","import { strCountCharOccurances } from '../../string'\n\n/**\n * Normalize a file extension to the form: .[ext]\n * Anything before the last \".\" is not returned.\n * @param ext file extension\n */\nexport function normalizeFileExtension(ext: string): string {\n  if (ext === '' || ext === '.') return ''\n  if (/[<>\"|?*:]/g.test(ext)) {\n    throw new Error(`Illegal characters in file extension: ${ext}  |  Illegal characters are: <>\"|?:*`)\n  }\n  if (strCountCharOccurances(ext, '.') === 0) return '.' + ext\n  return ext.substring(ext.lastIndexOf('.'))\n}\n","/**\n * Returns true if a given interger is even.\n */\nexport function isEven(n: number): boolean {\n  if (!Number.isInteger(n)) throw new Error(`Expected integer. Got ${n}`)\n  return n % 2 === 0\n}\n","const POW10 = [1, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9]\n\n/**\n * Approximate the logarithm base 10 of a small integer.\n */\nexport function numApproximateLog10(n: number): number {\n  if (!Number.isInteger(n) || n < 0 || n >= 1e10) {\n    throw new Error(`Expected positive integer smaller than 10^10. Got ${n}`)\n  }\n  if (n < POW10[5]) {\n    if (n < POW10[2]) {\n      return n < POW10[1] ? 0 : 1\n    }\n    if (n < POW10[4]) {\n      return n < POW10[3] ? 2 : 3\n    }\n    return 4\n  }\n  if (n < POW10[7]) {\n    return n < POW10[6] ? 5 : 6\n  }\n  if (n < POW10[9]) {\n    return n < POW10[8] ? 7 : 8\n  }\n  return 9\n}\n","import numberFormat from 'format-number'\n\nconst eu = new Map()\n\n/**\n * Formats a number input to a string representation in the style of 5.000.000,00\n * @param input number to format\n * @param decimalPlaces number of decimal places to return. Will pad string with zeroes to ensure this length.\n */\nexport function numFormatEU(input: number, decimalPlaces = 0): string {\n  let formatter = eu.get(decimalPlaces)\n  if (!formatter) {\n    formatter = numberFormat({\n      truncate: decimalPlaces,\n      padRight: decimalPlaces,\n      integerSeparator: '.',\n      decimal: ',',\n    })\n    eu.set(decimalPlaces, formatter)\n  }\n  return formatter(input)\n}\n","import numberFormat from 'format-number'\n\nconst us = new Map()\n/**\n * Formats a number input to a string representation in the style of 5,000,000.00\n * @param input number to format\n * @param decimalPlaces number of decimal places to return. Will pad string with zeroes to ensure this length.\n */\nexport function numFormatUS(input: number, decimalPlaces = 0): string {\n  let formatter = us.get(decimalPlaces)\n  if (!formatter) {\n    formatter = numberFormat({\n      truncate: decimalPlaces,\n      padRight: decimalPlaces,\n      integerSeparator: ',',\n      decimal: '.',\n    })\n    us.set(decimalPlaces, formatter)\n  }\n  return formatter(input)\n}\n","import { MemoryUsageValues } from '../'\nimport { numFormatUS } from '../../number'\nimport { numFormatEU } from '../../number'\nimport { MemoryUsageValuesFormatted } from '../'\n\n/**\n * Returns an object about the process memory usage for: process allocation, heap allocation, heap, v8.\n */\nexport function memoryUsage(): MemoryUsageValues {\n  const toIntMB = (n: number) => Math.floor(n * 0.000001)\n  const data = process.memoryUsage()\n  return {\n    processAllocationMB: toIntMB(data.rss),\n    heapAllocationMB: toIntMB(data.heapTotal),\n    heapUsedMB: toIntMB(data.heapUsed),\n    extenalV8: toIntMB(data.external),\n  }\n}\n\nconst formatMemoryUsageOutput = (format: (n: number) => string): MemoryUsageValuesFormatted => {\n  const data = process.memoryUsage()\n  return {\n    processAllocationMB: format(data.rss),\n    heapAllocationMB: format(data.heapTotal),\n    heapUsedMB: format(data.heapUsed),\n    extenalV8: format(data.external),\n  }\n}\n\n/**\n * Returns an object about the process memory usage for: process allocation, heap allocation, heap, v8.\n * The values are formatted strings in the style of 5.000,00\n */\nexport function memoryUsageEuFormat(): MemoryUsageValuesFormatted {\n  return formatMemoryUsageOutput((bytes: number) => `${numFormatEU(bytes * 0.000001, 2)} MB`)\n}\n\n/**\n * Returns an object about the process memory usage for: process allocation, heap allocation, heap, v8.\n * The values are formatted strings in the style of 5,000.00\n */\nexport function memoryUsageUsFormat(): MemoryUsageValuesFormatted {\n  return formatMemoryUsageOutput((bytes: number) => `${numFormatUS(bytes * 0.000001, 2)} MB`)\n}\n","import { Readable } from 'stream'\n\n/**\n * Extension of Node's native Readable class for converting a string into a Readable stream.\n */\nexport class StringStream extends Readable {\n  private str: string\n  private ended: boolean\n\n  constructor(str: string) {\n    super()\n    this.str = str\n    this.ended = false\n  }\n\n  _read(): void {\n    if (!this.ended) {\n      process.nextTick(() => {\n        this.push(Buffer.from(this.str))\n        this.push(null)\n      })\n      this.ended = true\n    }\n  }\n}\n","import { isEven } from '../../number'\nimport { getCurrentYear, getCentury } from '../../date'\nimport { regexMatcherToValidater, regexLibrary } from '../../regex'\nimport { isValidDate } from '../../date'\n\n/**\n * Extract birthdate (yyyy,mm,dd), four digit id and sex from a Danish social security number.\n * Assumes birth dates are at most 100 years in the past.\n * @param ssn - Danish social security number\n */\nexport function parseSocialSecurityNumberDK(ssn: string): {\n  year: number\n  month: number\n  day: number\n  id: number\n  sex: string\n} {\n  const match = ssn.match(regexMatcherToValidater(regexLibrary.socialSecurityNumbersDK))\n  if (!match || !match.groups)\n    throw new Error(`Invalid Danish social security number format. Expected ddmmyy[-]xxxx. Got: ${ssn}`)\n  const { dd, mm, yy, id } = match.groups\n  const iDay = parseInt(dd)\n  const iMon = parseInt(mm)\n  const iCurYear = getCurrentYear()\n  const iYear =\n    parseInt(yy) > parseInt(String(iCurYear).substring(2))\n      ? parseInt(`${getCentury(iCurYear) - 2}${yy}`)\n      : parseInt(`${getCentury(iCurYear) - 1}${yy}`)\n  if (!isValidDate(iYear, iMon, iDay)) {\n    throw new Error(`Expected valid birth date.`)\n  }\n  const iId = parseInt(id)\n  const sex = isEven(parseInt(id.substring(3))) ? 'F' : 'M'\n  return {\n    year: iYear,\n    month: iMon,\n    day: iDay,\n    id: iId,\n    sex,\n  }\n}\n\n/**\n * Determine whether a string is a valid Danish social security number.\n * @param s - String to test\n */\nexport function isSocialSecurityNumberDK(s: string): boolean {\n  try {\n    parseSocialSecurityNumberDK(s)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n","/**\r\n * A Function class that can be extended.\r\n * @example\r\n * ```ts\r\n * class MyFunction<T> extends util.ExtensibleFunction {\r\n *   constructor(f: (...args: any[]) => any) {\r\n *     let self: MyFunction<T> | undefined = undefined;\r\n *     super(f.name, function anonymous(...args: any[]) {\r\n *       // do something with self\r\n *       return f.call(self, ...args);\r\n *     });\r\n *     self = this;\r\n *   }\r\n * }\r\n * ```\r\n */\r\nexport class ExtensibleFunction extends Function {\r\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\n  constructor(name: string, f: any) {\r\n    Object.defineProperty(f, 'name', { value: name })\r\n    super(f)\r\n    return Object.setPrototypeOf(f, new.target.prototype)\r\n  }\r\n}\r\n","import { sort as timsort } from 'timsort'\nimport { compareString, compareNumber, compareNumeric } from '../../sort'\n\nexport interface ISortedArrayOptions<T> {\n  data?: Iterable<T>\n  compare?: (a: any, b: any) => number\n  allowDuplicates?: boolean\n}\n\nexport class SortedArray<T> extends Array {\n  private compare: (a: any, b: any) => number = compareString\n  private compareFound = false\n  private allowDuplicates = true\n\n  constructor(options: ISortedArrayOptions<T> = {}) {\n    super()\n    Object.defineProperty(this, 'compare', { enumerable: false })\n    Object.defineProperty(this, 'compareFound', { enumerable: false })\n    Object.defineProperty(this, 'allowDuplicates', { enumerable: false })\n    if (options.compare) {\n      this.compare = options.compare\n      this.compareFound = true\n    }\n    if (options.data) {\n      for (const e of options.data) {\n        this.push(e)\n      }\n      if (!this.compareFound && this.length && typeof this[0] !== 'string') {\n        this.compare = compareNumeric\n        this.compareFound = true\n      }\n      timsort(this, this.compare)\n    }\n    if (options.allowDuplicates === false) {\n      this.allowDuplicates = false\n      this.unique()\n    }\n  }\n\n  /**\n   * Convert to a normal Array instance\n   */\n  public toArray(): Array<T> {\n    return Array.from(this)\n  }\n\n  public add(element: T): SortedArray<T> {\n    if (!this.compareFound) {\n      if (typeof element !== 'string') {\n        this.compare = compareNumeric\n        this.compareFound = true\n      }\n    }\n    if (this.length === 0) {\n      this.push(element)\n      return this\n    }\n    const [index, foundIdentical] = this.insertionIndex(element)\n    if (foundIdentical && !this.allowDuplicates) return this\n    this.splice(index, 0, element)\n    return this\n  }\n\n  /**\n   * Add elements to the sorted array.\n   * @param elements - The elements to add to the sorted array\n   */\n  public addMany(...elements: T[]): SortedArray<T> {\n    if (elements.length === 0) return this\n    for (const e of elements) {\n      this.add(e)\n    }\n    return this\n  }\n\n  /**\n   * Remove all duplicate elements in the sorted array, leaving only unique values. Equality is determined by the compare function.\n   */\n  public unique(): SortedArray<T> {\n    let len = this.length\n    if (len <= 1) return this\n    for (let prev, curr, i = 1; i < len; i++) {\n      prev = this[i - 1]\n      curr = this[i]\n      if (this.compare(prev, curr) === 0) {\n        this.splice(i, 1)\n        len--\n        i--\n      }\n    }\n    return this\n  }\n\n  /**\n   * Returns a tuple containing the index of where to add an element to keep the array sorted and also whether an identical element was found.\n   * @param element - The element for which to find its insertion index\n   */\n  public insertionIndex(element: T): [number, boolean] {\n    if (this.length === 0) return [0, false]\n    let low = 0\n    let high = this.length\n    while (low < high) {\n      const mid = (low + high) >>> 1\n      const order = this.compare(this[mid], element)\n      if (order === 0) return [mid, true]\n      if (order < 0) {\n        low = mid + 1\n      } else {\n        high = mid\n      }\n    }\n    return [low, false]\n  }\n\n  /**\n   * Returns a tuple containing the first index of where to add an element to keep the array sorted and also whether an identical element was found.\n   * @param element - The element for which to find its insertion index\n   */\n  public firstInsertionIndex(element: T): [number, boolean] {\n    const [index, foundIdentical] = this.insertionIndex(element)\n    if (!foundIdentical) return [index, foundIdentical]\n    let i = index - 1\n    while (i >= 0) {\n      if (this.compare(this[i], element) !== 0) {\n        return [i + 1, foundIdentical]\n      }\n      i--\n    }\n    return [0, foundIdentical]\n  }\n\n  /**\n   * Returns a tuple containing the last index of where to add an element to keep the array sorted and also whether an identical element was found.\n   * @param element - The element for which to find its insertion index\n   */\n  public lastInsertionIndex(element: T): [number, boolean] {\n    const [index, foundIdentical] = this.insertionIndex(element)\n    if (!foundIdentical) return [index, foundIdentical]\n    let i = index + 1\n    while (i < this.length) {\n      if (this.compare(this[i], element) !== 0) {\n        return [i, foundIdentical]\n      }\n      i++\n    }\n    return [this.length, foundIdentical]\n  }\n\n  /**\n   * Returns the index of the first element found that is determined equal by the compare function.\n   * @param element - The element to find\n   */\n  public indexOfCompare(element: T): number {\n    if (this.length === 0) return -1\n    if (this.length === 1) return this.compare(this[0], element) === 0 ? 0 : -1\n    const [index, foundIdentical] = this.insertionIndex(element)\n    return foundIdentical ? index : -1\n  }\n\n  /**\n   * Returns the index of the first element that is determined equal by the compare function.\n   * @param element - The element to find\n   */\n  public firstIndexOfCompare(element: T): number {\n    if (this.length === 0) return -1\n    if (this.length === 1) return this.compare(this[0], element) === 0 ? 0 : -1\n    const [index, foundIdentical] = this.firstInsertionIndex(element)\n    return foundIdentical ? index : -1\n  }\n\n  /**\n   * Returns the index of the last element that is determined equal by the compare function.\n   * @param element - The element to find\n   */\n  public lastIndexOfCompare(element: T): number {\n    if (this.length === 0) return -1\n    if (this.length === 1) return this.compare(this[0], element) === 0 ? 0 : -1\n    const [index, foundIdentical] = this.lastInsertionIndex(element)\n    return foundIdentical ? index - 1 : -1\n  }\n\n  /**\n   * Returns all indices at which element exists. Equality is determined by the compare function.\n   * @param element - The element to find\n   */\n  public indicesOfCompare(element: T): Array<number> {\n    const index = this.indexOfCompare(element)\n    if (index === -1) return []\n    const result: Array<number> = []\n    if (!this.allowDuplicates) return result\n    let i = index - 1\n    while (i >= 0) {\n      if (this.compare(this[i], element) === 0) {\n        result.push(i)\n      } else {\n        break\n      }\n      i--\n    }\n    result.push(index)\n    i = index + 1\n    while (i < this.length) {\n      if (this.compare(this[i], element) === 0) {\n        result.push(i)\n      } else {\n        break\n      }\n      i++\n    }\n    result.sort(compareNumber)\n    return result\n  }\n\n  /**\n   * Returns the interestion of this and another sorted array.\n   * @param sorted - another sorted array with which to find intersections\n   */\n  public intersection(sorted: Array<T>): Array<T> {\n    const result = []\n    let i1 = 0\n    let i2 = 0\n    // if a1 curr < a2 curr, loop a1 elems until a1 curr >= a2 curr\n    while (i1 < this.length && i2 < sorted.length) {\n      if (this.compare(this[i1], sorted[i2]) < 0) {\n        i1++\n      } else if (this.compare(this[i1], sorted[i2]) === 0) {\n        result.push(this[i1])\n        i1++\n        i2++\n      } else {\n        i2++\n      }\n    }\n    return result\n  }\n}\n","/**\r\n * For recording time passed since constructor was invoked and until the stop() method i called.\r\n */\r\nexport class Timer {\r\n  /**\r\n   * The initial time\r\n   */\r\n  public t0: number\r\n\r\n  constructor() {\r\n    this.t0 = Date.now()\r\n  }\r\n\r\n  /**\r\n   * Returns the time passed since constructor was invoked in milliseconds.\r\n   */\r\n  public stop(): number {\r\n    return Date.now() - this.t0\r\n  }\r\n}\r\n","import { arrAssignFrom, Predicate } from '../../array'\n\n/**\n * Same as Array.prototype.filter but performs operations in palce (not immutable).\n * @param input - input array\n * @param f - predicate\n */\nexport function arrFilterMutable<T>(input: Array<T>, f: Predicate): Array<T> {\n  return arrAssignFrom(input, input.filter(f))\n}\n","import { arrAssignFrom } from './arrAssignFrom'\nimport { arrFlatten } from './arrFlatten'\n\n/**\n * Flattens the passed array recursively. Mutable.\n * @param input - the array to flatten\n * @param maxDepth - the maximum recursive flattening depth.\n */\nexport function arrFlattenMutable<T>(input: Array<any>, maxDepth = Number.MAX_SAFE_INTEGER): Array<T> {\n  return arrAssignFrom(input, arrFlatten(input, maxDepth))\n}\n","/**\n * Returns all indexes at which an element is found.\n * @param input - The array to search\n * @param element - The element to find\n */\n\nexport function arrIndicesOf<T>(input: Array<T>, element: T): Array<number> {\n  const result: Array<number> = []\n  for (let i = 0; i < input.length; i++) {\n    if (element === input[i]) {\n      result.push(i)\n    }\n  }\n  return result\n}\n","import { arrSwap } from './arrSwap'\nimport { arrShallowEquals } from './arrShallowEquals'\n\n/**\n * Shuffle items in an array in-place. Guarantees that the array has changes.\n * @param input - The array to shuffle.\n */\nexport function arrShuffle<T>(input: Array<T>): Array<T> {\n  const original = input.slice()\n  let equal = true\n  while (equal) {\n    for (let i = 0, len = input.length; i < len; i++) {\n      const newIndex = Math.floor(Math.random() * len)\n      arrSwap(input, i, newIndex)\n    }\n    equal = arrShallowEquals(input, original)\n  }\n  return input\n}\n","import { Predicate } from '../'\n\n/**\n * Check whether a condition is true for any element of an array. The condition check is in the form of a callback.\n * @param input - The array\n * @param  predicate - A predicate callback function\n */\n\nexport function arrSome<T>(input: Array<T>, predicate: Predicate): boolean {\n  for (let i = 0, len = input.length; i < len; i++) {\n    if (predicate(input[i], i, input) === true) {\n      return true\n    }\n  }\n  return false\n}\n","import { compareNumeric } from '../../sort'\n\n/**\n * Uses Array.prototype.sort but sorts numbers.\n * @param input - input array\n */\nexport function arrSortNumeric(input: Array<number | bigint | boolean>): Array<number | bigint | boolean> {\n  return input.sort(compareNumeric)\n}\n","import { isValidDate } from './isValidDate'\n\n/**\n * Throws if the given year is invalid.\n */\nexport function assertValidDate(\n  year?: number | string,\n  month?: number | string,\n  day?: number | string,\n  hour?: number | string,\n  minute?: number | string,\n  second?: number | string,\n  millisecond?: number | string,\n): void {\n  if (!isValidDate(year, month, day, hour, minute, second, millisecond)) {\n    throw new Error(\n      `Expected valid date. Got: ${JSON.stringify({\n        year,\n        month,\n        day,\n        hour,\n        minute,\n        second,\n        millisecond,\n      })}.`,\n    )\n  }\n}\n","import { isValidDateDay } from './isValidDateDay'\n\n/**\n * Throws an error if the day of the month is invalid.\n */\nexport function assertValidDateDay(day: number, month: number, year?: number): void {\n  if (!isValidDateDay(day, month, year)) throw new Error(`Invalid day of the month: ${day}.`)\n}\n","/**\n * Executes an async task with a timeout.\n * @param timeout The timeout in milliseconds.\n * @param task The async task to execute.\n * @param args The arguments to pass to the task.\n * @returns A promise that resolves with the task's result or rejects with an error.\n */\nexport function asyncWithTimeout<T>(timeout: number, task: (...args: any[]) => Promise<T>, ...args: any[]): Promise<T> {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(`Timed out after ${timeout} ms.`))\n    }, timeout)\n    task(...args)\n      .then(\n        (value: T) => {\n          resolve(value)\n        },\n        (error: Error) => {\n          reject(error)\n        },\n      )\n      .catch((error: Error) => {\n        reject(error)\n      })\n  })\n}\n","import { strRemoveDuplicateChars } from '../../string'\nimport { regexEscapeString } from './regexEscapeString'\n\n/**\n * Builds a regex that matches a string between two strings. Supports regex instead of string.\n * @param left - string or regex to match before\n * @param right - string or regex to match after\n * @param flags - regex flags - 'g' and 's' are always added to whatever flags are passed.\n */\nexport function buildRegexBetween(left: string | RegExp, right: string | RegExp, flags?: string): RegExp {\n  left = typeof left === 'string' ? regexEscapeString(left) : left.source\n  right = typeof right === 'string' ? regexEscapeString(right) : right.source\n  flags = flags ? strRemoveDuplicateChars('gs' + flags) : 'gs'\n  return new RegExp(`(?<left>${left})(?<mid>.*?)(?=${right})(?<right>${right})`, flags)\n}\n\n// const code = `\n// import { regexEscapeString } from '../../regex'\n\n// /**\n//  * Inserts provided strings before and after a string.\n//  * @param input - input string\n//  * @param before - string to place before\n//  * @param after - string to place after\n//  * @example\n//  */\n// export function strUnwrap(input: string, before: string, after: string, caseSensitive = true): string {\n//   const flags = caseSensitive ? '' : 'i'\n//   return input\n//     .replace(new RegExp('^' + regexEscapeString(before), flags), '')\n//     .replace(new RegExp(regexEscapeString(after) + '$', flags), '')\n// }\n// /**\n//  * asdasdsad\n//  * @param input - input string\n//  * @param before - string to place before\n//  * @param after - string to place after\n//  * @example\n//  */\n// `\n\n// import { rexec } from './rexec'\n// const left = '/**'\n// const right = ' */'\n// const regex = buildRegexBetween(left, right)\n// for (const match of rexec(regex, code)) {\n//   console.log(match)\n// }\n","/**\n * Converts a byte-array to an integer.\n * Throws Error if the input is an invalid byte-array or corresponds to an integer value larger than 256^5.\n */\nexport function bytesToInt(bytes: Array<number>): number {\n  return bytes.length === 1 && bytes[0] < 251\n    ? bytes[0]\n    : bytes.length === 2 && bytes[0] === 251\n    ? 251 + bytes[1]\n    : bytes.length === 3 && bytes[0] === 252\n    ? 251 + 256 * bytes[1] + bytes[2]\n    : bytes.length === 4 && bytes[0] === 253\n    ? 251 + 65536 * bytes[1] + 256 * bytes[2] + bytes[3]\n    : bytes.length === 5 && bytes[0] === 254\n    ? 251 + 16777216 * bytes[1] + 65536 * bytes[2] + 256 * bytes[3] + bytes[4]\n    : bytes.length > 5 && bytes[0] === 255\n    ? (() => {\n        let m = 0\n        let x = 1\n        const pivot = Math.max(2, bytes.length - 6)\n        for (let i = bytes.length - 1; i >= pivot; i--) {\n          m += x * bytes[i]\n          x *= 256\n        }\n        const n =\n          bytes[1] + 32 < 251\n            ? bytesToInt([bytes[1] + 32]) - 11\n            : bytes[0] === 255 && bytes[1] < 251\n            ? bytes[1] + 21\n            : pivot === 3\n            ? bytesToInt([bytes[1], bytes[2] + 21])\n            : pivot === 4\n            ? bytesToInt([bytes[1], bytes[2], bytes[3] + 21])\n            : 0\n        const int = 251 + m / Math.pow(2, 32 - n)\n        if (!Number.isInteger(int)) throw new Error(`Invalid bytes. Got [${bytes.join(', ')}] = ${int}`)\n        if (int > 1099511627776)\n          throw new Error(\n            `Bytes must correspond to an integer less than or equal to 256^5. Got [${bytes.join(', ')}] = ${int}`,\n          )\n        return int\n      })()\n    : (() => {\n        throw new Error(`Invalid first byte. Got length: ${bytes.length}, and bytes: [${bytes.join(', ')}]`)\n      })()\n}\n","import { colToLetter } from './colToLetter'\n\n/**\n * Convert spreadsheet [column, row] to A1-notation.\n * @param CR - [column, row]\n * @param zeroIndexed - Whether or not column number start at one or zero.\n */\nexport function colRowToA1(CR: Array<number>, zeroIndexed = false): string {\n  if (CR.length !== 2) throw new Error(`Expected CR to to be length 2. Got: ${CR.length}`)\n  if (!Number.isInteger(CR[1])) throw new Error(`Expected row to be an integer. Got: ${CR[1]}`)\n  if (CR[1] < 1) throw new Error(`Expected row to be greater than zero. Got: ${CR[1]}`)\n  return colToLetter(CR[0], zeroIndexed) + CR[1].toString()\n}\n","/**\n * Returns a given comparator as an array compatible comparator. Behaves as if the array to sort was recursively flattened.\n * @param comparator compare function\n * @param descending whether the input comparator sorts in descending order\n */\nexport function compareArray(comparator: (a: any, b: any) => number, descending = false): (a: any, b: any) => number {\n  const orderMultiplier = descending ? -1 : 1\n  function recursiveCompare(a: any, b: any, _lenCompareParent?: number): number {\n    const aIsArr = Array.isArray(a)\n    const bIsArr = Array.isArray(b)\n    if (aIsArr) {\n      if (bIsArr) {\n        const aLen = a.length\n        const bLen = b.length\n        let lenShortest, lenCompare\n        if (aLen > bLen) {\n          lenShortest = aLen\n          lenCompare = 1 * orderMultiplier\n        } else if (aLen < bLen) {\n          lenShortest = bLen\n          lenCompare = -1 * orderMultiplier\n        } else {\n          lenShortest = aLen\n          lenCompare = 0\n        }\n        for (let i = 0, len = lenShortest; i < len; i++) {\n          const res = recursiveCompare(a[i], b[i], lenCompare)\n          if (res !== 0) {\n            return res\n          }\n        }\n      } else {\n        return 1 * orderMultiplier\n      }\n    } else {\n      if (bIsArr) {\n        return -1 * orderMultiplier\n      } else {\n        const res = comparator(a, b)\n        if (res === 0) {\n          return _lenCompareParent || res\n        } else {\n          return res\n        }\n      }\n    }\n    return 0\n  }\n  return (a: any, b: any): number => {\n    return recursiveCompare(a, b)\n  }\n}\n","/**\n * Number comparator function (descending)\n * @param a first value to compare\n * @param b second value to compare\n */\nexport function compareNumberDescending(a: number, b: number): number {\n  return b - a\n}\n","/**\n * number, bigint, boolean comparator function (descending)\n * @param a first value to compare\n * @param b second value to compare\n */\nexport function compareNumericDescending(a: number | bigint | boolean, b: number | bigint | boolean): number {\n  if (a > b) return -1\n  if (a < b) return 1\n  return 0\n}\n","/**\n * Alpha numeric comparator function (descending)\n * @param a first value to compare\n * @param b second value to compare\n */\nexport function compareStringDescending(a: string, b: string): number {\n  return b.localeCompare(a)\n}\n","import Path from 'path'\nimport { normalizeFileExtension } from './normalizeFileExtension'\n\n/**\n * Takes a list of file extensions and returns a filter function that returns true if a filepath/filename passed to it contains one of the given file extensions.\n * @param fileExtensions file extensions\n */\nexport function createFileExtensionFilter(...fileExtensions: Array<string>): (filepath: string) => boolean {\n  if (!fileExtensions.length) return () => true\n  return (filepath: string) => {\n    for (const ext of fileExtensions.map(normalizeFileExtension)) {\n      if (Path.extname(filepath) === ext) {\n        return true\n      }\n    }\n    return false\n  }\n}\n","import { strCountCharOccurances } from '../../string'\n\nexport type ensureValidWindowsPathOptions = {\n  extendedMaxLength?: boolean\n  assert?: boolean\n}\n\n/**\n * Check whether a provided windows filesystem path string is valid according to:\n * https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx\n * @param path The path to validate\n * @param extendedMaxLength On most versions of windows, the max allowed length of paths has been\n * raised.\n */\nexport function ensureValidWindowsPath(path: string, options?: ensureValidWindowsPathOptions): boolean {\n  const throwOrFalse = (msg: string) => {\n    if (options && options.assert === true) {\n      throw new Error(`Invalid windows path. ${msg}  |  input received: ${path}`)\n    }\n    return false\n  }\n\n  if (path.length === 0) {\n    return throwOrFalse('Path string is length 0.')\n  }\n\n  if (strCountCharOccurances(path, '/') > 0 && strCountCharOccurances(path, '\\\\') > 0) {\n    return throwOrFalse('Path contains both backslash and forward slash.')\n  }\n\n  const maxLength = (options && options.extendedMaxLength ? 32767 : 260) - 12\n  if (path.length > maxLength) {\n    return throwOrFalse(`Maximum length of ${maxLength} exceeded`)\n  }\n\n  let noDriveLetter = path\n  if (/^\\w:(\\\\|\\/)/g.test(path)) {\n    noDriveLetter = path.substring(2)\n  }\n  if (/[<>\"|?*:]/g.test(noDriveLetter)) {\n    return throwOrFalse(`Illegal characters in: ${path}  |  Illegal characters are: <>\"|?:*`)\n  }\n\n  if (/(\\\\|\\/)(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])((\\\\|\\/)|$)/g.test(path)) {\n    return throwOrFalse('Illegal name in path string')\n  }\n\n  return true\n}\n","/**\n * Converts the table element's data content to a 2-dimensional array.\n * @param {HTMLElement} element - The table element\n * @param {boolean} headers - Whether to extract table column header data from <th> elements.\n * @returns {Array<Array<string>>} Data table which is an arrays of row-arrays of cell content (string).\n */\nexport function htmlTableTo2dArray(element: HTMLTableElement, headers = true): Array<Array<string>> {\n  const result = []\n  const htmlRows = element.querySelectorAll('tr')\n  for (let i = 0; i < htmlRows.length; i++) {\n    const htmlRow = htmlRows[i]\n    const row = []\n    const htmlCells = htmlRow.querySelectorAll(headers ? 'th,td' : 'td')\n    for (let j = 0; j < htmlCells.length; j++) {\n      const htmlCell = htmlCells[j] as HTMLElement\n      row.push(htmlCell.innerText.trim())\n    }\n    if (!headers) {\n      if (htmlRow.querySelectorAll('th').length) {\n        continue\n      }\n    }\n    if (row.length) {\n      result.push(row)\n    }\n  }\n  return result\n}\n","/**\n * Converts a positive integer to a byte array.\n * Throws Error if the input is larger than 256^5 or not a positive integer.\n */\nexport function intToBytes(int: number): Array<number> {\n  if (!Number.isInteger(int) || int < 0) throw new Error(`input must be a positive integer. Got ${int}`)\n  if (int > 1099511627776) throw new Error(`input must be less than or equal to 256^5. Got ${int}`)\n  const x = int - 251\n  return int < 251\n    ? [int]\n    : x < 256\n    ? [251, x]\n    : x < 65536\n    ? [252, Math.floor(x / 256), x % 256]\n    : x < 16777216\n    ? [253, Math.floor(x / 65536), Math.floor(x / 256) % 256, x % 256]\n    : x < 4294967296\n    ? [254, Math.floor(x / 16777216), Math.floor(x / 65536) % 256, Math.floor(x / 256) % 256, x % 256]\n    : (() => {\n        const exp = Math.floor(Math.log(x) / Math.log(2)) - 32\n        const bytes = [255, ...intToBytes(exp)]\n        const y = Math.floor(x / Math.pow(2, exp - 11))\n        for (let i = 5, d = 1099511627776; i >= 0; i--, d /= 256) {\n          bytes.push(Math.floor(y / d) % 256)\n        }\n        return bytes\n      })()\n}\n","/**\n * Determine whether a string is a hexadecimal string.\n */\nexport function isHex(s: string): boolean {\n  return /[\\da-f]+$/i.test(s)\n}\n","/**\n * Determine whether a string is either a hexadecimal or a '\\u' or '0x' prepended unicode hex string.\n */\nexport function isHexOrUnicode(s: string): boolean {\n  return /^(\\\\\\\\?u|0x)?[\\da-f]+$/i.test(s)\n}\n","// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function isIterable(o: any): boolean {\n  return (\n    typeof Symbol !== 'undefined' &&\n    Symbol &&\n    'iterator' in Symbol &&\n    o != null &&\n    typeof o[Symbol.iterator] === 'function'\n  )\n}\n","/**\n * Returns true if a given interger is odd.\n */\nexport function isOdd(n: number): boolean {\n  if (!Number.isInteger(n)) throw new Error(`Expected integer. Got ${n}`)\n  return n % 2 !== 0\n}\n","/**\n * Returns a value from a map, while setting a given default value before returning it, if the key is not present.\n * @param map - map to get value from\n * @param key - key to get value for\n * @param defaultValue - default value to set if key is not present\n */\nexport function mapGetOrDefault<K, V>(map: Map<K, V>, key: K, defaultValue: V): V {\n  const value = map.get(key)\n  if (value !== undefined) return value\n  map.set(key, defaultValue)\n  return defaultValue\n}\n","/**\n * Updates a value in a map, if the key is present.\n * @param map - map to get value from\n * @param key - key to get value for\n * @param fun - function to update value with\n */\nexport function mapUpdate<K, V>(map: Map<K, V>, key: K, fun: (value?: V) => V): Map<K, V> {\n  const value = map.get(key)\n  if (value === undefined) return map\n  map.set(key, fun(value))\n  return map\n}\n","/**\n * For a given map, set a default value if the key is not present, then updates the value now definitely at key.\n * @param map - map to get value from\n * @param key - key to get value for\n * @param defaultValue - default value to set if key is not present\n * @param fun - function to update value with\n * @example\n * ```js\n * const m = new Map([\n *   ['a', 1],\n *   ['b', 2],\n *   ['c', 2],\n * ])\n * for (const key of [...m.keys(), 'd', 'e']) {\n *   mapUpdateDefault(m, key, 0, (v) => v + 1)\n * }\n * console.log(m)\n * //=> Map(5) { 'a' => 2, 'b' => 3, 'c' => 3, 'd' => 1, 'e' => 1 }\n * ```\n */\nexport function mapUpdateDefault<K, V>(map: Map<K, V>, key: K, defaultValue: V, fun: (value: V) => V): Map<K, V> {\n  const value = map.get(key)\n  map.set(key, fun(value === undefined ? defaultValue : value))\n  return map\n}\n","import Path from 'path'\n\n/**\n * Takes a directory path as a list of directory/folder names from the current working directory and returns it as a full path string.\n * @param dirs directory names from the current working directory.\n */\nexport function pathFromCwd(...dirs: Array<string>): string {\n  return Path.join(process.cwd(), ...dirs)\n}\n","/**\n * Returns a random integer between min (inclusive) and max (inclusive).\n * @param min The lower bound integer.\n * @param max The upper bound integer.\n */\nexport function randomIntBetween(min: number, max: number): number {\n  if (!Number.isInteger(min)) throw new Error(`min must be an integer. Got ${min}`)\n  if (!Number.isInteger(max)) throw new Error(`max must be an integer. Got ${max}`)\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n","import fs from 'fs'\n\n/**\n * Takes a filepath and returns its utf8 contents as a single string.\n * @param path path to the file\n */\nexport function readFileStringSync(path: string): string {\n  return fs.readFileSync(path, 'utf8').toString()\n}\n","import { rexec, matchBetweenFunction, matchBetweenYield, regexEscapeString, RexecYield } from '../'\nimport { strRemoveDuplicateChars } from '../../string'\n\n/**\n * Returns a function that matches a string between two given strings or regexes.\n * @param left - string or regex to match before\n * @param right - string or regex to match after\n * @param flags - regex flags - 'g' and 's' are always added to whatever flags are passed.\n */\nexport function regexMatchBetween(left: string | RegExp, right: string | RegExp, flags?: string): matchBetweenFunction {\n  left = typeof left === 'string' ? regexEscapeString(left) : left.source\n  right = typeof right === 'string' ? regexEscapeString(right) : right.source\n  flags = flags ? strRemoveDuplicateChars('gs' + flags) : 'gs'\n  const reLeft = new RegExp(`${left}`, flags)\n  const reRight = new RegExp(`${right}`, flags)\n\n  return function* (input: string): Generator<matchBetweenYield> {\n    const matchesRight = [...rexec(reRight, input)]\n    for (const left of rexec(reLeft, input)) {\n      for (const right of matchesRight) {\n        if (left.lastIndex > right.index) continue\n        const mid = {\n          index: left.lastIndex,\n          match: input.substring(left.lastIndex, right.index),\n          groups: Object.create(null),\n          lastIndex: right.index,\n        }\n        yield { left, mid, right }\n        break\n      }\n    }\n  }\n}\n\n// const code = `\n// import { regexEscapeString } from '../../regex'\n\n// /**\n//  * Inserts provided strings before and after a string.\n//  * @param input - input string\n//  * @param before - string to place before\n//  * @param after - string to place after\n//  * @example\n//  */\n// export function strUnwrap(input: string, before: string, after: string, caseSensitive = true): string {\n//   const flags = caseSensitive ? '' : 'i'\n//   return input\n//     .replace(new RegExp('^' + regexEscapeString(before), flags), '')\n//     .replace(new RegExp(regexEscapeString(after) + '$', flags), '')\n// }\n// /**\n//  * asdasdsad\n//  * @param input - input string\n//  * @param before - string to place before\n//  * @param after - string to place after\n//  * @example\n//  */\n// `\n\n// const left = '/**'\n// const right = ' */'\n// const matchBlockComment = regexMatchBetween(left, right)\n// for (const match of matchBlockComment(code)) {\n//   console.log(match)\n// }\n","/**\n * Round value with a given number of decimal points.\n * @param n the number to round.\n * @param decimalPoints the number of decimal points.\n */\nexport function round(n: number, decimalPoints = 0): number {\n  return Math.round(n * Math.pow(10, decimalPoints)) / Math.pow(10, decimalPoints) + 0\n}\n","/**\n * Round number down to the nearest integer.\n */\nexport function roundDown(n: number): number {\n  return Math.floor(n)\n}\n","/**\n * Round number up to the nearest integer.\n */\nexport function roundUp(n: number): number {\n  return Math.ceil(n) + 0\n}\n","/**\n * Set multiple 'enumerable' property descriptor attributes of the target object to true.\n * @param object The target object.\n * @param propertyName The property names to be affected.\n */\nexport function setEnumerable<T>(object: T, ...propertyNames: string[]): void {\n  for (const propertyName of propertyNames) {\n    Object.defineProperty(object, propertyName, { enumerable: true })\n  }\n}\n","/**\n * Returns the set intersection of a provded array of Set instances.\n * @param sets - an array of Set instances\n */\nexport function setIntersection(sets: Array<Set<any>>): Set<any> {\n  const result = new Set(sets[0].values())\n  for (let i = 1; i < sets.length; i++) {\n    for (const value of result.values()) {\n      if (!sets[i].has(value)) {\n        result.delete(value)\n      }\n    }\n  }\n  return result\n}\n","/**\n * Set multiple 'configurable' property descriptor attributes of the target object to false.\n * @param object The target object.\n * @param propertyName The property names to be affected.\n */\nexport function setNonConfigurable<T>(object: T, ...propertyNames: string[]): void {\n  for (const propertyName of propertyNames) {\n    Object.defineProperty(object, propertyName, { configurable: false })\n  }\n}\n","/**\n * Set multiple 'writable' property descriptor attributes of the target object to false.\n * @param object The target object.\n * @param propertyName The property names to be affected.\n */\nexport function setNonWritable<T>(object: T, ...propertyNames: string[]): void {\n  for (const propertyName of propertyNames) {\n    Object.defineProperty(object, propertyName, { writable: false })\n  }\n}\n","/**\n * Returns the set union of a provded array of Set instances.\n * @param sets - an array of Set instances\n */\nexport function setUnion(sets: Array<Set<any>>): Set<any> {\n  const result = new Set(sets[0].values())\n  for (let i = 1; i < sets.length; i++) {\n    for (const value of sets[i].values()) {\n      result.add(value)\n    }\n  }\n  return result\n}\n","/**\n * Set multiple 'writable' property descriptor attributes of the target object to true.\n * @param object The target object.\n * @param propertyName The property names to be affected.\n */\nexport function setWritable<T>(object: T, ...propertyNames: string[]): void {\n  for (const propertyName of propertyNames) {\n    Object.defineProperty(object, propertyName, { writable: true })\n  }\n}\n","import { regexEscapeString } from '../../regex'\n\n/**\n * In a given string, replace all occurances of a given search string with a given replacement string.\n * @param input input string\n * @param replace string to find a replace\n * @param replaceWith string to replace matches with\n * @param flags RegExp flags as single string.\n */\nexport function strReplaceAll(input: string, replace: string, replaceWith: string, flags = 'g'): string {\n  return input.replace(new RegExp(regexEscapeString(replace), flags), replaceWith)\n}\n","import { Readable } from 'stream'\n\n/**\n * Drain a Readable into a string.\n * @param stream - a Readable of string chunks\n */\nexport async function streamToString(stream: Readable): Promise<string> {\n  const chunks: string[] = []\n  for await (const chunk of stream) {\n    chunks.push(Buffer.from(chunk).toString())\n  }\n  return chunks.join('')\n}\n"],"names":["arr2dToCSV","input","delimiter","map","row","join","arrAssignFrom","target","source","splice","length","i","arrEvery","predicate","len","arrFlatten","maxDepth","Number","MAX_SAFE_INTEGER","accum","recurse","arr","depth","Array","isArray","push","arrMapMutable","f","arrShallowEquals","input1","input2","value","arrSwap","from","to","compareNumber","a","b","compareNumeric","compareString","localeCompare","padArrayBytesRight","l","arrayBytesToInt","bytes","Uint32Array","Uint8Array","buffer","intToArrayBytes","int","bin","isObject","isPrototype","constructor","prototype","isConstructor","isNumericString","str","trim","n","isNaN","isFinite","parseFloat","iteratePrototypeChain","object","Function","objectOrNull","Reflect","getPrototypeOf","setNonEnumerable","propertyNames","propertyName","Object","defineProperty","enumerable","setNonEnumerablePrivateProperties","keys","filter","key","charAt","hasCreatedFirstInstance","Set","Base","this","onFirstInstance","has","add","assertInterfaceStaticMembers","interfaceName","requiredPropertyNames","requiredStaticProperties","found","proto","hasOwn","size","staticMember","Error","name","assertNoAmbiguousOptions","options","optionKeyPairs","key1","key2","undefined","assertNoOptionsRequireMissingOptions","Matrix","static","array","cols","m","r","c","matrix","iterable","fromArray","rows","immutable","fill","isSameInstanceAs","other","getImmutable","setImmutable","deepEquals","set","col","clone","get","toArray","result","slice","forEach","forEachInRow","forEachInCol","forEachInDiagonal","Math","min","Symbol","iterator","values","mapRow","mapCol","appendRow","appendCol","addBy","subtractBy","multiplyBy","divideBy","addRowBy","subtractRowBy","multiplyRowBy","divideRowBy","addColBy","subtractColBy","multiplyColBy","divideColBy","swapRows","row1","row2","r1","r2","swapCols","col1","col2","v1","v2","some","every","hasDimensions","isSquareMatrix","isScalarMatrix","val","isZeroMatrix","dotProduct","steps","step","Queue","queue","o","instance","json","JSON","parse","enqueue","item","dequeue","shift","toJSON","rexec","regex","string","match","exec","index","groups","assign","lastIndex","regexGetGroupNames","re","names","res","toString","regexEscapeString","replace","regexMatcherToValidater","RegExp","flags","BemojeString","String","species","thing","super","_","countCharOccurances","char","strCountCharOccurances","countChars","strCountChars","isLowerCase","strIsLowerCase","isUpperCase","strIsUpperCase","linesRemoveEmpty","strLinesRemoveEmpty","linesTrimLeft","strLinesTrimLeft","linesTrimRight","strLinesTrimRight","prettifyMinifiedCode","indent","strPrettifyMinifiedCode","removeDuplicateChars","strRemoveDuplicateChars","sortChars","strSortChars","splitCamelCase","strSplitCamelCase","toCharCodes","strToCharCodes","toCharSet","strToCharSet","toSentences","strToSentences","toWords","strToWords","unwrap","left","right","strUnwrap","wrapBetween","strWrapBetween","wrapIn","wrap","strWrapIn","wrapInAngleBrackets","strWrapInAngleBrackets","wrapInBraces","strWrapInBraces","wrapInBrackets","strWrapInBrackets","wrapInDoubleQuotes","strWrapInDoubleQuotes","wrapInParenthesis","strWrapInParenthesis","wrapInSingleQuotes","strWrapInSingleQuotes","Map","count","toLowerCase","toUpperCase","trimStart","trimEnd","getIndents","strRepeat","sort","isCamelCaseWordBreakIndex","word","lastCharIndex","lastCamelCaseBreakIndex","foundCamelCase","sub","substring","ret","charCodeAt","text","split","node","start","end","range","regexLibrary.repeatingWhiteSpace","s","words","regexIsValidFlags","test","regexFixFlags","regexValidFlags","BemojeRegex","defaultOptions","escapeSourceString","fixFlags","compareTo","compareToStrict","getGroupNames","toValidator","bemoje","setPrototypeOf","toRegExp","isValidFlags","getValidFlags","repeatingWhiteSpace","socialSecurityNumbersDK","isLocaleAlpha","isLocaleAlphaNumeric","alphaToColMap","letterToCol","A","zeroIndexed","fromMem","pow","REGEX_VALID_A1","A1ToColRow","A1","matches","adjust","parseInt","colToAlphaMap","colToLetter","isInteger","temp","letter","fromCharCode","Table","csv","data","line","_data","validateOptions","handleOptions","validateData","columns","columnHeaders","_columnHeaders","rowHeaders","_rowHeaders","column","spreadsheetNotation","normalizeColRow","removeColumn","normalizeCol","removeRow","normalizeRow","indexOfColumnHeader","header","indexOf","indexOfRowHeader","unshift","toArrayDataOnly","toCSV","extractColumnHeaders","h","extractRowHeaders","validateRowMin","validateColMin","buildEmptyTableWithDimensions","targetLength","rowLength","ensureValidRowIndex","ensureValidColIndex","isValidDateMonth","month","assertValidDateMonth","DAYS_IN_MONTH","numDaysInMonth","year","isLeapYear","isValidDateDay","day","isValidDateYear","assertValidDateYear","isValidDate","hour","minute","second","millisecond","format","padStart","date","isValid","getCentury","floor","getCurrentYear","Date","getUTCFullYear","Sudoku","sudoku","candidates","isGuess","cell","itRow","itRows","itCol","itCols","itNonant","itNonants","itAllSeries","isCompleteSeries","itSeries","seen","v","isCompleteSudoku","solveAt","delete","next","solve","foundAnswer","tryAll","maxCandidates","guess","newSudoku","print","console","log","singlePass","sentences","lowerBound","upperBound","average","max","cur","pre","normalizeFileExtension","ext","lastIndexOf","isEven","POW10","eu","numFormatEU","decimalPlaces","formatter","numberFormat","truncate","padRight","integerSeparator","decimal","us","numFormatUS","formatMemoryUsageOutput","process","memoryUsage","processAllocationMB","rss","heapAllocationMB","heapTotal","heapUsedMB","heapUsed","extenalV8","external","StringStream","Readable","ended","_read","nextTick","Buffer","parseSocialSecurityNumberDK","ssn","regexLibrary.socialSecurityNumbersDK","dd","mm","yy","id","iDay","iMon","iCurYear","iYear","sex","ExtensibleFunction","SortedArray","compare","compareFound","allowDuplicates","e","timsort","unique","element","foundIdentical","insertionIndex","addMany","elements","prev","curr","low","high","mid","order","firstInsertionIndex","lastInsertionIndex","indexOfCompare","firstIndexOfCompare","lastIndexOfCompare","indicesOfCompare","intersection","sorted","i1","i2","Timer","t0","now","stop","arrFilterMutable","arrFlattenMutable","arrIndicesOf","arrShuffle","original","equal","random","arrSome","arrSortNumeric","assertValidDate","stringify","assertValidDateDay","asyncWithTimeout","timeout","task","args","Promise","resolve","reject","setTimeout","then","error","catch","atob","btoa","buf","bufferToInt","buildRegexBetween","bytesToInt","x","pivot","colRowToA1","CR","compareArray","comparator","descending","orderMultiplier","recursiveCompare","_lenCompareParent","aIsArr","bIsArr","aLen","bLen","lenShortest","lenCompare","compareNumberDescending","compareNumericDescending","compareStringDescending","createFileExtensionFilter","fileExtensions","filepath","Path","extname","ensureValidWindowsPath","path","throwOrFalse","msg","assert","maxLength","extendedMaxLength","noDriveLetter","htmlTableTo2dArray","headers","htmlRows","querySelectorAll","htmlRow","htmlCells","j","htmlCell","innerText","intToBuffer","intToBytes","exp","y","d","isHex","isHexOrUnicode","isIterable","isOdd","isSocialSecurityNumberDK","mapGetOrDefault","defaultValue","mapUpdate","fun","mapUpdateDefault","toIntMB","memoryUsageEuFormat","memoryUsageUsFormat","normalizeLineLengths","newSentences","numApproximateLog10","padArrayBytesLeft","pathFromCwd","dirs","cwd","randomIntBetween","readFileStringSync","fs","readFileSync","regexMatchBetween","reLeft","reRight","matchesRight","create","round","decimalPoints","roundDown","roundUp","ceil","setEnumerable","setIntersection","sets","setNonConfigurable","configurable","setNonWritable","writable","setUnion","setWritable","solveSudoku","strReplaceAll","replaceWith","streamToString","stream","chunks","_a","stream_1","__asyncValues","stream_1_1","_b","done","_d","chunk","trimArrayBytesLeft","trimArrayBytesRight"],"mappings":"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"}