{"version":3,"file":"index.esm.js","sources":["../src/libs/array/src/arr2dToCSV.ts","../src/libs/array/src/arrAssignFrom.ts","../src/libs/array/src/arrEvery.ts","../src/libs/array/src/arrFilterMutable.ts","../src/libs/array/src/arrFlatten.ts","../src/libs/array/src/arrFlattenMutable.ts","../src/libs/array/src/arrIndicesOf.ts","../src/libs/array/src/arrMapMutable.ts","../src/libs/array/src/arrShallowEquals.ts","../src/libs/array/src/arrSwap.ts","../src/libs/array/src/arrShuffle.ts","../src/libs/array/src/arrSome.ts","../src/libs/sort.ts","../src/libs/array/src/arrSortNumeric.ts","../src/libs/binary/src/intToBytes.ts","../src/libs/binary/src/bytesToInt.ts","../src/libs/function/src/ExtensibleFunction.ts","../src/libs/datastructures/src/Matrix.ts","../src/libs/validation/src/isObject.ts","../src/libs/validation/src/isPrototype.ts","../src/libs/validation/src/isConstructor.ts","../src/libs/validation/src/isHex.ts","../src/libs/validation/src/isHexOrUnicode.ts","../src/libs/object.ts","../src/libs/Base.ts","../src/libs/regex.ts","../src/libs/spreadsheet/src/letterToCol.ts","../src/libs/spreadsheet/src/A1ToColRow.ts","../src/libs/spreadsheet/src/colToLetter.ts","../src/libs/spreadsheet/src/colRowToA1.ts","../src/libs/datastructures/src/Table.ts","../src/libs/datastructures/src/SortedArray.ts","../src/libs/date/src/isValidDateMonth.ts","../src/libs/date/src/assertValidDateMonth.ts","../src/libs/date/src/isValidDateYear.ts","../src/libs/date/src/assertValidDateYear.ts","../src/libs/date/src/isLeapYear.ts","../src/libs/date/src/numDaysInMonth.ts","../src/libs/date/src/isValidDateDay.ts","../src/libs/date/src/assertValidDateDay.ts","../src/libs/date/src/getCentury.ts","../src/libs/date/src/getCurrentYear.ts","../src/libs/html/src/htmlTableTo2dArray.ts","../src/libs/Misc/src/solveSudoku.ts","../src/libs/number/src/isEven.ts","../src/libs/number/src/isOdd.ts","../src/libs/number/src/numApproximateLog10.ts","../src/libs/number/src/numFormatEU.ts","../src/libs/number/src/numFormatUS.ts","../src/libs/number/src/randomIntBetween.ts","../src/libs/number/src/round.ts","../src/libs/number/src/roundDown.ts","../src/libs/number/src/roundUp.ts","../src/libs/parse/src/socialSecurityNumberDK.ts","../src/libs/string.ts","../src/libs/node.ts","../src/libs/set.ts","../src/libs/time.ts"],"sourcesContent":["/**\n * Converts a 2-dimensional array into a CSV string.\n * @param input a 2-dimensional array\n * @param delimiter csv delimiter\n */\nexport function arr2dToCSV<T>(input: Array<Array<T>>, delimiter = ';'): string {\n  return input.map((row) => row.join(delimiter)).join('\\n');\n}\n","/**\n * Mutably assigns the values of source array to target array. Lengths will also be identical.\n */\nexport function arrAssignFrom<T>(target: Array<T>, source: Array<T>): Array<T> {\n  target.splice(source.length);\n  for (let i = 0; i < source.length; i++) {\n    target[i] = source[i];\n  }\n  return target;\n}\n","import { Predicate } from '../../array';\n\n/**\n * Returns true if the predicate is satisfied for every element of the passed array; otherwise false.\n * @param input - The array\n * @param  predicate - A predicate callback function\n */\n\nexport function arrEvery<T>(input: Array<T>, predicate: Predicate): boolean {\n  for (let i = 0, len = input.length; i < len; i++) {\n    if (predicate(input[i], i, input) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n","import { arrAssignFrom, Predicate } from '../../array';\n\n/**\n * Same as Array.prototype.filter but performs operations in palce (not immutable).\n * @param input - input array\n * @param f - predicate\n */\nexport function arrFilterMutable<T>(input: Array<T>, f: Predicate): Array<T> {\n  return arrAssignFrom(input, input.filter(f));\n}\n","/**\n * Flattens the passed array recursively to a specified depth. Immutable.\n * @param input - the array to flatten\n * @param maxDepth - the maximum recursive flattening depth.\n */\nexport function arrFlatten<T>(\n  input: Array<any>,\n  maxDepth = Number.MAX_SAFE_INTEGER,\n): Array<T> {\n  const accum = [];\n  (function recurse(arr = input, depth = 0) {\n    for (let i = 0; i < arr.length; i++) {\n      if (Array.isArray(arr[i]) && depth < maxDepth) {\n        recurse(arr[i], depth + 1);\n      } else {\n        accum.push(arr[i]);\n      }\n    }\n  })();\n  return accum;\n}\n","import { arrAssignFrom } from './arrAssignFrom';\nimport { arrFlatten } from './arrFlatten';\n\n/**\n * Flattens the passed array recursively. Mutable.\n * @param input - the array to flatten\n * @param maxDepth - the maximum recursive flattening depth.\n */\nexport function arrFlattenMutable<T>(\n  input: Array<any>,\n  maxDepth = Number.MAX_SAFE_INTEGER,\n): Array<T> {\n  return arrAssignFrom(input, arrFlatten(input, maxDepth));\n}\n","/**\n * Returns all indexes at which an element is found.\n * @param input - The array to search\n * @param element - The element to find\n */\n\nexport function arrIndicesOf<T>(input: Array<T>, element: T): Array<number> {\n  const result: Array<number> = [];\n  for (let i = 0; i < input.length; i++) {\n    if (element === input[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n","import { Callback } from '../../array';\n\n/**\n * Same as Array.prototype.map but performs operations in palce (not immutable).\n * @param input - input array\n * @param f - iterator\n * @example\n * ```js\n * expect(\n *   util.arrMapMutable([1, 2, 3, 4, 5], (value: number) => {\n *     return value + 1;\n *   }),\n * ).toStrictEqual([2, 3, 4, 5, 6]);\n * ```\n */\n\nexport function arrMapMutable(input: Array<any>, f: Callback): Array<any> {\n  for (let i = 0; i < input.length; i++) {\n    input[i] = f(input[i], i, input);\n  }\n  return input;\n}\n","import { arrEvery } from './arrEvery';\n\n/**\n * Returns whether or not two arrays shallow equal each other.\n * @param input1 first array\n * @param input2 second array\n */\nexport function arrShallowEquals<T>(\n  input1: Array<T>,\n  input2: Array<T>,\n): boolean {\n  if (input1.length !== input2.length) return false;\n  return arrEvery(input1, (value, i) => value === input2[i]);\n}\n","/**\n * Swap array elements in place. Runtime: O(1)\n * @param input to be modified\n * @param from index of the first element\n * @param to index of the second element\n */\nexport function arrSwap<T>(\n  input: Array<T>,\n  from: number,\n  to: number,\n): Array<T> {\n  [input[from], input[to]] = [input[to], input[from]];\n  return input;\n}\n","import { arrSwap } from './arrSwap';\nimport { arrShallowEquals } from './arrShallowEquals';\n\n/**\n * Shuffle items in an array in-place. Guarantees that the array has changes.\n * @param input - The array to shuffle.\n */\nexport function arrShuffle<T>(input: Array<T>): Array<T> {\n  const original = input.slice();\n  let equal = true;\n  while (equal) {\n    for (let i = 0, len = input.length; i < len; i++) {\n      const newIndex = Math.floor(Math.random() * len);\n      arrSwap(input, i, newIndex);\n    }\n    equal = arrShallowEquals(input, original);\n  }\n  return input;\n}\n","import { Predicate } from '../';\n\n/**\n * Check whether a condition is true for any element of an array. The condition check is in the form of a callback.\n * @param input - The array\n * @param  predicate - A predicate callback function\n */\n\nexport function arrSome<T>(input: Array<T>, predicate: Predicate): boolean {\n  for (let i = 0, len = input.length; i < len; i++) {\n    if (predicate(input[i], i, input) === true) {\n      return true;\n    }\n  }\n  return false;\n}\n","export type Comparator = (a: any, b: any) => number;\r\n\r\n/**\r\n * Returns a given comparator as an array compatible comparator. Behaves as if the array to sort was recursively flattened.\r\n * @param comparator compare function\r\n * @param descending whether the input comparator sorts in descending order\r\n */\r\nexport function compareArray(\r\n  comparator: Comparator,\r\n  descending = false,\r\n): Comparator {\r\n  const orderMultiplier = descending ? -1 : 1;\r\n  function recursiveCompare(\r\n    a: any,\r\n    b: any,\r\n    _lenCompareParent?: number,\r\n  ): number {\r\n    const aIsArr = Array.isArray(a);\r\n    const bIsArr = Array.isArray(b);\r\n    if (aIsArr) {\r\n      if (bIsArr) {\r\n        const aLen = a.length;\r\n        const bLen = b.length;\r\n        let lenShortest, lenCompare;\r\n        if (aLen > bLen) {\r\n          lenShortest = aLen;\r\n          lenCompare = 1 * orderMultiplier;\r\n        } else if (aLen < bLen) {\r\n          lenShortest = bLen;\r\n          lenCompare = -1 * orderMultiplier;\r\n        } else {\r\n          lenShortest = aLen;\r\n          lenCompare = 0;\r\n        }\r\n        for (let i = 0, len = lenShortest; i < len; i++) {\r\n          const res = recursiveCompare(a[i], b[i], lenCompare);\r\n          if (res !== 0) {\r\n            return res;\r\n          }\r\n        }\r\n      } else {\r\n        return 1 * orderMultiplier;\r\n      }\r\n    } else {\r\n      if (bIsArr) {\r\n        return -1 * orderMultiplier;\r\n      } else {\r\n        const res = comparator(a, b);\r\n        if (res === 0) {\r\n          return _lenCompareParent || res;\r\n        } else {\r\n          return res;\r\n        }\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n  return (a: any, b: any): number => {\r\n    return recursiveCompare(a, b);\r\n  };\r\n}\r\n\r\n/**\r\n * Number comparator function (ascending)\r\n * @param a first value to compare\r\n * @param b second value to compare\r\n */\r\nexport function compareNumber(a: number, b: number): number {\r\n  return a - b;\r\n}\r\n\r\n/**\r\n * Number comparator function (descending)\r\n * @param a first value to compare\r\n * @param b second value to compare\r\n */\r\nexport function compareNumberDescending(a: number, b: number): number {\r\n  return b - a;\r\n}\r\n\r\n/**\r\n * number, bigint, boolean comparator function (ascending)\r\n * @param a first value to compare\r\n * @param b second value to compare\r\n */\r\nexport function compareNumeric(\r\n  a: number | bigint | boolean,\r\n  b: number | bigint | boolean,\r\n): number {\r\n  if (a < b) return -1;\r\n  if (a > b) return 1;\r\n  return 0;\r\n}\r\n\r\n/**\r\n * number, bigint, boolean comparator function (descending)\r\n * @param a first value to compare\r\n * @param b second value to compare\r\n */\r\nexport function compareNumericDescending(\r\n  a: number | bigint | boolean,\r\n  b: number | bigint | boolean,\r\n): number {\r\n  if (a > b) return -1;\r\n  if (a < b) return 1;\r\n  return 0;\r\n}\r\n\r\n/**\r\n * Alpha numeric comparator function (ascending)\r\n * @param a first value to compare\r\n * @param b second value to compare\r\n */\r\nexport function compareString(a: string, b: string): number {\r\n  return a.localeCompare(b);\r\n}\r\n\r\n/**\r\n * Alpha numeric comparator function (descending)\r\n * @param a first value to compare\r\n * @param b second value to compare\r\n */\r\nexport function compareStringDescending(a: string, b: string): number {\r\n  return b.localeCompare(a);\r\n}\r\n","import { compareNumeric } from '../../sort';\n\n/**\n * Uses Array.prototype.sort but sorts numbers.\n * @param input - input array\n */\nexport function arrSortNumeric(\n  input: Array<number | bigint | boolean>,\n): Array<number | bigint | boolean> {\n  return input.sort(compareNumeric);\n}\n","/**\n * Converts a positive integer to a byte array.\n * Throws Error if the input is larger than 256^5 or not a positive integer.\n */\nexport function intToBytes(int: number): Array<number> {\n  if (!Number.isInteger(int) || int < 0) throw new Error(`input must be a positive integer. Got ${int}`);\n  if (int > 1099511627776) throw new Error(`input must be less than or equal to 256^5. Got ${int}`);\n  const x = int - 251;\n  return int < 251\n    ? [int]\n    : x < 256\n    ? [251, x]\n    : x < 65536\n    ? [252, Math.floor(x / 256), x % 256]\n    : x < 16777216\n    ? [253, Math.floor(x / 65536), Math.floor(x / 256) % 256, x % 256]\n    : x < 4294967296\n    ? [254, Math.floor(x / 16777216), Math.floor(x / 65536) % 256, Math.floor(x / 256) % 256, x % 256]\n    : (() => {\n        const exp = Math.floor(Math.log(x) / Math.log(2)) - 32;\n        const bytes = [255, ...intToBytes(exp)];\n        const y = Math.floor(x / Math.pow(2, exp - 11));\n        for (let i = 5, d = 1099511627776; i >= 0; i--, d /= 256) {\n          bytes.push(Math.floor(y / d) % 256);\n        }\n        return bytes;\n      })();\n}\n","/**\n * Converts a byte-array to an integer.\n * Throws Error if the input is an invalid byte-array or corresponds to an integer value larger than 256^5.\n */\nexport function bytesToInt(bytes: Array<number>): number {\n  return bytes.length === 1 && bytes[0] < 251\n    ? bytes[0]\n    : bytes.length === 2 && bytes[0] === 251\n    ? 251 + bytes[1]\n    : bytes.length === 3 && bytes[0] === 252\n    ? 251 + 256 * bytes[1] + bytes[2]\n    : bytes.length === 4 && bytes[0] === 253\n    ? 251 + 65536 * bytes[1] + 256 * bytes[2] + bytes[3]\n    : bytes.length === 5 && bytes[0] === 254\n    ? 251 + 16777216 * bytes[1] + 65536 * bytes[2] + 256 * bytes[3] + bytes[4]\n    : bytes.length > 5 && bytes[0] === 255\n    ? (() => {\n        let m = 0;\n        let x = 1;\n        const pivot = Math.max(2, bytes.length - 6);\n        for (let i = bytes.length - 1; i >= pivot; i--) {\n          m += x * bytes[i];\n          x *= 256;\n        }\n        const n =\n          bytes[1] + 32 < 251\n            ? bytesToInt([bytes[1] + 32]) - 11\n            : bytes[0] === 255 && bytes[1] < 251\n            ? bytes[1] + 21\n            : pivot === 3\n            ? bytesToInt([bytes[1], bytes[2] + 21])\n            : pivot === 4\n            ? bytesToInt([bytes[1], bytes[2], bytes[3] + 21])\n            : 0;\n        const int = 251 + m / Math.pow(2, 32 - n);\n        if (!Number.isInteger(int)) throw new Error(`Invalid bytes. Got [${bytes.join(', ')}] = ${int}`);\n        if (int > 1099511627776)\n          throw new Error(\n            `Bytes must correspond to an integer less than or equal to 256^5. Got [${bytes.join(', ')}] = ${int}`,\n          );\n        return int;\n      })()\n    : (() => {\n        throw new Error(`Invalid first byte. Got length: ${bytes.length}, and bytes: [${bytes.join(', ')}]`);\n      })();\n}\n","/**\r\n * A Function class that can be extended.\r\n * @example\r\n * ```ts\r\n * class MyFunction<T> extends util.ExtensibleFunction {\r\n *   constructor(f: (...args: any[]) => any) {\r\n *     let self: MyFunction<T> | undefined = undefined;\r\n *     super(f.name, function anonymous(...args: any[]) {\r\n *       // do something with self\r\n *       return f.call(self, ...args);\r\n *     });\r\n *     self = this;\r\n *   }\r\n * }\r\n * ```\r\n */\r\nexport class ExtensibleFunction extends Function {\r\n  constructor(name: string, f: any) {\r\n    Object.defineProperty(f, 'name', { value: name });\r\n    super(f);\r\n    return Object.setPrototypeOf(f, new.target.prototype);\r\n  }\r\n}\r\n","export class Matrix {\r\n  protected matrix: Array<Array<number>>;\r\n  protected immutable = false;\r\n\r\n  public static fromArray(array: Array<Array<number>>): Matrix {\r\n    const cols = array[0].length;\r\n    const m = new this(array.length, cols);\r\n    for (let r = 0; r < array.length; r++) {\r\n      if (array[r].length !== cols) {\r\n        throw new Error('All rows must have the same length.');\r\n      }\r\n      for (let c = 0; c < cols; c++) {\r\n        m.matrix[r][c] = array[r][c];\r\n      }\r\n    }\r\n    return m;\r\n  }\r\n\r\n  public static fromIterable(iterable: Iterable<Iterable<number>>): Matrix {\r\n    const arr = [];\r\n    for (const row of iterable) {\r\n      arr.push([...row]);\r\n    }\r\n    return this.fromArray(arr);\r\n  }\r\n\r\n  public static identity(size: number): Matrix {\r\n    const m = new Matrix(size, size);\r\n    for (let i = 0; i < size; i++) {\r\n      m.matrix[i][i] = 1;\r\n    }\r\n    return m;\r\n  }\r\n\r\n  constructor(rows: number, cols: number) {\r\n    if (rows < 1) throw new Error('Expected rows to be greater than zero.');\r\n    if (cols < 1) throw new Error('Expected cols to be greater than zero.');\r\n    this.matrix = new Array(rows);\r\n    for (let r = 0; r < rows; r++) {\r\n      this.matrix[r] = new Array(cols).fill(0);\r\n    }\r\n  }\r\n\r\n  public get rows(): number {\r\n    return this.matrix.length;\r\n  }\r\n\r\n  public get cols(): number {\r\n    return this.matrix[0].length;\r\n  }\r\n\r\n  public isSameInstanceAs(other: Matrix): boolean {\r\n    return this === other;\r\n  }\r\n\r\n  public getImmutable(): boolean {\r\n    return this.immutable;\r\n  }\r\n\r\n  public setImmutable(immutable: boolean): Matrix {\r\n    this.immutable = immutable;\r\n    return this;\r\n  }\r\n\r\n  public deepEquals(other: Matrix | Array<Array<number>>): boolean {\r\n    const m = other instanceof Matrix ? other.matrix : other;\r\n    for (let r = 0; r < this.rows; r++) {\r\n      for (let c = 0; c < this.cols; c++) {\r\n        if (this.matrix[r][c] !== m[r][c]) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public set(row: number, col: number, value: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this;\r\n    m.matrix[row][col] = value;\r\n    return m;\r\n  }\r\n\r\n  public get(row: number, col: number): number {\r\n    return this.matrix[row][col];\r\n  }\r\n\r\n  public has(row: number, col: number): boolean {\r\n    return row < this.rows && col < this.cols && row >= 0 && col >= 0;\r\n  }\r\n\r\n  public toArray(): Array<Array<number>> {\r\n    const result = new Array(this.rows);\r\n    for (let r = 0; r < this.rows; r++) {\r\n      result[r] = this.matrix[r].slice();\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public clone(): Matrix {\r\n    const clone = new Matrix(this.rows, this.cols);\r\n    for (let r = 0; r < this.rows; r++) {\r\n      for (let c = 0; c < this.cols; c++) {\r\n        clone.matrix[r][c] = this.matrix[r][c];\r\n      }\r\n    }\r\n    return clone;\r\n  }\r\n\r\n  public forEach(f: (value: number, row: number, col: number) => void | boolean): Matrix {\r\n    for (let r = 0; r < this.rows; r++) {\r\n      for (let c = 0; c < this.cols; c++) {\r\n        if (f(this.matrix[r][c], r, c) === false) {\r\n          return this;\r\n        }\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public forEachInRow(row: number, f: (value: number, col: number) => void | boolean): Matrix {\r\n    for (let c = 0; c < this.cols; c++) {\r\n      if (f(this.matrix[row][c], c) === false) {\r\n        return this;\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public forEachInCol(col: number, f: (value: number, row: number) => void | boolean): Matrix {\r\n    for (let r = 0; r < this.rows; r++) {\r\n      if (f(this.matrix[r][col], r) === false) {\r\n        return this;\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public forEachInDiagonal(f: (value: number, row: number, col: number) => void | boolean): Matrix {\r\n    for (let i = 0; i < Math.min(this.rows, this.cols); i++) {\r\n      if (f(this.matrix[i][i], i, i) === false) {\r\n        return this;\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public map(f: (value: number, row: number, col: number) => number): Matrix {\r\n    const m = this.immutable ? this.clone() : this;\r\n    for (let r = 0; r < this.rows; r++) {\r\n      for (let c = 0; c < this.cols; c++) {\r\n        m.matrix[r][c] = f(this.matrix[r][c], r, c);\r\n      }\r\n    }\r\n    return m;\r\n  }\r\n\r\n  public *[Symbol.iterator](): Generator<number> {\r\n    for (let r = 0; r < this.rows; r++) {\r\n      for (let c = 0; c < this.cols; c++) {\r\n        yield this.matrix[r][c];\r\n      }\r\n    }\r\n  }\r\n\r\n  public *values(): Generator<number> {\r\n    yield* this;\r\n  }\r\n\r\n  public mapRow(row: number, f: (value: number, col: number) => number): Matrix {\r\n    const m = this.immutable ? this.clone() : this;\r\n    for (let c = 0; c < this.cols; c++) {\r\n      m.matrix[row][c] = f(this.matrix[row][c], c);\r\n    }\r\n    return m;\r\n  }\r\n\r\n  public mapCol(col: number, f: (value: number, row: number) => number): Matrix {\r\n    const m = this.immutable ? this.clone() : this;\r\n    for (let r = 0; r < this.rows; r++) {\r\n      m.matrix[r][col] = f(this.matrix[r][col], r);\r\n    }\r\n    return m;\r\n  }\r\n\r\n  public appendRow(row?: Array<number>): Matrix {\r\n    const m = this.immutable ? this.clone() : this;\r\n    if (row) {\r\n      if (row.length !== this.cols) {\r\n        throw new Error('Row must have length ' + this.cols);\r\n      }\r\n    } else {\r\n      row = new Array(this.cols).fill(0);\r\n    }\r\n    m.matrix.push(row);\r\n    return m;\r\n  }\r\n\r\n  public appendCol(col?: Array<number>): Matrix {\r\n    const m = this.immutable ? this.clone() : this;\r\n    if (col) {\r\n      if (col.length !== this.rows) {\r\n        throw new Error('Col must have length ' + this.rows);\r\n      }\r\n    } else {\r\n      col = new Array(this.rows).fill(0);\r\n    }\r\n    for (let r = 0; r < this.rows; r++) {\r\n      m.matrix[r].push(col[r]);\r\n    }\r\n    return m;\r\n  }\r\n\r\n  public addBy(n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this;\r\n    return m.map((value: number) => value + n);\r\n  }\r\n\r\n  public subtractBy(n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this;\r\n    return m.map((value: number) => value - n);\r\n  }\r\n\r\n  public multiplyBy(n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this;\r\n    return m.map((value: number) => value * n);\r\n  }\r\n\r\n  public divideBy(n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this;\r\n    return m.map((value: number) => value / n);\r\n  }\r\n\r\n  public addRowBy(row: number, n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this;\r\n    return m.mapRow(row, (value: number) => value + n);\r\n  }\r\n\r\n  public subtractRowBy(row: number, n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this;\r\n    return m.mapRow(row, (value: number) => value - n);\r\n  }\r\n\r\n  public multiplyRowBy(row: number, n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this;\r\n    return m.mapRow(row, (value: number) => value * n);\r\n  }\r\n\r\n  public divideRowBy(row: number, n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this;\r\n    return m.mapRow(row, (value: number) => value / n);\r\n  }\r\n\r\n  public addColBy(col: number, n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this;\r\n    return m.mapCol(col, (value: number) => value + n);\r\n  }\r\n\r\n  public subtractColBy(col: number, n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this;\r\n    return m.mapCol(col, (value: number) => value - n);\r\n  }\r\n\r\n  public multiplyColBy(col: number, n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this;\r\n    return m.mapCol(col, (value: number) => value * n);\r\n  }\r\n\r\n  public divideColBy(col: number, n: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this;\r\n    return m.mapCol(col, (value: number) => value / n);\r\n  }\r\n\r\n  public swapRows(row1: number, row2: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this;\r\n    const r1 = m.matrix[row1];\r\n    const r2 = m.matrix[row2];\r\n    m.matrix[row1] = r2;\r\n    m.matrix[row2] = r1;\r\n    return m;\r\n  }\r\n\r\n  public swapCols(col1: number, col2: number): Matrix {\r\n    const m = this.immutable ? this.clone() : this;\r\n    for (let r = 0; r < this.rows; r++) {\r\n      const v1 = m.matrix[r][col1];\r\n      const v2 = m.matrix[r][col2];\r\n      m.matrix[r][col1] = v2;\r\n      m.matrix[r][col2] = v1;\r\n    }\r\n    return m;\r\n  }\r\n\r\n  public some(f: (value: number, row: number, col: number) => boolean): boolean {\r\n    for (let r = 0; r < this.rows; r++) {\r\n      for (let c = 0; c < this.cols; c++) {\r\n        if (f(this.matrix[r][c], r, c)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public every(f: (value: number, row: number, col: number) => boolean): boolean {\r\n    for (let r = 0; r < this.rows; r++) {\r\n      for (let c = 0; c < this.cols; c++) {\r\n        if (!f(this.matrix[r][c], r, c)) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public hasDimensions(rows: number, cols: number): boolean {\r\n    return this.rows === rows && this.cols === cols;\r\n  }\r\n\r\n  public isSquareMatrix(): boolean {\r\n    return this.rows === this.cols;\r\n  }\r\n\r\n  /**\r\n   * Returns whether the matrix is a square matrix that has identical values on its diagonal.\r\n   */\r\n  public isScalarMatrix(): boolean {\r\n    if (!this.isSquareMatrix()) return false;\r\n    const val = this.matrix[0][0];\r\n    for (let i = 1; i < this.rows; i++) {\r\n      if (this.matrix[i][i] !== val) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public isZeroMatrix(): boolean {\r\n    return this.every((value: number) => value === 0);\r\n  }\r\n\r\n  /**\r\n   * Performs dot product of the matrix with another given matrix.\r\n   */\r\n  public dotProduct(other: Matrix): Matrix {\r\n    if (this.cols !== other.rows) {\r\n      throw new Error(\r\n        'A*B dot product not possible unless the number of columns in A and number of rows in B are the same.',\r\n      );\r\n    }\r\n    const rows = this.rows;\r\n    const cols = other.cols;\r\n    const steps = this.cols;\r\n    const result = new Matrix(rows, cols);\r\n    for (let r = 0; r < rows; r++) {\r\n      for (let c = 0; c < cols; c++) {\r\n        for (let step = 0; step < steps; step++) {\r\n          result.matrix[r][c] += this.matrix[r][step] * other.matrix[step][c];\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","/**\n * Determine wheter the argument is a Object (is typeof object but not null).\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function isObject(value: any): boolean {\n  return value !== null && typeof value === 'object';\n}\n","import { isObject } from './isObject';\n\n/**\n * Determine wheter a given object is a prototype-object (obj.constructor.prototype === obj).\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function isPrototype(value: any): boolean {\n  if (!isObject(value)) return false;\n  if (!('constructor' in value)) return false;\n  return value.constructor.prototype === value;\n}\n","import { isPrototype } from './isPrototype';\n\n/**\n * Determine if value is a constructor function\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function isConstructor(value: any): boolean {\n  return (\n    typeof value === 'function' &&\n    'prototype' in value &&\n    isPrototype(value.prototype) &&\n    value === value.prototype.constructor\n  );\n}\n","/**\n * Determine whether a string is a hexadecimal string.\n */\nexport function isHex(s: string): boolean {\n  return /[\\da-f]+$/i.test(s);\n}\n","/**\n * Determine whether a string is either a hexadecimal or a '\\u' or '0x' prepended unicode hex string.\n */\nexport function isHexOrUnicode(s: string): boolean {\n  return /^(\\\\\\\\?u|0x)?[\\da-f]+$/i.test(s);\n}\n","import { isConstructor, isPrototype } from './validation';\r\n\r\n/**\r\n * Set multiple 'enumerable' property descriptor attributes of the target object to true.\r\n * @param object The target object.\r\n * @param propertyName The property names to be affected.\r\n */\r\nexport function setEnumerable<T>(object: T, ...propertyNames: string[]): void {\r\n  for (const propertyName of propertyNames) {\r\n    Object.defineProperty(object, propertyName, { enumerable: true });\r\n  }\r\n}\r\n\r\n/**\r\n * Set multiple 'enumerable' property descriptor attributes of the target object to false.\r\n * @param object The target object.\r\n * @param propertyName The property names to be affected.\r\n */\r\nexport function setNonEnumerable<T>(object: T, ...propertyNames: string[]): void {\r\n  for (const propertyName of propertyNames) {\r\n    Object.defineProperty(object, propertyName, { enumerable: false });\r\n  }\r\n}\r\n\r\n/**\r\n * Set multiple 'writable' property descriptor attributes of the target object to true.\r\n * @param object The target object.\r\n * @param propertyName The property names to be affected.\r\n */\r\nexport function setWritable<T>(object: T, ...propertyNames: string[]): void {\r\n  for (const propertyName of propertyNames) {\r\n    Object.defineProperty(object, propertyName, { writable: true });\r\n  }\r\n}\r\n\r\n/**\r\n * Set multiple 'writable' property descriptor attributes of the target object to false.\r\n * @param object The target object.\r\n * @param propertyName The property names to be affected.\r\n */\r\nexport function setNonWritable<T>(object: T, ...propertyNames: string[]): void {\r\n  for (const propertyName of propertyNames) {\r\n    Object.defineProperty(object, propertyName, { writable: false });\r\n  }\r\n}\r\n\r\n/**\r\n * Set multiple 'configurable' property descriptor attributes of the target object to false.\r\n * @param object The target object.\r\n * @param propertyName The property names to be affected.\r\n */\r\nexport function setNonConfigurable<T>(object: T, ...propertyNames: string[]): void {\r\n  for (const propertyName of propertyNames) {\r\n    Object.defineProperty(object, propertyName, { configurable: false });\r\n  }\r\n}\r\n\r\n/**\r\n * Set the 'enumerable' property descriptor attributes on the target object to false for all property names that start with '_' (underscore).\r\n * @param object The target object.\r\n */\r\nexport function setNonEnumerablePrivateProperties(object: Record<string, any>): void {\r\n  setNonEnumerable(object, ...Object.keys(object).filter((key) => key.charAt(0) === '_'));\r\n}\r\n\r\n/**\r\n * Iterate the prototype chain of a given object.\r\n * @example\r\n * ```js\r\n * class A {}\r\n * class B extends A {}\r\n * class C extends B {}\r\n * const instance = new C()\r\n *\r\n * iteratePrototypeChain(C)\r\n * //=> [ C, B, A, Function.prototype, Object.prototype]\r\n *\r\n * iteratePrototypeChain(C.prototype)\r\n * //=> [C.prototype, B.prototype, A.prototype, Object.prototype]\r\n *\r\n * iteratePrototypeChain(instance)\r\n * //=> [instance, C.prototype, B.prototype, A.prototype, Object.prototype]\r\n * ```\r\n */\r\nexport function* iteratePrototypeChain(object: Record<string, any>): Generator<Record<string, any>> {\r\n  if (object == null) return;\r\n  if (\r\n    // if the below false, then object must be an instance\r\n    !isPrototype(object) &&\r\n    !isConstructor(object) &&\r\n    // the two above depend on checking that typeof object is 'object',\r\n    // so this last check is in case of arrow functions and generator functions\r\n    object !== Function.prototype\r\n  ) {\r\n    yield object;\r\n    object = object.constructor.prototype;\r\n  }\r\n  let objectOrNull: Object | null = object;\r\n  while (objectOrNull) {\r\n    yield objectOrNull;\r\n    objectOrNull = Reflect.getPrototypeOf(objectOrNull);\r\n  }\r\n}\r\n\r\n// G:\\My Drive\\dev\\dev\\dev\\src\\object\\iterate-object.js\r\n","import { iteratePrototypeChain, setNonEnumerablePrivateProperties } from './object';\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst hasCreatedFirstInstance: Set<Function> = new Set();\n\n/**\n * Abstract class that other classes can inherit from to gain various handy functionality.\n */\nexport abstract class Base {\n  constructor() {\n    this.onFirstInstance();\n  }\n\n  private onFirstInstance() {\n    if (!hasCreatedFirstInstance.has(this.constructor)) {\n      hasCreatedFirstInstance.add(this.constructor);\n      this.assertInterfaceStaticMembers('IRevivableJSON', ['toJSON'], ['fromJSON']);\n    }\n  }\n\n  private assertInterfaceStaticMembers(\n    interfaceName: string,\n    requiredPropertyNames: Array<string>,\n    requiredStaticProperties: Array<string>,\n  ) {\n    const found = new Set();\n    for (const proto of iteratePrototypeChain(this)) {\n      if (proto !== Object.prototype) {\n        for (const key of requiredPropertyNames) {\n          if (Object.hasOwn(proto, key)) {\n            found.add(key);\n          }\n        }\n      }\n    }\n    const implementsInterface = found.size === requiredPropertyNames.length;\n    if (implementsInterface) {\n      for (const staticMember of requiredStaticProperties) {\n        if (!Object.hasOwn(this.constructor, staticMember)) {\n          throw new Error(\n            `Interface ${interfaceName} requires class ${this.constructor.name} to implement static member: ${staticMember}`,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Make the properties with property names that start with an underscore non-enumerable.\n   */\n  protected setNonEnumerablePrivateProperties(): void {\n    setNonEnumerablePrivateProperties(this);\n  }\n\n  protected assertNoAmbiguousOptions(options: Record<string, any>, optionKeyPairs: Array<[string, string]>): void {\n    for (const [key1, key2] of optionKeyPairs) {\n      if (options[key1] !== undefined && options[key2] !== undefined) {\n        throw new Error(`Cannot use the '${key1}' option and the '${key2}' option simultanously.`);\n      }\n    }\n  }\n\n  protected assertNoOptionsRequireMissingOptions(\n    options: Record<string, any>,\n    optionKeyPairs: Array<[string, string]>,\n  ): void {\n    for (const [key1, key2] of optionKeyPairs) {\n      if (options[key1] !== undefined && options[key2] === undefined) {\n        throw new Error(`Cannot use the '${key1}' option without the '${key2}' option.`);\n      }\n    }\n  }\n}\n","export type RexecOutput = {\r\n  index: number;\r\n  match: string;\r\n  groups: Record<string, any>;\r\n  lastIndex: number;\r\n};\r\n\r\n/**\r\n * Easily perform regex 'exec' on a string. An iterable is returned which steps through the exec process and yields all\r\n * the details you might need.\r\n * @param regex - The regular expression object\r\n * @param str - The string to perform the operation on\r\n * @example\r\n * ```js\r\n * const regex = /(?<group1>a)|(?<group2>d)/g\r\n * const str = 'Anthony wants a girlfriend.'\r\n * console.log([...rexec(regex, str)])\r\n * // [\r\n * // \t{\r\n * //     index: 9,\r\n * //     match: 'a',\r\n * //     groups: { g1: 'a', g2: undefined },\r\n * //     lastIndex: 10,\r\n * //   },\r\n * //   {\r\n * //     index: 14,\r\n * //     match: 'a',\r\n * //     groups: { g1: 'a', g2: undefined },\r\n * //     lastIndex: 15,\r\n * //   },\r\n * //   {\r\n * //     index: 25,\r\n * //     match: 'd',\r\n * //     groups: { g1: undefined, g2: 'd' },\r\n * //     lastIndex: 26,\r\n * //   },\r\n * // ]\r\n * ```\r\n */\r\nexport function* rexec(regex: RegExp, str: string): Generator<RexecOutput> {\r\n  let match;\r\n  while ((match = regex.exec(str)) !== null) {\r\n    yield {\r\n      index: match.index,\r\n      match: match[0],\r\n      groups: Object.assign({}, match.groups),\r\n      lastIndex: regex.lastIndex,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Returns an array of named groups defined inside a RegExp instance.\r\n * @param re RegExp instance to extract named groups from.\r\n */\r\nexport function regexGetGroupNames(re: RegExp): Array<string> {\r\n  const names = [];\r\n  for (const res of rexec(/\\(\\?<(?<name>\\w+)>/g, re.toString())) {\r\n    names.push(res.groups.name);\r\n  }\r\n  return names;\r\n}\r\n\r\n/**\r\n * Escapes a string so it can be used in a regular expression.\r\n */\r\nexport function regexEscapeString(str: string): string {\r\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\r\n}\r\n\r\n/**\r\n * Convert a regex for matching to a regex for validation.\r\n * @example ```js\r\n * const regexMatchDigits = /\\d/g;\r\n * const regexIsDigit = regexMatcherToValidater(regexMatchDigits); //=> /^\\d$/\r\n * const isDigit = (str) => regexIsDigit.test(str)\r\n * isDigit('1') //=> true\r\n * isDigit('a') //=> false\r\n * ```\r\n */\r\nexport function regexMatcherToValidater(regex: RegExp): RegExp {\r\n  return new RegExp(`^${regex.source}$`, regex.flags.replace('g', ''));\r\n}\r\n","// const REGEX_VALID_A = /^[A-Z]+$/g;\nconst alphaToColMap: Map<string, number> = new Map();\n\n/**\n * Convert spreadsheet column letter(s) to column-number\n * @param A - Column letter\n * @param zeroIndexed - Whether or not column number start at one or zero.\n */\nexport function letterToCol(A: string, zeroIndexed = false): number {\n  A = A.toUpperCase();\n  const fromMem = alphaToColMap.get(A);\n  if (fromMem) return fromMem;\n  // if (REGEX_VALID_A.test(A)) throw new Error(`Invalid column letter: ${A}`);\n  let col = 0;\n  const length = A.length;\n  for (let i = 0; i < length; i++) {\n    col += (A.charCodeAt(i) - 64) * Math.pow(26, length - i - 1);\n  }\n  return col - (zeroIndexed ? 1 : 0);\n}\n","import { rexec } from '../../regex';\nimport { letterToCol } from './letterToCol';\n\nconst REGEX_VALID_A1 = /^(?<a>[A-Z]+)(?<n>[1-9]+)$/g;\n\n/**\n * Convert spreadsheet A1-notation to [column, row].\n * @param A1 - A1-notation string.\n * @param zeroIndexed - Whether or not column and row numbers start at one or zero.\n */\nexport function A1ToColRow(A1: string, zeroIndexed = false): Array<number> {\n  A1 = A1.toUpperCase();\n  const matches = [...rexec(REGEX_VALID_A1, A1)];\n  if (!matches.length) throw new Error(`Invalid A1 string: ${A1}`);\n  const adjust = zeroIndexed ? 1 : 0;\n  return [\n    letterToCol(matches[0].groups.a) - adjust,\n    parseInt(matches[0].groups.n) - adjust,\n  ];\n}\n","const colToAlphaMap: Map<number, string> = new Map();\n\n/**\n * Convert a spreadsheet column number to a column letter.\n * @param col - Column number\n * @param zeroIndexed - Whether or not column number start at one or zero.\n */\nexport function colToLetter(col: number, zeroIndexed = false): string {\n  if (zeroIndexed) col++;\n  const fromMem = colToAlphaMap.get(col);\n  if (fromMem) return fromMem;\n  if (!Number.isInteger(col))\n    throw new Error(`Expected col to be an integer. Got: ${col}`);\n  if (col < 1)\n    throw new Error(`Expected col to be greater than zero. Got: ${col}`);\n  let letter = '';\n  let temp;\n  while (col > 0) {\n    temp = (col - 1) % 26;\n    letter = String.fromCharCode(temp + 65) + letter;\n    col = (col - temp - 1) / 26;\n  }\n  return letter;\n}\n","import { colToLetter } from './colToLetter';\n\n/**\n * Convert spreadsheet [column, row] to A1-notation.\n * @param CR - [column, row]\n * @param zeroIndexed - Whether or not column number start at one or zero.\n */\nexport function colRowToA1(CR: Array<number>, zeroIndexed = false): string {\n  if (CR.length !== 2)\n    throw new Error(`Expected CR to to be length 2. Got: ${CR.length}`);\n  if (!Number.isInteger(CR[1]))\n    throw new Error(`Expected row to be an integer. Got: ${CR[1]}`);\n  if (CR[1] < 1)\n    throw new Error(`Expected row to be greater than zero. Got: ${CR[1]}`);\n  return colToLetter(CR[0], zeroIndexed) + CR[1].toString();\n}\n","import { IRevivableJSON } from '../';\nimport { arr2dToCSV, arrEvery, arrMapMutable } from '../../array';\nimport { Base } from '../../Base';\nimport { A1ToColRow } from '../../spreadsheet';\nimport { letterToCol } from '../../spreadsheet/src/letterToCol';\n\n/**\n * Constructor options for the Table class.\n */\nexport interface ITableOptions<T> {\n  /**\n   * 2D array to build table from.\n   * All rows must be the same length.\n   * When using this option, the 'columns' and 'rows' options are not allowed.\n   */\n  data?: Array<Array<T>>;\n  /**\n   * Intepret the first row of passed data as column headers/names (see TableOptions.data property).\n   * When performing lookups in the table from indices or coordinates, headers are ignored, ie. not counted.\n   * If the 'data' option is not used, this option is not allowed.\n   * If the 'columnHeaders' option is used, this option is not allowed.\n   */\n  extractColumnHeaders?: boolean;\n  /**\n   * Intepret the first element of every row of passed data as row headers/names (see TableOptions.data property).\n   * When performing lookups in the table from indices or coordinates, headers are ignored, ie. not counted.\n   * If the 'data' option is not used, this option is not allowed.\n   * If the 'rowHeaders' option is used, this option is not allowed.\n   */\n  extractRowHeaders?: boolean;\n  /**\n   * Define column headers/names.\n   * Must be of same length as entered in the 'columns' option.\n   * When performing lookups in the table from indices or coordinates, headers are ignored, ie. not counted.\n   * When using row headers simultaneously, this array will need to be of length one higher as the first element is intepreted as the column header for the row headers column.\n   */\n  columnHeaders?: Array<string>;\n  /**\n   * Define column headers/names.\n   * Must be of same length as entered in the 'columns' option.\n   * When performing lookups in the table from indices or coordinates, headers are ignored, ie. not counted.\n   */\n  rowHeaders?: Array<string>;\n  /**\n   * Number of columns in the table.\n   * This option is not allowed when the 'data' or 'columnHeaders' properties are being used.\n   * TypeScript: Type safety consideration: Please note that when initializing an empty Table, it is full of 'undefined' values even if the table is specifically typed to not allow 'undefined'. TypeScript's static type-checking cannot see this.\n   */\n  columns?: number;\n  /**\n   * Number of rows in the table.\n   * This option is not allowed when the 'data' or 'rowHeaders' properties are being used.\n   * TypeScript: Type safety consideration: Please note that when initializing an empty Table, it is full of 'undefined' values even if the table is specifically typed to not allow 'undefined'. TypeScript's static type-checking cannot see this.\n   */\n  rows?: number;\n}\n\nexport type TableSerializedForm<T> = {\n  columnHeaders: Array<string>;\n  rowHeaders: Array<string>;\n  data: Array<Array<T>>;\n};\n\n/**\n * Two-dimensional table class supporting column and row headers.\n */\nexport class Table<T> extends Base implements IRevivableJSON<TableSerializedForm<T>> {\n  protected _columnHeaders?: Array<string>;\n  protected _rowHeaders?: Array<string>;\n  protected _data: Array<Array<T>> = [];\n\n  /**\n   * Creates a Table instance from CSV string data.\n   * @param csv CSV data string\n   * @param delimiter csv delimiter\n   * @param options TableOptions constructor options.\n   */\n  public static fromCSV<T>(csv: string, delimiter = ';', options: ITableOptions<T | string> = {}): Table<T | string> {\n    options.data = csv\n      .split('\\n')\n      .filter((line) => line.length)\n      .map((line) => line.trim().split(delimiter));\n    return new Table(options);\n  }\n\n  /**\n   * Revive a stringified Table object.\n   * @param json a stringified Table object.\n   */\n  public static fromJSON<T>(json: string): Table<T> {\n    return new Table(JSON.parse(json));\n  }\n\n  constructor(options: ITableOptions<T> = {}) {\n    super();\n    this.validateOptions(options);\n    this.handleOptions(options);\n    this.validateData();\n    this.setNonEnumerablePrivateProperties();\n  }\n\n  /**\n   * Gets the number of cols in the table, not including headers.\n   */\n  public get columns(): number {\n    return this._data[0].length;\n  }\n\n  /**\n   * Gets the number of rows in the table, not including headers.\n   */\n  public get rows(): number {\n    return this._data.length;\n  }\n\n  /**\n   * Gets the column headers.\n   */\n  public get columnHeaders(): Array<string> {\n    if (!this._columnHeaders) {\n      throw new Error('No column headers are defined for this table.');\n    }\n    return this._columnHeaders ? this._columnHeaders.slice() : [];\n  }\n\n  /**\n   * Gets the row headers.\n   */\n  public get rowHeaders(): Array<string> {\n    if (!this._rowHeaders) {\n      throw new Error('No row headers are defined for this table.');\n    }\n    return this._rowHeaders ? this._rowHeaders.slice() : [];\n  }\n\n  /**\n   * Returns a value at a given (row, col) position.\n   * @param column Column index\n   * @param row Row index\n   * @param spreadsheetNotation Interpret row and col as spreadsheet coordinates, eg. (\"A\",\"1\")\n   */\n  public get(column: number | string, row: number | string, spreadsheetNotation = false): T {\n    [column, row] = this.normalizeColRow(column, row, spreadsheetNotation);\n    return this._data[row][column];\n  }\n\n  /**\n   * Inserts a given value at a given (row, col) position.\n   * @param column Column index\n   * @param row Row index\n   * @param value The value to insert\n   * @param spreadsheetNotation Interpret row and col as spreadsheet coordinates, eg. (\"A\",\"1\")\n   */\n  public set(column: number | string, row: number | string, value: T, spreadsheetNotation = false): Table<T> {\n    [column, row] = this.normalizeColRow(column, row, spreadsheetNotation);\n    this._data[row][column] = value;\n    return this;\n  }\n\n  /**\n   * Deletes a column in the table.\n   * @param column Column index\n   * @param spreadsheetNotation Interpret row and col as spreadsheet coordinates, eg. (\"A\",\"1\")\n   */\n  public removeColumn(column: number | string, spreadsheetNotation = false): Table<T> {\n    column = this.normalizeCol(column, spreadsheetNotation);\n    arrMapMutable(this._data, (row) => {\n      row.splice(column, 1);\n      return row;\n    });\n    if (this._columnHeaders) {\n      this._columnHeaders.splice(column + (this._rowHeaders ? 1 : 0), 1);\n    }\n    return this;\n  }\n\n  /**\n   * Deletes a row in the table.\n   * @param row Row index\n   * @param spreadsheetNotation Interpret row and col as spreadsheet coordinates, eg. (\"A\",\"1\")\n   */\n  public removeRow(row: number | string, spreadsheetNotation = false): Table<T> {\n    row = this.normalizeRow(row, spreadsheetNotation);\n    this._data.splice(row, 1);\n    if (this._rowHeaders) this._rowHeaders.splice(row, 1);\n    return this;\n  }\n\n  /**\n   * Gets the index of a given column header.\n   * Even if row headers are defined, this is not considered a column and is ignored in this search.\n   */\n  public indexOfColumnHeader(header: string): number {\n    if (!this._columnHeaders) {\n      throw new Error('No column headers are defined for this table.');\n    }\n    return this._columnHeaders.indexOf(header) - (this._rowHeaders ? 1 : 0);\n  }\n\n  /**\n   * Gets the index of a given row header.\n   */\n  public indexOfRowHeader(header: string): number {\n    if (!this._rowHeaders) {\n      throw new Error('No row headers are defined for this table.');\n    }\n    return this._rowHeaders.indexOf(header);\n  }\n\n  /**\n   * Returns the table as a two-dimensional array, including row and column headers..\n   */\n  public toArray(): Array<Array<T | string>> {\n    const result: Array<Array<T | string>> = [];\n    if (this._columnHeaders) {\n      result.push(this.columnHeaders);\n    }\n    for (let i = 0; i < this.rows; i++) {\n      const row: Array<T | string> = this._data[i].slice();\n      if (this._rowHeaders) row.unshift(this._rowHeaders[i]);\n      result.push(row);\n    }\n    return result;\n  }\n\n  /**\n   * Returns the table as a two-dimensional array, without row and column headers.\n   */\n  public toArrayDataOnly(): Array<Array<T>> {\n    const result: Array<Array<T>> = [];\n    for (let i = 0; i < this.rows; i++) {\n      result.push(this._data[i].slice());\n    }\n    return result;\n  }\n\n  /**\n   * Returns the table as a CSV string.\n   * @param delimiter csv delimiter\n   */\n  public toCSV(delimiter = ';'): string {\n    return arr2dToCSV(this.toArray(), delimiter);\n  }\n\n  /**\n   * Override of the native toJSON method. When parsing the returned json string, it can be revived as a Table object when using the static Table.fromJSON method.\n   */\n  public toJSON(): TableSerializedForm<T> {\n    return {\n      columnHeaders: this._columnHeaders || [],\n      rowHeaders: this._rowHeaders || [],\n      data: this._data,\n    };\n  }\n\n  protected validateOptions(options: ITableOptions<T>) {\n    this.assertNoAmbiguousOptions(options, [\n      ['extractColumnHeaders', 'columnHeaders'],\n      ['extractRowHeaders', 'rowHeaders'],\n      ['columns', 'data'],\n      ['rows', 'data'],\n      ['columns', 'columnHeaders'],\n      ['rows', 'rowHeaders'],\n    ]);\n    this.assertNoOptionsRequireMissingOptions(options, [\n      ['extractColumnHeaders', 'data'],\n      ['extractRowHeaders', 'data'],\n    ]);\n  }\n\n  protected handleOptions(options: ITableOptions<T>): void {\n    options = Object.assign({}, options);\n\n    if (options.extractColumnHeaders && options.data) {\n      options.data = options.data.slice();\n      options.columnHeaders = options.data.splice(0, 1)[0].map((h) => h + '');\n    }\n\n    if (options.extractRowHeaders && options.data) {\n      options.data = options.data.map((row) => row.slice());\n      options.rowHeaders = [];\n      for (let i = 0; i < options.data.length; i++) {\n        options.rowHeaders.push(options.data[i].splice(0, 1)[0] + '');\n      }\n    }\n\n    if (options.rowHeaders) {\n      this._rowHeaders = options.rowHeaders.slice();\n      options.rows = options.rowHeaders.length;\n    } else if (options.rows === undefined) {\n      options.rows = 1;\n    } else {\n      this.validateRowMin(options.rows);\n    }\n\n    if (options.columnHeaders) {\n      this._columnHeaders = options.columnHeaders.slice();\n      options.columns = options.columnHeaders.length - (options.rowHeaders ? 1 : 0);\n    } else if (options.columns === undefined) {\n      options.columns = 1;\n    } else {\n      this.validateColMin(options.columns);\n    }\n\n    if (options.data) {\n      for (let i = 0; i < options.data.length; i++) {\n        this._data.push(options.data[i].slice());\n      }\n    } else {\n      this.buildEmptyTableWithDimensions(options.rows, options.columns);\n    }\n  }\n\n  protected validateData(): void {\n    if (this._columnHeaders) {\n      const targetLength = this._columnHeaders.length - (this._rowHeaders ? 1 : 0);\n      if (\n        !arrEvery(\n          this._data.map((row) => row.length),\n          (rowLength) => rowLength === targetLength,\n        )\n      ) {\n        throw new Error('Expected all rows to be of same length.');\n      }\n    }\n    if (this._rowHeaders && this._rowHeaders.length !== this._data.length) {\n      throw new Error('Expected a row header for each row.');\n    }\n  }\n\n  protected buildEmptyTableWithDimensions(rows: number, cols: number): void {\n    for (let i = 0; i < rows; i++) {\n      this._data.push(new Array(cols));\n    }\n  }\n\n  protected validateRowMin(rows: number): void {\n    if (rows < 1) {\n      throw new Error('Expected rows to be integer larger than 0 but got: ' + rows);\n    }\n    if (!Number.isInteger(rows)) {\n      throw new Error('Expected rows to be integer an integer.');\n    }\n  }\n\n  protected validateColMin(cols: number): void {\n    if (cols < 1) {\n      throw new Error('Expected columns to be integer larger than 0 but got: ' + cols);\n    }\n    if (!Number.isInteger(cols)) {\n      throw new Error('Expected columns to be integer an integer.');\n    }\n  }\n\n  protected ensureValidRowIndex(row: number | string): number {\n    if (typeof row === 'string') {\n      if (!this._rowHeaders) {\n        throw new Error('Cannot pass row as string when no rowHeaders are defined.');\n      }\n      row = this._rowHeaders.indexOf(row);\n      if (row === -1) {\n        throw new Error('Row not found in rowHeaders.');\n      }\n    } else this.validateRowMin(row + 1);\n    return row;\n  }\n\n  protected ensureValidColIndex(col: number | string): number {\n    if (typeof col === 'string') {\n      if (!this._columnHeaders) {\n        throw new Error('Cannot pass col as string when no columnHeaders are defined.');\n      }\n      col = this._columnHeaders.indexOf(col) - (this._rowHeaders ? 1 : 0);\n      if (col < 0) {\n        throw new Error('Col not found in columnHeaders.');\n      }\n    } else this.validateColMin(col + 1);\n    return col;\n  }\n\n  protected normalizeCol(col: number | string, spreadsheetNotation: boolean): number {\n    if (spreadsheetNotation) {\n      col = letterToCol(String(col), true);\n    }\n    return this.ensureValidColIndex(col);\n  }\n\n  protected normalizeRow(row: number | string, spreadsheetNotation: boolean): number {\n    if (spreadsheetNotation) {\n      row = Number(row);\n    }\n    return this.ensureValidRowIndex(row);\n  }\n\n  protected normalizeColRow(col: number | string, row: number | string, spreadsheetNotation: boolean): number[] {\n    if (spreadsheetNotation) {\n      [col, row] = A1ToColRow(String(col) + String(row), true);\n    }\n    return [this.ensureValidColIndex(col), this.ensureValidRowIndex(row)];\n  }\n}\n","import { sort as timsort } from 'timsort';\nimport { Comparator, compareString, compareNumber, compareNumeric } from '../../sort';\n\nexport interface ISortedArrayOptions<T> {\n  data?: Iterable<T>;\n  compare?: Comparator;\n  allowDuplicates?: boolean;\n}\n\nexport class SortedArray<T> extends Array {\n  private compare: Comparator = compareString;\n  private compareFound = false;\n  private allowDuplicates = true;\n\n  constructor(options: ISortedArrayOptions<T> = {}) {\n    super();\n    Object.defineProperty(this, 'compare', { enumerable: false });\n    Object.defineProperty(this, 'compareFound', { enumerable: false });\n    Object.defineProperty(this, 'allowDuplicates', { enumerable: false });\n    if (options.compare) {\n      this.compare = options.compare;\n      this.compareFound = true;\n    }\n    if (options.data) {\n      for (const e of options.data) {\n        this.push(e);\n      }\n      if (!this.compareFound && this.length && typeof this[0] !== 'string') {\n        this.compare = compareNumeric;\n        this.compareFound = true;\n      }\n      timsort(this, this.compare);\n    }\n    if (options.allowDuplicates === false) {\n      this.allowDuplicates = false;\n      this.unique();\n    }\n  }\n\n  /**\n   * Convert to a normal Array instance\n   */\n  public toArray(): Array<T> {\n    return Array.from(this);\n  }\n\n  public add(element: T): SortedArray<T> {\n    if (!this.compareFound) {\n      if (typeof element !== 'string') {\n        this.compare = compareNumeric;\n        this.compareFound = true;\n      }\n    }\n    if (this.length === 0) {\n      this.push(element);\n      return this;\n    }\n    const [index, foundIdentical] = this.insertionIndex(element);\n    if (foundIdentical && !this.allowDuplicates) return this;\n    this.splice(index, 0, element);\n    return this;\n  }\n\n  /**\n   * Add elements to the sorted array.\n   * @param elements - The elements to add to the sorted array\n   */\n  public addMany(...elements: T[]): SortedArray<T> {\n    if (elements.length === 0) return this;\n    for (const e of elements) {\n      this.add(e);\n    }\n    return this;\n  }\n\n  /**\n   * Remove all duplicate elements in the sorted array, leaving only unique values. Equality is determined by the compare function.\n   */\n  public unique(): SortedArray<T> {\n    let len = this.length;\n    if (len <= 1) return this;\n    for (let prev, curr, i = 1; i < len; i++) {\n      prev = this[i - 1];\n      curr = this[i];\n      if (this.compare(prev, curr) === 0) {\n        this.splice(i, 1);\n        len--;\n        i--;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Returns a tuple containing the index of where to add an element to keep the array sorted and also whether an identical element was found.\n   * @param element - The element for which to find its insertion index\n   */\n  public insertionIndex(element: T): [number, boolean] {\n    if (this.length === 0) return [0, false];\n    let low = 0;\n    let high = this.length;\n    while (low < high) {\n      const mid = (low + high) >>> 1;\n      const order = this.compare(this[mid], element);\n      if (order === 0) return [mid, true];\n      if (order < 0) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n    return [low, false];\n  }\n\n  /**\n   * Returns a tuple containing the first index of where to add an element to keep the array sorted and also whether an identical element was found.\n   * @param element - The element for which to find its insertion index\n   */\n  public firstInsertionIndex(element: T): [number, boolean] {\n    const [index, foundIdentical] = this.insertionIndex(element);\n    if (!foundIdentical) return [index, foundIdentical];\n    let i = index - 1;\n    while (i >= 0) {\n      if (this.compare(this[i], element) !== 0) {\n        return [i + 1, foundIdentical];\n      }\n      i--;\n    }\n    return [0, foundIdentical];\n  }\n\n  /**\n   * Returns a tuple containing the last index of where to add an element to keep the array sorted and also whether an identical element was found.\n   * @param element - The element for which to find its insertion index\n   */\n  public lastInsertionIndex(element: T): [number, boolean] {\n    const [index, foundIdentical] = this.insertionIndex(element);\n    if (!foundIdentical) return [index, foundIdentical];\n    let i = index + 1;\n    while (i < this.length) {\n      if (this.compare(this[i], element) !== 0) {\n        return [i, foundIdentical];\n      }\n      i++;\n    }\n    return [this.length, foundIdentical];\n  }\n\n  /**\n   * Returns the index of the first element found that is determined equal by the compare function.\n   * @param element - The element to find\n   */\n  public indexOfCompare(element: T): number {\n    if (this.length === 0) return -1;\n    if (this.length === 1) return this.compare(this[0], element) === 0 ? 0 : -1;\n    const [index, foundIdentical] = this.insertionIndex(element);\n    return foundIdentical ? index : -1;\n  }\n\n  /**\n   * Returns the index of the first element that is determined equal by the compare function.\n   * @param element - The element to find\n   */\n  public firstIndexOfCompare(element: T): number {\n    if (this.length === 0) return -1;\n    if (this.length === 1) return this.compare(this[0], element) === 0 ? 0 : -1;\n    const [index, foundIdentical] = this.firstInsertionIndex(element);\n    return foundIdentical ? index : -1;\n  }\n\n  /**\n   * Returns the index of the last element that is determined equal by the compare function.\n   * @param element - The element to find\n   */\n  public lastIndexOfCompare(element: T): number {\n    if (this.length === 0) return -1;\n    if (this.length === 1) return this.compare(this[0], element) === 0 ? 0 : -1;\n    const [index, foundIdentical] = this.lastInsertionIndex(element);\n    return foundIdentical ? index - 1 : -1;\n  }\n\n  /**\n   * Returns all indices at which element exists. Equality is determined by the compare function.\n   * @param element - The element to find\n   */\n  public indicesOfCompare(element: T): Array<number> {\n    const index = this.indexOfCompare(element);\n    if (index === -1) return [];\n    const result: Array<number> = [];\n    if (!this.allowDuplicates) return result;\n    let i = index - 1;\n    while (i >= 0) {\n      if (this.compare(this[i], element) === 0) {\n        result.push(i);\n      } else {\n        break;\n      }\n      i--;\n    }\n    result.push(index);\n    i = index + 1;\n    while (i < this.length) {\n      if (this.compare(this[i], element) === 0) {\n        result.push(i);\n      } else {\n        break;\n      }\n      i++;\n    }\n    result.sort(compareNumber);\n    return result;\n  }\n\n  /**\n   * Returns the interestion of this and another sorted array.\n   * @param sorted - another sorted array with which to find intersections\n   */\n  public intersection(sorted: Array<T>): Array<T> {\n    const result = [];\n    let i1 = 0;\n    let i2 = 0;\n    // if a1 curr < a2 curr, loop a1 elems until a1 curr >= a2 curr\n    while (i1 < this.length && i2 < sorted.length) {\n      if (this.compare(this[i1], sorted[i2]) < 0) {\n        i1++;\n      } else if (this.compare(this[i1], sorted[i2]) === 0) {\n        result.push(this[i1]);\n        i1++;\n        i2++;\n      } else {\n        i2++;\n      }\n    }\n    return result;\n  }\n}\n","/**\n * Check if a given month number is valid.\n */\nexport function isValidDateMonth(month: number): boolean {\n  return Number.isInteger(month) && month >= 1 && month <= 12;\n}\n","import { isValidDateMonth } from './isValidDateMonth';\n\n/**\n * Throws error if the given month is invalid.\n */\nexport function assertValidDateMonth(month: number): void {\n  if (!isValidDateMonth(month)) throw new Error(`Invalid month: ${month}.`);\n}\n","/**\n * Checks if the given year is a valid year > 0.\n */\nexport function isValidDateYear(year: number): boolean {\n  return Number.isInteger(year) && year >= 0;\n}\n","import { isValidDateYear } from './isValidDateYear';\n\n/**\n * Throws if the given year is invalid.\n */\nexport function assertValidDateYear(year: number): void {\n  if (!isValidDateYear(year)) throw new Error(`Invalid year: ${year}.`);\n}\n","import { assertValidDateYear } from './assertValidDateYear';\n\n/**\n * Check whether a given year is a leap year.\n */\nexport function isLeapYear(year: number): boolean {\n  assertValidDateYear(year);\n  return (0 == year % 4 && 0 != year % 100) || 0 == year % 400;\n}\n","import { assertValidDateMonth } from './assertValidDateMonth';\nimport { isLeapYear } from './isLeapYear';\n\nconst DAYS_IN_MONTH = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n/**\n * Get number of days that there are in a given month of a given year.\n * Note: The number of days in february depends on whether it is leap year. If no year is given, it is assumed that it is not leap year.\n */\nexport function numDaysInMonth(month: number, year?: number): number {\n  assertValidDateMonth(month);\n  return month === 2 && year !== undefined && isLeapYear(year) ? 29 : DAYS_IN_MONTH[month];\n}\n","import { numDaysInMonth } from './numDaysInMonth';\n\n/**\n * Returns whether a day of month is a valid date for the given month and year.\n */\nexport function isValidDateDay(day: number, month: number, year?: number): boolean {\n  if (!Number.isInteger(day)) return false;\n  if (day < 1) return false;\n  if (day > numDaysInMonth(month, year)) return false;\n  return true;\n}\n","import { isValidDateDay } from './isValidDateDay';\n\n/**\n * Throws an error if the day of the month is invalid.\n */\nexport function assertValidDateDay(day: number, month: number, year?: number): void {\n  if (!isValidDateDay(day, month, year)) throw new Error(`Invalid day of the month: ${day}.`);\n}\n","import { assertValidDateYear } from './assertValidDateYear';\n\n/**\n * Get century from year.\n * @example\n * ```js\n * getCentury(2009);\n * //=> 21\n * ```\n */\nexport function getCentury(year: number): number {\n  assertValidDateYear(year);\n  return Math.floor(year / 100) + 1;\n}\n","/**\n * Returns the current year (UTC full year).\n */\nexport function getCurrentYear(): number {\n  return new Date().getUTCFullYear();\n}\n","/**\n * Converts the table element's data content to a 2-dimensional array.\n * @param {HTMLElement} element - The table element\n * @param {boolean} headers - Whether to extract table column header data from <th> elements.\n * @returns {Array<Array<string>>} Data table which is an arrays of row-arrays of cell content (string).\n */\nexport function htmlTableTo2dArray(\n  element: HTMLTableElement,\n  headers = true,\n): Array<Array<string>> {\n  const result = [];\n  const htmlRows = element.querySelectorAll('tr');\n  for (let i = 0; i < htmlRows.length; i++) {\n    const htmlRow = htmlRows[i];\n    const row = [];\n    const htmlCells = htmlRow.querySelectorAll(headers ? 'th,td' : 'td');\n    for (let j = 0; j < htmlCells.length; j++) {\n      const htmlCell = htmlCells[j] as HTMLElement;\n      row.push(htmlCell.innerText.trim());\n    }\n    if (!headers) {\n      if (htmlRow.querySelectorAll('th').length) {\n        continue;\n      }\n    }\n    if (row.length) {\n      result.push(row);\n    }\n  }\n  return result;\n}\n","class Sudoku {\n  public sudoku: Array<Array<number | undefined>>;\n  protected candidates: Array<Array<Set<number>>>;\n  protected isGuess: boolean;\n\n  constructor(sudoku: Array<Array<number | undefined>>, candidates?: Array<Array<Set<number>>>, isGuess = false) {\n    if (!isGuess) {\n      if (sudoku.length !== 9) throw Error('Expected sudoku to be a 9x9 array of integers between 1 and 9.');\n      for (const row of sudoku) {\n        if (row.length !== 9) throw Error('Expected sudoku to be a 9x9 array of integers between 1 and 9.');\n        for (const cell of row) {\n          if (cell !== undefined && (!Number.isInteger(cell) || cell < 1 || cell > 9)) {\n            throw Error('Expected sudoku to be a 9x9 array of integers between 1 and 9.');\n          }\n        }\n      }\n    }\n    this.sudoku = [];\n    for (let i = 0; i <= 8; i++) {\n      this.sudoku[i] = sudoku[i].slice();\n    }\n    if (candidates) {\n      this.candidates = candidates.map((row) => row.map((set) => new Set(set)));\n    } else {\n      this.candidates = [];\n      for (let r = 0; r <= 8; r++) {\n        this.candidates[r] = [];\n        for (let c = 0; c <= 8; c++) {\n          if (this.sudoku[r][c] === undefined) {\n            this.candidates[r][c] = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n          } else {\n            this.candidates[r][c] = new Set([]);\n          }\n        }\n      }\n    }\n    this.isGuess = isGuess;\n  }\n\n  protected *itRow(r: number): Generator<number | undefined> {\n    for (let c = 0; c <= 8; c++) {\n      yield this.sudoku[r][c];\n    }\n  }\n\n  protected *itRows(): Generator<Generator<number | undefined>> {\n    for (let r = 0; r <= 8; r++) {\n      yield this.itRow(r);\n    }\n  }\n\n  protected *itCol(c: number): Generator<number | undefined> {\n    for (let r = 0; r <= 8; r++) {\n      yield this.sudoku[r][c];\n    }\n  }\n\n  protected *itCols(): Generator<Generator<number | undefined>> {\n    for (let c = 0; c <= 8; c++) {\n      yield this.itCol(c);\n    }\n  }\n\n  protected *itNonant(r: number, c: number): Generator<number | undefined> {\n    const row = r < 3 ? 0 : r < 6 ? 3 : 6;\n    const col = c < 3 ? 0 : c < 6 ? 3 : 6;\n    for (let r = row; r < row + 3; r++) {\n      for (let c = col; c < col + 3; c++) {\n        yield this.sudoku[r][c];\n      }\n    }\n  }\n\n  protected *itNonants(): Generator<Generator<number | undefined>> {\n    yield this.itNonant(0, 0);\n    yield this.itNonant(0, 3);\n    yield this.itNonant(0, 6);\n    yield this.itNonant(3, 0);\n    yield this.itNonant(3, 3);\n    yield this.itNonant(3, 6);\n    yield this.itNonant(6, 0);\n    yield this.itNonant(6, 3);\n    yield this.itNonant(6, 6);\n  }\n\n  protected *itAllSeries(): Generator<Generator<number | undefined>> {\n    yield* this.itRows();\n    yield* this.itCols();\n    yield* this.itNonants();\n  }\n\n  protected isCompleteSeries(itSeries: Generator<number | undefined>): boolean {\n    const seen = new Set();\n    for (const v of itSeries) {\n      if (v === undefined) return false;\n      if (!seen.has(v)) {\n        seen.add(v);\n      } else {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  protected isCompleteSudoku(): boolean {\n    for (const itSeries of this.itAllSeries()) {\n      if (!this.isCompleteSeries(itSeries)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  protected solveAt(row: number, col: number): boolean {\n    if (this.sudoku[row][col] !== undefined) return false;\n    const candidates = this.candidates[row][col];\n    for (let i = 0; i <= 8; i++) {\n      const v1 = this.sudoku[row][i];\n      if (v1 !== undefined) {\n        candidates.delete(v1);\n      }\n      const v2 = this.sudoku[i][col];\n      if (v2 !== undefined) {\n        candidates.delete(v2);\n      }\n    }\n    for (const v of this.itNonant(row, col)) {\n      if (v !== undefined) {\n        candidates.delete(v);\n      }\n    }\n    if (candidates.size === 1) {\n      this.sudoku[row][col] = candidates.values().next().value;\n      const v = this.sudoku[row][col];\n      if (v !== undefined) {\n        candidates.delete(v);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  public solve(): boolean {\n    let foundAnswer = false;\n    const tryAll = () => {\n      for (let r = 0; r <= 8; r++) {\n        for (let c = 0; c <= 8; c++) {\n          if (this.solveAt(r, c)) {\n            foundAnswer = true;\n          }\n        }\n      }\n    };\n    tryAll();\n    tryAll();\n    if (foundAnswer) {\n      return this.solve();\n    } else if (!this.isCompleteSudoku()) {\n      for (let maxCandidates = 2; maxCandidates <= 9; maxCandidates++) {\n        for (let r = 0; r <= 8; r++) {\n          for (let c = 0; c <= 8; c++) {\n            if (this.candidates[r][c].size === maxCandidates) {\n              const guess = this.candidates[r][c].values().next().value;\n              this.candidates[r][c].delete(guess);\n              const newSudoku = new Sudoku(this.sudoku, this.candidates, true);\n              newSudoku.sudoku[r][c] = guess;\n              newSudoku.candidates[r][c] = new Set();\n              const successful = newSudoku.solve();\n              if (successful) {\n                this.sudoku = newSudoku.sudoku;\n                this.candidates = newSudoku.candidates;\n              }\n              return this.solve();\n            }\n          }\n        }\n      }\n      if (!this.isGuess) {\n        this.print();\n        throw Error('Sudoku is invalid and cannot be solved.');\n      }\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  public print(): void {\n    console.log('-------------------');\n    for (let r = 0; r <= 8; r++) {\n      console.log('|' + this.sudoku[r].map((v) => (v === undefined ? ' ' : v)).join('|') + '|');\n    }\n    console.log('-------------------');\n  }\n}\n\nexport function solveSudoku(sudoku: Array<Array<number | undefined>>): Sudoku {\n  const instance = new Sudoku(sudoku);\n  instance.solve();\n  return instance;\n}\n","/**\n * Returns true if a given interger is even.\n */\nexport function isEven(n: number): boolean {\n  if (!Number.isInteger(n)) throw new Error(`Expected integer. Got ${n}`);\n  return n % 2 === 0;\n}\n","/**\n * Returns true if a given interger is odd.\n */\nexport function isOdd(n: number): boolean {\n  if (!Number.isInteger(n)) throw new Error(`Expected integer. Got ${n}`);\n  return n % 2 !== 0;\n}\n","const POW10 = [1, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9];\n\n/**\n * Approximate the logarithm base 10 of a small integer.\n */\nexport function numApproximateLog10(n: number): number {\n  if (!Number.isInteger(n) || n < 0 || n >= 1e10) {\n    throw new Error(`Expected positive integer smaller than 10^10. Got ${n}`);\n  }\n  if (n < POW10[5]) {\n    if (n < POW10[2]) {\n      return n < POW10[1] ? 0 : 1;\n    }\n    if (n < POW10[4]) {\n      return n < POW10[3] ? 2 : 3;\n    }\n    return 4;\n  }\n  if (n < POW10[7]) {\n    return n < POW10[6] ? 5 : 6;\n  }\n  if (n < POW10[9]) {\n    return n < POW10[8] ? 7 : 8;\n  }\n  return 9;\n}\n","import numberFormat from 'format-number';\n\nconst eu = new Map();\n\n/**\n * Formats a number input to a string representation in the style of 5.000.000,00\n * @param input number to format\n * @param decimalPlaces number of decimal places to return. Will pad string with zeroes to ensure this length.\n */\nexport function numFormatEU(input: number, decimalPlaces = 0): string {\n  let formatter = eu.get(decimalPlaces);\n  if (!formatter) {\n    formatter = numberFormat({\n      truncate: decimalPlaces,\n      padRight: decimalPlaces,\n      integerSeparator: '.',\n      decimal: ',',\n    });\n    eu.set(decimalPlaces, formatter);\n  }\n  return formatter(input);\n}\n","import numberFormat from 'format-number';\n\nconst us = new Map();\n/**\n * Formats a number input to a string representation in the style of 5,000,000.00\n * @param input number to format\n * @param decimalPlaces number of decimal places to return. Will pad string with zeroes to ensure this length.\n */\nexport function numFormatUS(input: number, decimalPlaces = 0): string {\n  let formatter = us.get(decimalPlaces);\n  if (!formatter) {\n    formatter = numberFormat({\n      truncate: decimalPlaces,\n      padRight: decimalPlaces,\n      integerSeparator: ',',\n      decimal: '.',\n    });\n    us.set(decimalPlaces, formatter);\n  }\n  return formatter(input);\n}\n","/**\n * Returns a random integer between min (inclusive) and max (inclusive).\n * @param min The lower bound integer.\n * @param max The upper bound integer.\n */\nexport function randomIntBetween(min: number, max: number): number {\n  if (!Number.isInteger(min)) throw new Error(`min must be an integer. Got ${min}`);\n  if (!Number.isInteger(max)) throw new Error(`max must be an integer. Got ${max}`);\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","/**\n * Round value with a given number of decimal points.\n * @param n the number to round.\n * @param decimalPoints the number of decimal points.\n */\nexport function round(n: number, decimalPoints = 0): number {\n  return Math.round(n * Math.pow(10, decimalPoints)) / Math.pow(10, decimalPoints) + 0;\n}\n","/**\n * Round number down to the nearest integer.\n */\nexport function roundDown(n: number): number {\n  return Math.floor(n);\n}\n","/**\n * Round number up to the nearest integer.\n */\nexport function roundUp(n: number): number {\n  return Math.ceil(n) + 0;\n}\n","import { isEven } from '../../number';\nimport { getCurrentYear, getCentury, assertValidDateDay, assertValidDateMonth } from '../../date';\nimport { regexMatcherToValidater } from '../../regex';\n\nexport const regexMatchSocialSecurityNumberDK = /(?<dd>[0-3][0-9])(?<mm>[0-1][0-9])(?<yy>[0-9]{2}).?(?<id>[0-9]{4})/g;\n\n/**\n * Extract birthdate (yyyy,mm,dd), four digit id and sex from a Danish social security number.\n * Assumes birth dates are at most 100 years in the past.\n */\nexport function parseSocialSecurityNumberDK(ssn: string): {\n  year: number;\n  month: number;\n  day: number;\n  id: number;\n  sex: string;\n} {\n  const match = ssn.match(regexMatcherToValidater(regexMatchSocialSecurityNumberDK));\n  if (!match || !match.groups)\n    throw new Error(`Invalid Danish social security number format. Expected ddmmyy[-]xxxx. Got: ${ssn}`);\n  const { dd, mm, yy, id } = match.groups;\n  const intDay = parseInt(dd);\n  const intMon = parseInt(mm);\n  const curYear = getCurrentYear();\n  const intYear =\n    parseInt(yy) > parseInt(String(curYear).substring(2))\n      ? parseInt(`${getCentury(curYear) - 2}${yy}`)\n      : parseInt(`${getCentury(curYear) - 1}${yy}`);\n  assertValidDateDay(intDay, intMon, intYear);\n  assertValidDateMonth(intMon);\n  const intId = parseInt(id);\n  const sex = isEven(parseInt(id.substring(3))) ? 'F' : 'M';\n  return {\n    year: intYear,\n    month: intMon,\n    day: intDay,\n    id: intId,\n    sex,\n  };\n}\n\n/**\n * Determine whether a string is a valid Danish social security number.\n */\nexport function isSocialSecurityNumberDK(s: string): boolean {\n  try {\n    parseSocialSecurityNumberDK(s);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n","import { regexEscapeString } from './regex';\r\n\r\n/**\r\n * Inserts a provided string before and after a string.\r\n * @param input - input string\r\n * @param wrap - string to place before and after\r\n * @example\r\n * ```js\r\n * expect(util.strWrapIn('input', '#')).toBe('#input#');\r\n * ```\r\n */\r\nexport function strWrapIn(input: string, wrap: string): string {\r\n  return wrap + input + wrap;\r\n}\r\n\r\n/**\r\n * Inserts provided strings before and after a string.\r\n * @param input - input string\r\n * @param before - string to place before\r\n * @param after - string to place after\r\n * @example\r\n * ```js\r\n * expect(util.strWrapBetween('input', '#', '&')).toBe('#input&');\r\n * ```\r\n */\r\nexport function strWrapBetween(\r\n  input: string,\r\n  before: string,\r\n  after: string,\r\n): string {\r\n  return before + input + after;\r\n}\r\n\r\n/**\r\n * Wraps a string in brackets.\r\n * @param input - input string\r\n * @example\r\n * ```js\r\n * expect(util.strWrapInBrackets('input')).toBe('[input]');\r\n * ```\r\n */\r\nexport function strWrapInBrackets(input: string): string {\r\n  return '[' + input + ']';\r\n}\r\n\r\n/**\r\n * Wraps a string in angle brackets.\r\n * @param input - input string\r\n * @example\r\n * ```js\r\n * expect(util.strWrapInAngleBrackets('input')).toBe('<input>');\r\n * ```\r\n */\r\nexport function strWrapInAngleBrackets(input: string): string {\r\n  return '<' + input + '>';\r\n}\r\n\r\n/**\r\n * Wraps a string in braces.\r\n * @param input - input string\r\n * @example\r\n * ```js\r\n * expect(util.strWrapInBraces('input')).toBe('{input}');\r\n * ```\r\n */\r\nexport function strWrapInBraces(input: string): string {\r\n  return '{' + input + '}';\r\n}\r\n\r\n/**\r\n * Wraps a string in parenthesis.\r\n * @param input - input string\r\n * @example\r\n * ```js\r\n * expect(util.strWrapInParenthesis('input')).toBe('(input)');\r\n * ```\r\n */\r\nexport function strWrapInParenthesis(input: string): string {\r\n  return '(' + input + ')';\r\n}\r\n\r\n/**\r\n * Wraps a string in parenthesis.\r\n * @param input - input string\r\n * @example\r\n * ```js\r\n * expect(util.strWrapInSingleQuotes('input')).toBe(\"'input'\");\r\n * ```\r\n */\r\nexport function strWrapInSingleQuotes(input: string): string {\r\n  return \"'\" + input + \"'\";\r\n}\r\n\r\n/**\r\n * Wraps a string in parenthesis.\r\n * @param input - input string\r\n * @example\r\n * ```js\r\n * expect(util.strWrapInDoubleQuotes('input')).toBe('\"input\"');\r\n * ```\r\n */\r\nexport function strWrapInDoubleQuotes(input: string): string {\r\n  return '\"' + input + '\"';\r\n}\r\n\r\n/**\r\n * Returns whether the string is lower case.\r\n * @param input - input string\r\n * @example\r\n * ```js\r\n * strIsLowerCase('abc')\r\n * //=> true\r\n *\r\n * strIsLowerCase('ABC')\r\n * //=> false\r\n * ```\r\n */\r\nexport function strIsLowerCase(input: string): boolean {\r\n  return input === input.toLowerCase();\r\n}\r\n\r\n/**\r\n * Returns whether the string is upper case.\r\n * @param input - input string\r\n * @example\r\n * ```js\r\n * strIsUpperCase('abc')\r\n * //=> false\r\n *\r\n * strIsUpperCase('ABC')\r\n * //=> true\r\n * ```\r\n */\r\nexport function strIsUpperCase(input: string): boolean {\r\n  return input === input.toUpperCase();\r\n}\r\n\r\n/**\r\n * Returns an array of words in the string\r\n * @param input - input string\r\n * @example\r\n * ```js\r\n * strToWords('How are you?')\r\n * //=> ['How', 'are', 'you']\r\n * ```\r\n */\r\nexport function strToWords(input: string): Array<string> {\r\n  return input.match(regexIsWord) || [];\r\n}\r\n\r\nconst regexIsNumber = /\\d((\\.|\\d)*)?/g;\r\nconst regexIsWord = /\\b[^\\W]+/g;\r\n/**\r\n * Returns an array of words in the string\r\n * @param input - input string\r\n * @example\r\n * ```js\r\n * strSplitWordByCamelCase('someCamelCase')\r\n * //=> ['some', 'Camel', 'Case']\r\n * ```\r\n */\r\nexport function strSplitWordByCamelCase(word: string): Array<string> {\r\n  function isCamelCaseWordBreakIndex(word: string, index: number) {\r\n    return (\r\n      strIsLowerCase(word[index - 1]) &&\r\n      strIsUpperCase(word[index]) &&\r\n      !regexIsNumber.test(word[index - 1]) &&\r\n      !regexIsNumber.test(word[index])\r\n    );\r\n  }\r\n  const result = [];\r\n  const lastCharIndex = word.length - 1;\r\n  let lastCamelCaseBreakIndex = 0;\r\n  let foundCamelCase = false;\r\n  for (let i = 1; i < word.length; i++) {\r\n    if (foundCamelCase && i === lastCharIndex) {\r\n      // last char\r\n      const sub = word.substring(lastCamelCaseBreakIndex);\r\n      if (sub) result.push(sub);\r\n      continue;\r\n    }\r\n    if (isCamelCaseWordBreakIndex(word, i)) {\r\n      const sub = word.substring(lastCamelCaseBreakIndex, i);\r\n      if (!sub) continue;\r\n      result.push(sub);\r\n      lastCamelCaseBreakIndex = i;\r\n      foundCamelCase = true;\r\n    }\r\n  }\r\n  // if no splits needed, just return the word as it was\r\n  if (!foundCamelCase) {\r\n    result.push(word);\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Count occurances of a character within a given string.\r\n * @param input - The string to search\r\n * @param char - The character to find\r\n */\r\nexport function strCountCharOccurances(input: string, char: string): number {\r\n  if (char.length !== 1) {\r\n    throw new Error(\r\n      'Expected char to be a single character string of length 1.',\r\n    );\r\n  }\r\n  let result = 0;\r\n  for (const c of input) {\r\n    if (c === char) {\r\n      result++;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Returns a given number of contatenations of a given input string.\r\n * @param input - input string\r\n * @param n - Number of repetitions of the input string\r\n */\r\nexport function strRepeat(input: string, n: number): string {\r\n  return new Array(n).fill(input).join('');\r\n}\r\n\r\n/**\r\n * Takes a multiline string and performs a left side trim of whitespace on each line.\r\n * @param input - input string\r\n */\r\nexport function strLinesTrimLeft(input: string): string {\r\n  return input.replace(/\\n\\r?\\s+/gm, '\\n');\r\n}\r\n\r\n/**\r\n * Takes a multiline string and performs a right side trim of whitespace on each line.\r\n * @param input - input string\r\n */\r\nexport function strLinesTrimRight(input: string): string {\r\n  return input.replace(/\\s+\\n/gm, '\\n');\r\n}\r\n\r\n/**\r\n * Takes a multiline string and removes lines that are empty or only contain whitespace.\r\n * @param input - input string\r\n */\r\nexport function strLinesRemoveEmpty(input: string): string {\r\n  return input\r\n    .replace(/\\n\\r?\\s*\\n\\r?/gm, '\\n')\r\n    .trimStart()\r\n    .trimEnd();\r\n}\r\n\r\n/**\r\n * Very crude, simple, fast code formatting of minified code.\r\n * Only works when input code:\r\n * - is minified\r\n * - is scoped with brackets\r\n * - expressions end with semicolon\r\n * - has no string literals containing any of these characters: '{', '}', ';'.\r\n * @param input The minified source code\r\n * @param indent The string to use as indentation\r\n */\r\nexport function strPrettifyMinifiedCode(input: string, indent = '  '): string {\r\n  const getIndents = (n: number) => strRepeat('\\t', n);\r\n  const fixIndents = (s: string) => {\r\n    return s.replace(/\\t +/g, '\\t').replace(/\\t/g, indent);\r\n  };\r\n  let depth = 0;\r\n  const arr = Array.from(input).map((c) => {\r\n    if (c === '{') {\r\n      depth++;\r\n      return '{\\n' + getIndents(depth);\r\n    } else if (c === '}') {\r\n      depth--;\r\n      return '\\n' + getIndents(depth) + '}\\n' + getIndents(depth);\r\n    } else if (c === ';') {\r\n      return ';\\n' + getIndents(depth);\r\n    } else return c;\r\n  });\r\n  return fixIndents(strLinesTrimRight(strLinesRemoveEmpty(arr.join(''))));\r\n}\r\n\r\n/**\r\n * In a given string, replace all occurances of a given search string with a given replacement string.\r\n * @param input input string\r\n * @param replace string to find a replace\r\n * @param replaceWith string to replace matches with\r\n * @param flags RegExp flags as single string.\r\n */\r\nexport function strReplaceAll(\r\n  input: string,\r\n  replace: string,\r\n  replaceWith: string,\r\n  flags = 'g',\r\n): string {\r\n  return input.replace(\r\n    new RegExp(regexEscapeString(replace), flags),\r\n    replaceWith,\r\n  );\r\n}\r\n","import Path from 'path';\r\nimport fs from 'fs';\r\nimport { numFormatUS } from './number';\r\nimport { numFormatEU } from './number';\r\nimport { strCountCharOccurances } from './string';\r\n\r\nexport type MemoryUsageValues = {\r\n  processAllocationMB: number;\r\n  heapAllocationMB: number;\r\n  heapUsedMB: number;\r\n  extenalV8: number;\r\n};\r\n\r\nexport type MemoryUsageValuesFormatted = {\r\n  processAllocationMB: string;\r\n  heapAllocationMB: string;\r\n  heapUsedMB: string;\r\n  extenalV8: string;\r\n};\r\n\r\nconst toIntMB = (n: number) => Math.floor(n * 0.000001);\r\n\r\nconst getMemoryUsageFormatted = (format: (n: number) => string): MemoryUsageValuesFormatted => {\r\n  const data = process.memoryUsage();\r\n  return {\r\n    processAllocationMB: format(data.rss),\r\n    heapAllocationMB: format(data.heapTotal),\r\n    heapUsedMB: format(data.heapUsed),\r\n    extenalV8: format(data.external),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns an object about the process memory usage for: process allocation, heap allocation, heap, v8.\r\n */\r\nexport function getMemoryUsage(): MemoryUsageValues {\r\n  const data = process.memoryUsage();\r\n  return {\r\n    processAllocationMB: toIntMB(data.rss),\r\n    heapAllocationMB: toIntMB(data.heapTotal),\r\n    heapUsedMB: toIntMB(data.heapUsed),\r\n    extenalV8: toIntMB(data.external),\r\n  };\r\n}\r\n\r\n/**\r\n * Returns an object about the process memory usage for: process allocation, heap allocation, heap, v8.\r\n * The values are formatted strings in the style of 5.000,00\r\n */\r\nexport function getMemoryUsageFormattedEU(): MemoryUsageValuesFormatted {\r\n  return getMemoryUsageFormatted((bytes: number) => `${numFormatEU(bytes * 0.000001, 2)} MB`);\r\n}\r\n\r\n/**\r\n * Returns an object about the process memory usage for: process allocation, heap allocation, heap, v8.\r\n * The values are formatted strings in the style of 5,000.00\r\n */\r\nexport function getMemoryUsageFormattedUS(): MemoryUsageValuesFormatted {\r\n  return getMemoryUsageFormatted((bytes: number) => `${numFormatUS(bytes * 0.000001, 2)} MB`);\r\n}\r\n\r\n/**\r\n * Takes a directory path as a list of directory/folder names from the current working directory and returns it as a full path string.\r\n * @param dirs directory names from the current working directory.\r\n */\r\nexport function getWorkingDirPath(...dirs: Array<string>): string {\r\n  return Path.join(process.cwd(), ...dirs);\r\n}\r\n\r\n/**\r\n * Takes a filepath and returns its utf8 contents as a single string.\r\n * @param path path to the file\r\n */\r\nexport function readFileStringSync(path: string): string {\r\n  return fs.readFileSync(path, 'utf8').toString();\r\n}\r\n\r\n/**\r\n * Normalize a file extension to the form: .[ext]\r\n * Anything before the last \".\" is not returned.\r\n * @param ext file extension\r\n */\r\nexport function normalizeFileExtension(ext: string): string {\r\n  if (ext === '' || ext === '.') return '';\r\n  if (/[<>\"|?*:]/g.test(ext)) {\r\n    throw new Error(`Illegal characters in file extension: ${ext}  |  Illegal characters are: <>\"|?:*`);\r\n  }\r\n  if (strCountCharOccurances(ext, '.') === 0) return '.' + ext;\r\n  return ext.substring(ext.lastIndexOf('.'));\r\n}\r\n\r\n/**\r\n * Takes a list of file extensions and returns a filter function that returns true if a filepath/filename passed to it contains one of the given file extensions.\r\n * @param fileExtensions file extensions\r\n */\r\nexport function createFileExtensionFilter(...fileExtensions: Array<string>): (filepath: string) => boolean {\r\n  if (!fileExtensions.length) return () => true;\r\n  return (filepath: string) => {\r\n    for (const ext of fileExtensions.map(normalizeFileExtension)) {\r\n      if (Path.extname(filepath) === ext) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n}\r\n\r\nexport type ensureValidWindowsPathOptions = {\r\n  extendedMaxLength?: boolean;\r\n  assert?: boolean;\r\n};\r\n\r\n/**\r\n * Check whether a provided windows filesystem path string is valid according to:\r\n * https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx\r\n * @param path The path to validate\r\n * @param extendedMaxLength On most versions of windows, the max allowed length of paths has been\r\n * raised.\r\n */\r\nexport function ensureValidWindowsPath(path: string, options?: ensureValidWindowsPathOptions): boolean {\r\n  const throwOrFalse = (msg: string) => {\r\n    if (options && options.assert === true) {\r\n      throw new Error(`Invalid windows path. ${msg}  |  input received: ${path}`);\r\n    }\r\n    return false;\r\n  };\r\n\r\n  if (path.length === 0) {\r\n    return throwOrFalse('Path string is length 0.');\r\n  }\r\n\r\n  if (strCountCharOccurances(path, '/') > 0 && strCountCharOccurances(path, '\\\\') > 0) {\r\n    return throwOrFalse('Path contains both backslash and forward slash.');\r\n  }\r\n\r\n  const maxLength = (options && options.extendedMaxLength ? 32767 : 260) - 12;\r\n  if (path.length > maxLength) {\r\n    return throwOrFalse(`Maximum length of ${maxLength} exceeded`);\r\n  }\r\n\r\n  let noDriveLetter = path;\r\n  if (/^\\w:(\\\\|\\/)/g.test(path)) {\r\n    noDriveLetter = path.substring(2);\r\n  }\r\n  if (/[<>\"|?*:]/g.test(noDriveLetter)) {\r\n    return throwOrFalse(`Illegal characters in: ${path}  |  Illegal characters are: <>\"|?:*`);\r\n  }\r\n\r\n  if (/(\\\\|\\/)(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])((\\\\|\\/)|$)/g.test(path)) {\r\n    return throwOrFalse('Illegal name in path string');\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nimport { Readable } from 'stream';\r\n\r\n/**\r\n * Extension of Node's native Readable class for converting a string into a Readable stream.\r\n */\r\nexport class StringStream extends Readable {\r\n  private str: string;\r\n  private ended: boolean;\r\n\r\n  constructor(str: string) {\r\n    super();\r\n    this.str = str;\r\n    this.ended = false;\r\n  }\r\n\r\n  _read(): void {\r\n    if (!this.ended) {\r\n      process.nextTick(() => {\r\n        this.push(Buffer.from(this.str));\r\n        this.push(null);\r\n      });\r\n      this.ended = true;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Drain a Readable into a string.\r\n * @param stream - a Readable of string chunks\r\n */\r\nexport async function streamToString(stream: Readable): Promise<string> {\r\n  const chunks: string[] = [];\r\n  for await (const chunk of stream) {\r\n    chunks.push(Buffer.from(chunk).toString());\r\n  }\r\n  return chunks.join('');\r\n}\r\n","/**\r\n * Returns the set intersection of a provded array of Set instances.\r\n * @param sets - an array of Set instances\r\n */\r\nexport function setIntersection(sets: Array<Set<any>>): Set<any> {\r\n  const result = new Set(sets[0].values());\r\n  for (let i = 1; i < sets.length; i++) {\r\n    for (const value of result.values()) {\r\n      if (!sets[i].has(value)) {\r\n        result.delete(value);\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Returns the set union of a provded array of Set instances.\r\n * @param sets - an array of Set instances\r\n */\r\nexport function setUnion(sets: Array<Set<any>>): Set<any> {\r\n  const result = new Set(sets[0].values());\r\n  for (let i = 1; i < sets.length; i++) {\r\n    for (const value of sets[i].values()) {\r\n      result.add(value);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n","/**\r\n * For recording time passed since constructor was invoked and until the stop() method i called.\r\n */\r\nexport class Timer {\r\n  /**\r\n   * The initial time\r\n   */\r\n  public t0: number;\r\n\r\n  constructor() {\r\n    this.t0 = Date.now();\r\n  }\r\n\r\n  /**\r\n   * Returns the time passed since constructor was invoked in milliseconds.\r\n   */\r\n  public stop(): number {\r\n    return Date.now() - this.t0;\r\n  }\r\n}\r\n"],"names":["timsort"],"mappings":"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"}